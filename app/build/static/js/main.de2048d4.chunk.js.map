{"version":3,"sources":["img/life-cycle.jpg","img/flex-img.jpg","img/box-model-1.jpg","img/box-model-2.jpg","img/logo.jpg","serviceWorker.js","reducer/app.js","actions/index.js","reducer/index.js","component/route/router.js","context/theme.js","component/route/link.js","pages/comp/LeftSider/index.jsx","pages/comp/Code/index.jsx","pages/react/base/index.jsx","pages/react/lifeCycle/index.jsx","pages/react/perf/index.jsx","component/PreviewImage/index.jsx","component/PreviewImage/EventEmitter.js","pages/react/selfComp/index.jsx","pages/react/special/pureFn.jsx","pages/react/special/pureComp.jsx","pages/react/special/hoc.jsx","pages/react/special/controlled-comp.jsx","pages/react/special/no-controlled-comp.jsx","pages/react/communication/props.jsx","pages/react/communication/context.jsx","pages/react/communication/redux.jsx","pages/react/communication/publishSubscribe.jsx","pages/react/communication/custom-redux.jsx","pages/react/note/index.jsx","pages/react/base/setState.jsx","pages/react/index.jsx","pages/js/base/this.jsx","pages/js/base/blockScope.jsx","pages/js/base/obj.jsx","pages/js/base/extend.jsx","pages/js/base/eventLoop.jsx","pages/js/base/copy.jsx","pages/js/HeightLevelFn/EventEmitter.jsx","component/LightImage/index.js","pages/js/HeightLevelFn/LightImage.jsx","pages/js/HeightLevelFn/memoization.jsx","pages/js/es6/symbol.jsx","pages/js/lessCommon/matchMedia.jsx","pages/js/mianshi/aboutQueue.jsx","pages/js/mianshi/aboutTree.jsx","pages/js/mianshi/myFetch.jsx","pages/js/mianshi/myMap.jsx","pages/js/mianshi/myForEach.jsx","pages/js/mianshi/myNew.jsx","pages/js/mianshi/myApply.jsx","pages/js/mianshi/myCall.jsx","pages/js/mianshi/myBind.jsx","pages/js/mianshi/myLet.jsx","pages/js/mianshi/myConst.jsx","pages/js/mianshi/myInstanceof.jsx","pages/js/mianshi/myPromise.jsx","pages/js/mianshi/myCache.jsx","pages/js/note/index.jsx","pages/js/index.jsx","pages/html/h5/index.jsx","pages/html/api/index.jsx","pages/html/index.jsx","pages/css/css3/index.jsx","pages/css/layout/flex.jsx","pages/css/layout/2cols.jsx","pages/css/layout/3cols.jsx","pages/css/layout/grid.jsx","pages/css/layout/sanjiao.jsx","pages/css/css3/boxModel.jsx","pages/css/index.jsx","pages/browser/base/browserload.jsx","pages/browser/base/cache.jsx","pages/browser/index.js","pages/algorithm/tree.jsx","pages/algorithm/index.jsx","pages/miniApp/wx/navbar.jsx","pages/miniApp/taro/bug.jsx","pages/miniApp/index.jsx","pages/webpack/plugin/html-webpack-plugin.jsx","pages/webpack/base/concept.jsx","pages/webpack/base/entry.jsx","pages/webpack/base/output.jsx","pages/webpack/base/mode.jsx","pages/webpack/base/loader.jsx","pages/webpack/base/plugins.jsx","pages/webpack/index.jsx","pages/perf/index.jsx","pages/node/index.jsx","config.js","component/Theme/index.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","changeLoginStatus","state","action","Object","assign","data","loginStatus","type","combineReducers","app","ContentRoute","props","exact","path","component","routeList","map","item","index","key","themesObj","light","foreground","background","dark","ThemeContext","React","createContext","MenuLink","currentHash","hash","menuList","this","curSelectedKeyIndex","forEach","indexOf","Consumer","theme","mode","defaultSelectedKeys","Item","id","to","replace","label","Component","SubMenu","Content","Sider","LeftSider","currentContentComp","SliderMenuList","children","comp","getCompFn","setState","contentHeight","innerHeight","width","className","collapsible","style","height","borderRight","prop","defaultOpenKeys","title","one","onClick","clickSliderItem","padding","margin","minHeight","Code","code","xmlns","viewBox","fill","fillRule","transform","cx","cy","r","stroke","strokeWidth","LifeCycle","src","lifeCycleIcon","alt","getList","res","i","push","value","Perf","list1","list2","list3","splice","Date","unshift","addItem","eventEmitter","events","cb","filter","fn","args","apply","PreviewImage","update","previewClass","root","canPreviewImages","getCurrentPageImages","show","selectedIndex","document","body","rootClass","Array","from","querySelectorAll","addEventListener","previewImage","bind","on","e","target","nodeName","toLowerCase","classList","isChildNode","getAttribute","console","log","selectorClassName","imageNodes","node","setAttribute","child","Node","length","contains","close","ref","dots","autoplay","infinite","defaultProps","SelfComp","Special","PureComp","HOC","ControllComp","NoControllComp","CommunicationProps","ContextComp","CommunicationRedux","href","CommunicationPublishSubscribe","Note","SetState","setTimeout","btnClick","ReactIndex","ThisComp","BlockScope","ObjShili","ObjExtend","EventLoop","CopyMode","EventEmitterFn","LightImage","init","createElement","innerText","gray_css","getElementsByTagName","appendChild","allImages","allImagesList","prototype","slice","call","add","remove","LightImageFn","Memoization","MySymbol","MatchMedia","AboutQueue","AboutTree","Myfetch","MyMap","MyNew","MyApply","MyCall","MyBind","MyLet","MyPromise","MyCache","H5Page","H5APIPage","CSS3Page","FlexPage","FlexImage","Col2Page","Col3Page","GridLayout","SanjiaoPage","BoxModel","scr","boxModel1","boxModel2","BrowserLoad","BrowserCache","TreeSort","WXNavbar","Taro","HtmlWebpackPlugin","Concept","WebpackEntry","WebpackOutput","WebpackMode","WebpackLoader","WebpackPlugins","ReactNote","MenuLinkDatas","settingMenu","Theme","handleMenuClick","changeTheme","overlay","DownOutlined","Header","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","APP","toggleTheme","color","Provider","logo","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.de2048d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/life-cycle.049d47c2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/flex-img.7c3c19eb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/box-model-1.c5cb6ebf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/box-model-2.d904040a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.126792da.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {LOGIN, LOGOUT } from '../actions/index';\n\n\nfunction changeLoginStatus(state, action) {\n    return Object.assign(state, action.data);\n}\n\nfunction loginStatus(state={}, action){\n    switch(action.type) {\n        case LOGIN:\n            return changeLoginStatus(state, action);\n        case LOGOUT: \n            return changeLoginStatus(state, action);\n        default: \n            return state || {};\n    }\n}\n\n\nexport default loginStatus;","\n\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const LOGIN_STATUS = 'LOGIN_STATUS';\n\nexport const getLoginStatus = (userinfo, status) => {\n    return {\n        type: LOGIN,\n        data: {\n            userinfo,\n            loginStatus: status,\n        }\n    }\n}","import { combineReducers } from 'redux'\nimport app from './app';\n\nexport default combineReducers({ \n    app,\n})","import React from 'react';\nimport { Route, Switch, } from 'react-router-dom';\n\nexport const ContentRoute = (props) =>\n    <Switch>\n            <Route exact path='/' component={props.routeList[0].component}/>\n            {\n                props.routeList.map((item, index) => \n                    <Route exact path={item.path} component={item.component} key={index}/>\n                )\n            }\n    </Switch>\n\nexport default ContentRoute;\n\n\n","import React from 'react';\n\nexport const themesObj = {\n    light: {\n      foreground: '#000000',\n      background: '#ffffff',\n      key: 'light',\n    },\n    dark: {\n      foreground: '#ffffff',\n      background: '#001529',\n      key: 'dark',\n    },\n};\n  \nexport const ThemeContext = React.createContext(\n    themesObj.dark // 默认值\n);","import React, { Component } from 'react';\nimport { Menu } from 'antd';\nimport { NavLink, Link } from 'react-router-dom';\nimport './link.scss';\nimport { ThemeContext } from '../../context/theme';\n\nclass MenuLink extends Component{\n\trender(){\n\t\tconst currentHash = window.location.hash;\n\t\tconst { menuList } = this.props;\n\t\tlet curSelectedKeyIndex = ['1'];\n\t\t\n\t\tmenuList.forEach((item, index) => {\n\t\t\tif (currentHash.indexOf(item.path) > -1) {\n\t\t\t\tcurSelectedKeyIndex = [(index + 1) + ''];\n\t\t\t}\n\t\t});\n\t\treturn(\n\t\t\t<ThemeContext.Consumer>\n\t\t\t\t{\n\t\t\t\t\t(theme) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Menu theme={theme} mode=\"horizontal\" defaultSelectedKeys={curSelectedKeyIndex}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmenuList.map((item, index) => <Menu.Item key={index + 1}><Link id={item.id} to={`/${item.path}`} replace>{item.label}</Link></Menu.Item>)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Menu>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t</ThemeContext.Consumer>\n\t\t)\n\t}\n}\n\nexport default MenuLink;","import React, {Component} from 'react';\nimport { Layout, Menu } from 'antd';\n\nconst { SubMenu } = Menu;\nconst { Content, Sider } = Layout;\n\nexport default class LeftSider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentContentComp: this.props.SliderMenuList[0].children[0].comp,\n        };\n    }\n\n    clickSliderItem(getCompFn) {\n        this.setState({\n          currentContentComp: getCompFn,\n        })\n    }\n\n    render() {\n        const { SliderMenuList } = this.props; \n        const { currentContentComp } = this.state; \n        const contentHeight = window.innerHeight - 60;\n        return (\n            <Layout>\n              <Sider width={200} className=\"site-layout-background\" collapsible>\n                <Menu\n                  mode=\"inline\" style={{ height: '100%', borderRight: 0 }}\n                  defaultSelectedKeys={[SliderMenuList[0].children[0].prop]}\n                  defaultOpenKeys={[SliderMenuList[0].prop]}\n                >\n                  {\n                    SliderMenuList.map((item) => {\n                        return (\n                          <SubMenu key={item.prop} title={item.label}>\n                              {\n                                  item.children.map((one) => <Menu.Item onClick={() => this.clickSliderItem(one.comp)} key={one.prop}>{one.label}</Menu.Item>)\n                              }\n                          </SubMenu>\n                        )\n                    })\n                  }\n                </Menu>\n              </Sider>\n              <Layout style={{ padding: '0 24px 24px'}}>\n                <Content className=\"site-layout-background\"\n                  style={{\n                    padding: 16,\n                    margin: 0,\n                    minHeight: contentHeight,\n                  }}\n                >\n                  { currentContentComp && currentContentComp()}\n                </Content>\n              </Layout>\n            </Layout>\n        )\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default function Code({ code, type }) {\n    return (\n        <div className=\"code-wrap\">\n            <div className=\"btn\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"54\" height=\"14\" viewBox=\"0 0 54 14\"><g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(1 1)\"><circle cx=\"6\" cy=\"6\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" strokeWidth=\".5\"></circle><circle cx=\"26\" cy=\"6\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" strokeWidth=\".5\"></circle><circle cx=\"46\" cy=\"6\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" strokeWidth=\".5\"></circle></g></svg>\n            </div>\n            <div className=\"code-type\">{type}</div>\n            <div className=\"code-text\">\n                <pre><code>{ code }</code></pre>\n            </div>\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class Base extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <Code \n                    code={`\nfunction aaa() {\n    console.log('hello world!!!');\n}\n                    `}\n                />\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\nimport lifeCycleIcon from '../../../img/life-cycle.jpg';\n\n\nexport default class LifeCycle extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">生命周期</span></p>\n                <div className=\"article-desc\">\n                    生命周期主要分为三个过程：<br />\n                        <span className=\"text-placeholder\"></span>挂载<br />\n                        <span className=\"text-placeholder\"></span>更新<br />\n                        <span className=\"text-placeholder\"></span>卸载<br />\n\n                        <img className=\"big-img\" src={lifeCycleIcon} alt=\"\" />\n                </div>\n                <p className=\"item-title\"><span className=\"textShadow\">一、挂载</span></p>\n                <div className=\"article-desc\">\n                    当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：<br />\n                    constructor()<br /><br />\n                    static getDerivedStateFromProps()<br /><br />\n                    render()<br /><br />\n                    componentDidMount()<br /><br />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、更新</span></p>\n                <div className=\"article-desc\">\n                    当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下<br />\n                    static getDerivedStateFromProps()<br /><br />\n                    shouldComponentUpdate()<br /><br />\n                    render()<br /><br />\n                    getSnapshotBeforeUpdate()<br /><br />\n                    componentDidUpdate()<br /><br />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、卸载</span></p>\n                <div className=\"article-desc\">\n                    当组件从 DOM 中移除时会调用如下方法：<br />\n                    componentWillUnmount()<br /><br />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、错误处理</span></p>\n                <div className=\"article-desc\">\n                    当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：<br />\n                    static getDerivedStateFromError()<br /><br />\n                    componentDidCatch()<br /><br />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">五、新生命周期函数解析</span></p>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">1. static getDerivedStateFromProps(props, state)</span><br /><br />\n                    getDerivedStateFromProps是为了替代componentWillReceiveProps而存在的，主要功能是将传入的props映射到state中。<br />\n                    getDerivedStateFromProps和componentWillReceiveProps两个的参数是不用的，getDerivedStateFromProps是一个静态函数，这个函数不能通过this访问到class的属性。<br />\n                    <Code code={`\nstatic getDerivedStateFromProps(nextProps, preState) {\n    if (nextProps.type !== preState.type) {\n        return {\n            type: nextProps.type //更新state\n        }\n    }\n    return null; //不更新state\n}`} /><br /> <br />\n                    <span className=\"mark\">2. getSnapshotBeforeUpdate(prevProps, prevState)</span><br /><br />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\nimport './index.scss';\nimport { Button } from 'antd';\n\nfunction getList() {\n    const res = [];\n    for (let i = 0; i < 1000; i++) {\n        res.push({\n            value: i,\n            id: i,\n        });\n    }\n    return res;\n}\n\nexport default class Perf extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list1: getList(),\n            list2: getList(),\n            list3: [\n                {value: 'item-1'},\n                {value: 'item-2'},\n                {value: 'item-3'},\n            ]\n        }\n    }\n\n    addItemToList() {\n        const { list1, list2 } = this.state;\n        list1.splice(499, 0, {\n            value: '我是新加的',\n            id: 'add'+ (+new Date()),\n        });\n        list2.splice(499, 0, {\n            value: '我是新加的',\n            id: 'add' + (+new Date()),\n        });\n        this.setState({\n            list1, list2\n        })\n    }\n\n    addItem() {\n        const {list3} = this.state;\n        list3.unshift({\n            value: 'item-' + (+new Date()),\n        });\n        this.setState({list3});\n    }\n\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react性能优化</span>\n                </p>\n                <div className=\"article-desc\">\n                    可以优化的点：<br />\n                    1. 简化state<br />\n                    2. 列表中使用key<br />\n                    3. 纯函数(PureComponent, React.memo)<br />\n                    4. 使用shouldComponentUpdate<br />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、简化state</span>\n                </p>\n                <div className=\"article-desc\">\n                    在react项目中初始化的时候要经历一个：getInitialState获取每个实例的初始化状态的过程，如果我们的state是一个很大的对象，那么在初始化的时候会比较耗时。\n                    在调用setState合并对象的时候也会比较耗时，所以，我们可以将不需要参与页面渲染的一些值抽离state，达到简化state的作用。\n                    <Code code={`\n//含有不参与页面渲染的state\nthis.state ={\n    isAPP: true,\n    isWx: false,\n    isQQ: false,\n    ...\n}`} />\n                    代码中的这些state其实都是不会参与页面的渲染，所以这些状态我可以不用放在state中。\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、渲染列表时加key</span>\n                </p>\n                <div className=\"article-desc\">\n                    在react项目中，在渲染一些列表的时候一定要加key这个属性，这样可以让react在最小范围内进行更新。\n                    参考资料： https://segmentfault.com/a/1190000017152570\n                    <br /><br />\n                    <span className=\"mark\">1. 为什么要使用key<br /></span>\n                    官方定义：key可以在DOM中的某些元素被增加或删除的时候帮助react识别哪些元素发生了变化。<br />\n                    react diff算法中是把key当做唯一id然后对比组件的value来确认是否要更新。<br /><br />\n                    <span className=\"mark\">2. 用index做key存在的问题<br /></span>\n                    如果是受控组件：使用index做key，表面看着没有问题，实际上性能会受到很大的影响。\n                    <Code code={`\nconst list = [\n    {label: '111', id: 1},\n    {label: '222', id: 2},\n    {label: '333', id: 3},\n];\n//render里渲染出的组件\n<ul>\n{list.map((item, index) => <li key={index}>{item.label}</li>)}\n</ul>\n\n// ==> 对应的html结构为\n<ul>\n    <li key=\"0\">111</li>\n    <li key=\"1\">222</li>\n    <li key=\"2\">333</li>\n</ul>\n\n//当list的顺序发生变化时：\nconst list = [\n    {label: '222', id: 2},\n    {label: '111', id: 1},\n    {label: '333', id: 3}, \n];\n\n//渲染出的html结构：\n<ul>\n    <li key=\"0\">222</li>\n    <li key=\"1\">111</li>\n    <li key=\"2\">333</li>\n</ul>\n`} />\n                在上述的代码中，key为0，1，2的三个li标签都发生了变化，所以在diff的时候都会重新渲染。<br />\n                如果对上述代码做优化，设置唯一的key：\n                <Code code={`\n//原始结构\n<ul>\n    <li key=\"111\">111</li>\n    <li key=\"222\">222</li>\n    <li key=\"333\">333</li>\n</ul>\n\n//修改位置\n<ul>\n    <li key=\"222\">222</li>\n    <li key=\"111\">111</li>\n    <li key=\"333\">333</li>\n</ul>`} />\n                此时，子组件的值和key都没有发生变化，只是位置变化了，所以只需要进行移动就行，不需要重新渲染，性能会大大的提升。\n                <br /><br />\n                {/* 实例演示：左右都为长度为1000的list，左边用index做key，右边用唯一值做key.\n                <div className=\"demo-1\">\n                    <Button onClick={() => this.addItemToList()}>中间添加一行数据</Button>\n                    <div className=\"left\">\n                        <ul>\n                            {\n                                this.state.list1.map((item, index) => <li key={index}>{item.value}</li>)\n                            }\n                        </ul>\n                    </div>\n                    <div className=\"right\">\n                        <ul>\n                            {\n                                this.state.list2.map((item, index) => <li key={item.id}>{item.value}</li>)\n                            }\n                        </ul>\n                    </div>\n                </div> */}\n                    <br /><br />\n                    在非受控组件中：使用index作为key会出问题，参考如下代码演示：<br /><br />\n                    <div className=\"demo\">\n                        <Button type=\"primary\" onClick={() => this.addItem()}>添加一行</Button>\n                            <div className=\"left\">\n                                <span className=\"mark\">用index作为key：<br /></span>\n                                {\n                                    this.state.list3.map((item, index) => (\n                                        <div key={index}>\n                                            <span>{item.value}:</span>\n                                            <input />\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                            <div className=\"right\">\n                                <span className=\"mark\">用唯一值作为key：<br /></span>\n                                {\n                                    this.state.list3.map((item, index) => (\n                                        <div key={item.value}>\n                                            <span>{item.value}:</span>\n                                            <input />\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Carousel } from 'antd-mobile';\nimport './index.scss';\nimport EventEmitter from './EventEmitter';\n\nconst eventEmitter = new EventEmitter();\n\nfunction updatePreviewImages() {\n    setTimeout(() => {\n        eventEmitter.emit('update-previewImages');\n    }, 300);\n}\n\nexport {\n    updatePreviewImages,\n};\n/**\n * 浏览大图组件\n * 使用：将组件引入当前页面即可对类名为preview-img的img生效\n * 属性：\n *   previewClass： 自定义要预览图片的className（默认为preview-img）\n *   rootClass：    只有父元素的className为rootClass的所有img（className为previewClass）才可以被预览（默认父元素为body）\n */\nexport default class PreviewImage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            selectedIndex: 0,\n            canPreviewImages: [],\n            root: document.body, //要预览图片的祖父元素，只能预览root内的图片，默认为body\n        };\n    }\n\n    componentDidMount() {\n        let { root } = this.state;\n        const { previewClass, rootClass = '' } = this.props;\n        \n        if (rootClass != '') {\n            root = Array.from(document.querySelectorAll(`.${rootClass}`));\n        }\n        const canPreviewImages = this.getCurrentPageImages(previewClass, root);\n        this.setState({\n            canPreviewImages,\n            root,\n        });\n        window.addEventListener('click', this.previewImage.bind(this, root), false);\n        eventEmitter.on('update-previewImages', this.update);\n    }\n\n    update = () => {\n        const { previewClass } = this.props;\n        const { root } = this.state;\n        this.setState({\n            canPreviewImages: this.getCurrentPageImages(previewClass, root),\n        });\n    }\n\n    // componentWillUnMount() {\n    //     window.removeEventListener('click', this.previewImage.bind(this, []));\n    //     eventEmitter.off('update-previewImages', this.update);\n    // }\n\n    previewImage(root, e) {\n        const { previewClass } = this.props;\n        if (e.target.nodeName.toLowerCase() === 'img' \n            && e.target.classList.value.indexOf(previewClass) > -1 \n                && this.isChildNode(root, e.target)) {\n            const index = e.target.getAttribute('data-preview-index');\n            console.log('---index---', index);\n            this.setState({\n                show: true,\n                selectedIndex: index,\n            });\n            // window.addEventListener('touchmove', this.preventDefault, {\n            //     passive: false\n            // });\n        }\n    }\n\n    //获取当前页面所有可以预览的图片\n    getCurrentPageImages(selectorClassName, root) {\n        const imageNodes = Array.from(document.querySelectorAll(`.${selectorClassName}`));\n        const canPreviewImages = [];\n        //从所有指定类名的img中筛选出可以预览的图片\n        imageNodes.filter((item, index) => {\n            if (item.nodeName.toLowerCase() === 'img' && this.isChildNode(root, item)) {\n                return item;\n            }\n        }).forEach((node, one) => {\n            const src = node.getAttribute('src');\n            node.setAttribute('data-preview-index', one);\n            canPreviewImages.push({\n                src,\n                index: one,\n            });\n        });\n        return canPreviewImages;\n    }\n    //阻止默认事件\n    // preventDefault(e) {\n    //     e = e || window.event;\n    //     if (e.preventDefault) {\n    //         e.preventDefault();\n    //     } else {\n    //         e.returnValue = false;\n    //     }\n    // }\n    //判断是否为子节点\n    isChildNode(root, child) {\n        let res = false;\n        if (!child instanceof Node) {\n            return false;\n        }\n        if (root instanceof Array) {\n            for (let i = 0; i < root.length; i++) {\n                if (root[i] instanceof Node && root[i].contains(child)) {\n                    res = true;\n                    break;\n                }\n            }\n        }\n        if (root instanceof Node) {\n            res = root.contains(child);\n        }\n        return res;\n    }\n\n    close() {\n        this.setState({\n            show: false,\n        });\n        // window.removeEventListener('touchmove', this.preventDefault);\n    }\n\n    render() {\n        const { show, selectedIndex, canPreviewImages } = this.state;\n        if (!show) {\n            return null;\n        }\n        return (\n            <div className=\"component-previewImage\" onClick={() => this.close()}>\n                <Carousel\n                    ref=\"previewImage\"\n                    selectedIndex={selectedIndex}\n                    dots={false}\n                    autoplay={false}\n                    infinite={false}\n                    // beforeChange={(from, to) => console.log(`slide from ${from} to ${to}`)}\n                    // afterChange={index => console.log('slide to', index)}\n                >\n                    {\n                        canPreviewImages.map((item, index) => {\n                            return (\n                                <div className=\"previewImage-wrap\" key={index}>\n                                    <img \n                                        className=\"previewImage-img\" \n                                        src={item.src} \n                                        alt=\"\" \n                                    />\n                                </div>\n                            )\n                        })\n                    }\n                </Carousel>\n            </div>\n        )\n    }\n}\n/**\n * rootClass: 只有class为rootClass的元素里面的img才可以被预览，默认是空（表示：body下的class为previewClass的img都可以预览）\n * previewClass: 要预览的图片的class类名，默认为preview-img\n */\nPreviewImage.propTypes = {\n    rootClass: PropTypes.string,\n    previewClass: PropTypes.string,\n};\n  \nPreviewImage.defaultProps = {\n    rootClass: '',\n    previewClass: 'preview-img',\n};\n","/**\n * 实现一个简单的发布订阅\n */\nexport default class EventEmitter {\n    constructor () {\n        this.events = {};\n    }\n\n    on (type, cb) {\n        if (!this.events[type]) {\n            this.events[type] = [cb];\n        } else {\n            this.events[type].push(cb);\n        }\n    }\n\n    off (type, cb) {\n        if (!this.events[type]) {\n            return;\n        } else {\n            this.events[type] = this.events[type].filter(fn => fn !== cb);\n        }\n    }\n\n    emit (type, ...args) {\n        if (this.events[type]) {\n            this.events[type].map(fn => fn.apply(this, args));\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport PreviewImage, { updatePreviewImages } from './../../../component/PreviewImage';\nimport Code from './../../comp/Code';\nimport './../../comp/common/style.css';\n\n\n\n\nexport default class SelfComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">自定义组件---预览大图</span>\n                </p>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">使用技术及方法</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    react, antd-mobile(Carousel--走马灯组件), 订阅发布功能<br />\n                    给将要预览的图片加上统一的类名（默认为preview-img）用来选取该元素。\n                </div>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">使用实例</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    点击任意图片，可以直接预览图片，并且可以左右滑动预览其他图片。<br />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939135&di=cb3dee315e0f312aab4e2fae136abca5&imgtype=0&src=http%3A%2F%2Fp0.ifengimg.com%2Fpmop%2F2018%2F0809%2FD5AD6058C6F7F813F01E0AF06364286B93F53E27_size21_w600_h399.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939136&di=84d3db1eaf300c7da975f9b77c4aeed7&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161019%2F38dae34b3f264fd39ce0de0d9ae613b7_th.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939134&di=7e4cb10cf71cd9fc5653d21ada0824db&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201403%2F20%2F20140320235526_QWwya.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939134&di=2eb3ae79c4e7d3fe858173d0e9d346cb&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201612%2F05%2F20161205101430_QjPwv.thumb.700_0.jpeg\" />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">页面中图片增加或者删除后预览</span>\n                </p>\n\n\n                <div className=\"article-desc\">\n                    用订阅发布模式实现了当前页面中有图片增多或者减少时候的更新方法:  updatePreviewImages<br />\n                </div>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">代码</span>\n                </p>\n\n                <Code code={`\n// EventEmitter.js\n\n/**\n * 实现一个简单的发布订阅\n */\nexport default class EventEmitter {\n    constructor () {\n        this.events = {};\n    }\n\n    on (type, cb) {\n        if (!this.events[type]) {\n            this.events[type] = [cb];\n        } else {\n            this.events[type].push(cb);\n        }\n    }\n\n    off (type, cb) {\n        if (!this.events[type]) {\n            return;\n        } else {\n            this.events[type] = this.events[type].filter(fn => fn !== cb);\n        }\n    }\n\n    emit (type, ...args) {\n        if (this.events[type]) {\n            this.events[type].map(fn => fn.apply(this, args));\n        }\n    }\n}\n\n\n// PreviewImage.jsx\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Carousel } from 'antd-mobile';\nimport './index.scss';\nimport EventEmitter from './EventEmitter';\n\nconst eventEmitter = new EventEmitter();\n\nfunction updatePreviewImages() {\n    setTimeout(() => {\n        eventEmitter.emit('update-previewImages');\n    }, 300);\n}\n\nexport {\n    updatePreviewImages,\n};\n/**\n * 浏览大图组件\n * 使用：将组件引入当前页面即可对类名为preview-img的img生效\n * 属性：\n *   previewClass： 自定义要预览图片的className（默认为preview-img）\n *   rootClass：    只有父元素的className为rootClass的所有img（className为previewClass）才可以被预览（默认父元素为body）\n */\nexport default class PreviewImage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            selectedIndex: 0,\n            canPreviewImages: [],\n            root: document.body, //要预览图片的祖父元素，只能预览root内的图片，默认为body\n        };\n    }\n\n    componentDidMount() {\n        let { root } = this.state;\n        const { previewClass, rootClass = '' } = this.props;\n        \n        if (rootClass != '') {\n            root = Array.from(document.querySelectorAll('.$ {rootClass}'));\n        }\n        const canPreviewImages = this.getCurrentPageImages(previewClass, root);\n        this.setState({\n            canPreviewImages,\n            root,\n        });\n        window.addEventListener('click', this.previewImage.bind(this, root), false);\n        eventEmitter.on('update-previewImages', this.update);\n    }\n\n    update = () => {\n        const { previewClass } = this.props;\n        const { root } = this.state;\n        this.setState({\n            canPreviewImages: this.getCurrentPageImages(previewClass, root),\n        });\n    }\n\n    componentWillUnMount() {\n        window.removeEventListener('click', this.previewImage.bind(this, []));\n        eventEmitter.off('update-previewImages', this.update);\n    }\n\n    previewImage(root, e) {\n        const { previewClass } = this.props;\n        if (e.target.nodeName.toLowerCase() === 'img' \n            && e.target.classList.value.indexOf(previewClass) > -1 \n                && this.isChildNode(root, e.target)) {\n            const index = e.target.getAttribute('data-preview-index');\n            console.log('---index---', index);\n            this.setState({\n                show: true,\n                selectedIndex: index,\n            });\n            window.addEventListener('touchmove', this.preventDefault, {\n                passive: false\n            });\n        }\n    }\n\n    //获取当前页面所有可以预览的图片\n    getCurrentPageImages(selectorClassName, root) {\n        const imageNodes = Array.from(document.querySelectorAll(.$ {selectorClassName}'));\n        const canPreviewImages = [];\n        //从所有指定类名的img中筛选出可以预览的图片\n        imageNodes.filter((item, index) => {\n            if (item.nodeName.toLowerCase() === 'img' && this.isChildNode(root, item)) {\n                return item;\n            }\n        }).forEach((node, one) => {\n            const src = node.getAttribute('src');\n            node.setAttribute('data-preview-index', one);\n            canPreviewImages.push({\n                src,\n                index: one,\n            });\n        });\n        return canPreviewImages;\n    }\n\n\n    //阻止默认事件\n    preventDefault(e) {\n        e = e || window.event;\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    }\n\n\n    //判断是否为子节点\n    isChildNode(root, child) {\n        let res = false;\n        if (!child instanceof Node) {\n            return false;\n        }\n        if (root instanceof Array) {\n            for (let i = 0; i < root.length; i++) {\n                if (root[i] instanceof Node && root[i].contains(child)) {\n                    res = true;\n                    break;\n                }\n            }\n        }\n        if (root instanceof Node) {\n            res = root.contains(child);\n        }\n        return res;\n    }\n\n    close() {\n        this.setState({\n            show: false,\n        });\n        window.removeEventListener('touchmove', this.preventDefault);\n    }\n\n    render() {\n        const { show, selectedIndex, canPreviewImages } = this.state;\n        if (!show) {\n            return null;\n        }\n        return (\n            <div className=\"component-previewImage\" onClick={() => this.close()}>\n                <Carousel\n                    ref=\"previewImage\"\n                    selectedIndex={selectedIndex}\n                    dots={false}\n                    autoplay={false}\n                    infinite={false}\n                    // afterChange={index => console.log('slide to', index)}\n                >\n                    {\n                        canPreviewImages.map((item, index) => {\n                            return (\n                                <div className=\"previewImage-wrap\" key={index}>\n                                    <img \n                                        className=\"previewImage-img\" \n                                        src={item.src} \n                                        alt=\"\" \n                                    />\n                                </div>\n                            )\n                        })\n                    }\n                </Carousel>\n            </div>\n        )\n    }\n}\n\n/**\n * rootClass: 只有class为rootClass的元素里面的img才可以被预览，默认是空（表示：body下的class为previewClass的img都可以预览）\n * previewClass: 要预览的图片的class类名，默认为preview-img\n */\nPreviewImage.propTypes = {\n    rootClass: PropTypes.string,\n    previewClass: PropTypes.string,\n};\n    \nPreviewImage.defaultProps = {\n    rootClass: '',\n    previewClass: 'preview-img',\n};\n\n// PreviewImage.sass\n\n.component-previewImage{\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0,0,0,.8);\n    z-index: 999;\n    left: 0;\n    top: 0;\n    .previewImage-wrap{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 100%;\n        height: 100vh;\n        overflow: hidden;\n        .previewImage-img{\n            width: 100%;\n            height: 100%;\n            object-fit: contain;\n        }\n    }\n}\n                `} />\n\n\n                <PreviewImage />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Special extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">纯函数</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、纯函数定义及构成原则</span>\n                </p>\n                \n                <div className=\"article-desc\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、纯函数的好处</span>\n                </p>\n                <div className=\"article-desc\">\n                    1. 使用纯函数的主要好处是方便测试，可以直接测试，给定入参，输出值；如果传入相同的参数，它们将始终产生相同的结果;<br />\n                    2. 纯函数使得代码的维护和重构会更加容易（可以放心地重构一个纯函数，不必担心没注意到的副作用搞乱了整个应用而导致终调试地狱）；<br />\n                    3. 正确的使用纯函数可以产生高质量的代码，也是一种更加干净的编码方式；<br />\n                    4. 可移植性、可复用性高；<br />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、纯函数在react中的使用</span>\n                </p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class PureComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">纯组件</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、纯函数定义及构成原则</span>\n                </p>\n                \n                <div className=\"article-desc\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、纯函数的好处</span>\n                </p>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、纯函数在react中的使用</span>\n                </p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class HOC extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">高阶组件</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、纯函数定义及构成原则</span>\n                </p>\n                \n                <div className=\"article-desc\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、纯函数的好处</span>\n                </p>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、纯函数在react中的使用</span>\n                </p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class ControllComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">受控组件</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、纯函数定义及构成原则</span>\n                </p>\n                \n                <div className=\"article-desc\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、纯函数的好处</span>\n                </p>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、纯函数在react中的使用</span>\n                </p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class NoControllComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">非受控组件</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、纯函数定义及构成原则</span>\n                </p>\n                \n                <div className=\"article-desc\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、纯函数的好处</span>\n                </p>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、纯函数在react中的使用</span>\n                </p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class CommunicationProps extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react组件间的通信---props</span>\n                </p>\n                <div className=\"article-desc\">\n                    在react项目开发中使用props进行父子组件间数据通信是十分常见的，也是最简单的通信方法。\n                    <br /><br />\n                    <Code code={`\nclass ChildComp extends Component {\n    constructor(props) {\n\n    }\n    render() {\n        const { text, clickCB } = this.props;\n        return (\n            <div onClick={() => clickCB()}>\n                {text}\n            </div>\n        )\n    }\n}\n\nclass FatherComp extends Component {\n    constructor(props) {\n\n    }\n    childClick() {\n        console.log('child clicked!!!');\n    }\n    render() {\n        return (\n            <div>\n                <ChildComp \n                    text=\"hello world\"\n                    clickCB={this.childClick}\n                />\n            </div>\n        )\n    }\n}\n\n`}  />\n                <br /><br />\n                在父组件中将要传递给子组件的数据以属性的形式传给子组件，子组件可以通过this.props来获取。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ContextComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react组件间的通信---context</span>\n                </p>\n                <div className=\"article-desc\">\n                    官网文档： https://zh-hans.reactjs.org/docs/context.html#gatsby-focus-wrapper\n                    <br />\n                    <span className=\"mark\">Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。</span>\n                    <br /><br />\n                    1、为什么要用context？<br />\n                    在一个典型的 React 应用中，数据是通过 props 属性自上而下（由父及子）进行传递的，但这种做法对于某些类型的属性而言是极其繁琐的（例如：地区偏好，UI 主题），这些属性是应用程序中许多组件都需要的。Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。\n                    <br /><br />\n                    2、什么时候使用context？<br />\n                    Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。\n                    <br /><br />\n                    3、使用context对项目有什么影响？<br />\n                    Context 主要应用场景在于很多不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、context的API</span>\n                </p>\n                <div className=\"article-desc\">\n                    1. React.createContext<br />\n                    <div className=\"code-desc\">const MyContext = React.createContext(defaultValue);</div>\n                    创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 context 值。\n                    <br />\n                    只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效。\n\n                    <br /><br />\n                    2. Context.Provider<br />\n                    <div className=\"code-desc\">{'<MyContext.Provider value=\"某个值\"></MyContext.Provider>'}</div>\n                    每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。<br /><br />\n                    Provider 接收一个 value 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。<br /><br />\n\n                    当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 shouldComponentUpdate 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。\n\n                    <br /><br />\n                    3. Class.contextType<br />\n                    挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext() 创建的 Context 对象。这能让你使用 this.context 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。\n                    <br />\n\n                    <Code code={`\nclass MyClass extends React.Component {\n    componentDidMount() {\n      let value = this.context;\n      /* 在组件挂载完成后，使用 MyContext 组件的值来执行一些有副作用的操作 */\n    }\n    componentDidUpdate() {\n      let value = this.context;\n      /* ... */\n    }\n    componentWillUnmount() {\n      let value = this.context;\n      /* ... */\n    }\n    render() {\n      let value = this.context;\n      /* 基于 MyContext 组件的值进行渲染 */\n    }\n  }\n  MyClass.contextType = MyContext;`}></Code>\n<br />\n                    <Code code={`\nclass MyClass extends React.Component {\n    static contextType = MyContext;\n    render() {\n      let value = this.context;\n      /* 基于这个值进行渲染工作 */\n    }\n}`} /><br /><br />\n\n                    4. Context.Consumer<br />\n                    这里，React 组件也可以订阅到 context 变更。这能让你在函数式组件中完成订阅 context。\n                    <br /><br />\n                    这需要函数作为子元素（function as a child）这种做法。这个函数接收当前的 context 值，返回一个 React 节点。传递给函数的 value 值等同于往上组件树离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 defaultValue。\n                    <Code code={`\n<MyContext.Consumer>\n    {value => /* 基于 context 值进行渲染*/}\n</MyContext.Consumer>`} /><br /><br />\n                    5. Context.displayName<br />\n                    context 对象接受一个名为 displayName 的 property，类型为字符串。<br />\n                    <Code code={`\nconst MyContext = React.createContext(/* some value */);\nMyContext.displayName = 'MyDisplayName';\n\n<MyContext.Provider> // \"MyDisplayName.Provider\" 在 DevTools 中\n<MyContext.Consumer> // \"MyDisplayName.Consumer\" 在 DevTools 中`} />\n                </div>\n     \n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class CommunicationRedux extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react组件间的通信---redux</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、学习redux</span>\n                </p>\n                <div className=\"article-desc\">\n                    redux中文官网： <a href=\"https://www.redux.org.cn/\" target=\"_blank\">https://www.redux.org.cn/</a><br />\n                    <br />\n                    <span className=\"mark\">1. redux三大原则</span><br />\n                    a、单一数据源。 整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。<br /><br />\n                    b、State 是只读的。唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。<br /><br />\n                    c、使用纯函数来执行修改。为了描述 action 如何改变 state tree ，需要编写 reducers。<br /><br />\n                    <br />\n\n                    <span className=\"mark\">2. Action</span><br />\n                    a、Action: Action 是把数据从应用传到 store 的有效载荷。它是 store 数据的唯一来源。一般来说你会通过 store.dispatch() 将 action 传到 store。<br /><br />\n                    b、Action 本质: 是 JavaScript 普通对象<br /><br />\n                    c、对Action的约定：action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作。多数情况下，type 会被定义成字符串常量。当应用规模越来越大时，建议使用单独的模块或文件来存放 action。<br /><br />\n                    d、应该尽量减少在 action 中传递的数据<br /><br />\n                    e、Action 创建函数： 就是生成 action 的方法<br /><br />\n                    \n                    <span className=\"mark\">3. Reducer</span><br />\n                    a、Reducers 指定了应用状态的变化如何响应 actions 并发送到 store 的，记住 actions 只是描述了有事情发生了这一事实，并没有描述应用如何更新 state。<br /><br />\n                    b、reducer: 就是一个纯函数，接收旧的 state 和 action，返回新的 state。<br /><br />\n                    c、由于reducer是一个纯函数，所以在reducer中不能：修改传入参数；执行有副作用的操作，如 API 请求和路由跳转；调用非纯函数，如 Date.now() 或 Math.random()。<br /><br />\n                    d、处理多个 action: reducers可以处理多个action<br /><br />\n\n                    <span className=\"mark\">4. Store</span><br />\n                    a、Store 是把action，reducer联系到一起的对象<br /><br />\n                    b、Store 的职责：<br /><br />\n                        维持应用的 state；<br />\n                        提供 getState() 方法获取 state；<br />\n                        提供 dispatch(action) 方法更新 state；<br />\n                        通过 subscribe(listener) 注册监听器;<br />\n                        通过 subscribe(listener) 返回的函数注销监听器。<br /><br />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、API</span>\n                </p>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">1、createStore</span><br />\n                    <div className=\"code-desc\">\n                        createStore(reducer, [preloadedState], enhancer)\n                    </div>\n                    作用： 创建一个 Redux store 来以存放应用中所有的 state。<br /><br />\n                    参数： <br />\n                    reducer (Function): 接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 state 树。<br /><br />\n                    [preloadedState] (any): 初始时的 state。<br /><br />\n                    enhancer (Function): Store enhancer 是一个组合 store creator 的高阶函数，返回一个新的强化过的 store creator。这与 middleware 相似，它也允许你通过复合函数改变 store 接口。<br /><br />\n                    返回值： 保存了应用所有 state 的对象。<br /><br />\n                    <Code code={`\nimport { createStore } from 'redux'\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([action.text])\n    default:\n      return state\n  }\n}\n\nlet store = createStore(todos, ['Use Redux'])\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Read the docs'\n})\n\nconsole.log(store.getState())\n// [ 'Use Redux', 'Read the docs' ]`} /><br /><br />\n\n                        <span className=\"mark\">2、Store</span><br />\n                        Store 就是用来维持应用所有的 state 树 的一个对象。 改变 store 内 state 的惟一途径是对它 dispatch 一个 action。<br /><br />\n                        Store 方法: <br />\n                        getState(), dispatch(action), subscribe(listener), replaceReducer(nextReducer)\n                        <br /><br />\n\n                        getState(): 返回应用当前的 state 树。它与 store 的最后一个 reducer 返回值相同。<br /><br />\n                        dispatch(action): 分发 action。这是触发 state 变化的惟一途径。返回值object： 要 dispatch 的 action。<br /><br />\n                        subscribe(listener)： 添加一个变化监听器。每当 dispatch action 的时候就会执行，state 树中的一部分可能已经变化。你可以在回调函数里调用 getState() 来拿到当前 state。 返回值： 一个可以解绑变化监听器的函数。<br /><br />\n                        replaceReducer(nextReducer)： 替换 store 当前用来计算 state 的 reducer。<br /><br />\n                \n                        <span className=\"mark\">3、combineReducers(reducers)</span><br />\n                        combineReducers 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore 方法。<br /><br />\n                        参数： reducers (Object): 一个对象，它的值（value）对应不同的 reducer 函数，这些 reducer 函数后面会被合并成一个。<br /><br />\n                        返回值： (Function)：一个调用 reducers 对象里所有 reducer 的 reducer，并且构造一个与 reducers 对象结构相同的 state 对象。<br /><br />\n                        \n                        <span className=\"mark\">4、applyMiddleware(...middlewares)</span><br />\n                        使用包含自定义功能的 middleware 来扩展 Redux 是一种推荐的方式。Middleware 可以让你包装 store 的 dispatch 方法来达到你想要的目的。同时， middleware 还拥有“可组合”这一关键特性。多个 middleware 可以被组合到一起使用，形成 middleware 链。其中，每个 middleware 都不需要关心链中它前后的 middleware 的任何信息。<br /><br />\n                        参数： ...middlewares (arguments): 遵循 Redux middleware API 的函数。每个 middleware 接受 Store 的 dispatch 和 getState 函数作为命名参数，并返回一个函数。该函数会被传入 被称为 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next(action)，或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store 的 dispatch 方法作为 next 参数，并借此结束调用链。<br /><br />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、react-redux</span>\n                </p>\n                <div className=\"article-desc\">\n                    react-redux API: <br /><br />\n                    <span className=\"mark\">1. Provider</span>\n                    Provider 组件的属性：store， 使组件层级中的 connect() 方法都能够获得 Redux store。正常情况下，你的根组件应该嵌套在 Provider 中才能使用 connect() 方法。<br /><br />\n                    使用实例：\n                    <Code code={`\nReactDOM.render(\n    <Provider store={store}>\n      <MyRootComponent />\n    </Provider>,\n    document.getElementById('root')\n)\n//和router配合使用\nReactDOM.render(\n    <Provider store={store}>\n      <Router history={history}>\n        <Route path=\"/\" component={App}>\n          <Route path=\"foo\" component={Foo} />\n          <Route path=\"bar\" component={Bar} />\n        </Route>\n      </Router>\n    </Provider>,\n    document.getElementById('root')\n)`} /><br /><br />\n                    <span className=\"mark\">2. connect</span><br />\n                    <div className=\"code-desc\">connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</div>\n                    connect的作用是连接 React 组件与 Redux store。连接操作不会改变原来的组件类。反而返回一个新的已与 Redux store 连接的组件类。<br />\n                    connect是一个高阶组件。<br /><br />\n                    <span className=\"mark\">connect的参数：</span><br />\n                    mapStateToProps： Function， mapStateToProps(state, [ownProps])<br /><br />\n                    如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。<br /><br />\n                    state: 是全局store里的状态，是父组件（provider）传给当前组件的props<br /><br />\n                    ownProps: 是当前组件自己的props，如果组件接受到的props变动的时候会重新调用mapStateToProps函数进行计算。<br /><br />\n                \n                    mapDispatchToProps： Function， mapDispatchToProps(dispatch, [ownProps])<br /><br />\n                    如果mapDispatchToProps是一个对象：那么每个定义在该对象的函数都将被当作 Redux action creator，对象所定义的方法名将作为属性名；每个方法将返回一个新的函数，函数中dispatch方法会将 action creator 的返回值作为参数执行。这些属性会被合并到组件的 props 中。<br /><br />\n                    如果mapDispatchToProps是一个函数：该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起。如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。<br /><br />\n                \n                    mergeProps： Function， mergeProps(stateProps, dispatchProps, ownProps)<br /><br />\n                    如果指定了这个参数，mapStateToProps() 与 mapDispatchToProps() 的执行结果和组件自身的 props 将传入到这个回调函数中。该回调函数返回的对象将作为 props 传递到被包装的组件中。你也许可以用这个回调函数，根据组件的 props 来筛选部分的 state 数据，或者把 props 中的某个特定变量与 action creator 绑定在一起。如果你省略这个参数，默认情况下返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class CommunicationPublishSubscribe extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react组件间的通信---发布订阅模式</span>\n                </p>\n                <div className=\"article-desc\">\n                    在跨多个组件之间通信如果用props来传递的话，会显得很繁琐，很冗余，中间组件不需要props也被迫要进行传递。\n                    <br /><br />\n                    使用流程： 在子组件中进行订阅，在父组件中进行发布通知让子组件进行更新。\n\n                    <Code code={`\n/**\n * 实现一个简单的发布订阅\n */\nexport default class EventEmitter {\n    constructor () {\n        this.events = {};\n    }\n\n    on (type, cb) {\n        if (!this.events[type]) {\n            this.events[type] = [cb];\n        } else {\n            this.events[type].push(cb);\n        }\n    }\n\n    off (type, cb) {\n        if (!this.events[type]) {\n            return;\n        } else {\n            this.events[type] = this.events[type].filter(fn => fn !== cb);\n        }\n    }\n\n    emit (type, ...args) {\n        if (this.events[type]) {\n            this.events[type].map(fn => fn.apply(this, args));\n        }\n    }\n}\n\n//子组件\nconst eventEmitter = new EventEmitter();\n\nclass ChildComp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: 1,\n        }\n    }\n\n    componentDidMount() {\n        eventEmitter.on('update-state', () => {\n            this.setState({\n                data: this.state.data + 1\n            })\n        })\n    }\n    render() {\n        return <div>{this.state.data}</div>\n    }\n}\n\n//父组件\nconst eventEmitter = new EventEmitter();\n\nclass FatherComp extends Component {\n    clickBtn = () => {\n        eventEmitter.emit('update-state')\n    }\n    render() {\n        return <button onClick={this.clickBtn}>click</button>\n    }\n}\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ContextComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">自己实现redux核心功能</span>\n                </p>\n                <div className=\"article-desc\">\n                    参考文档：<a href=\"https://juejin.im/post/5b29025ee51d4558b64f10bf\" target=\"_blank\">https://juejin.im/post/5b29025ee51d4558b64f10bf</a>\n                    <br /><br />\n                    redux使用的基础场景：<br />\n                    <Code code={`\n//reducer：通过action用来改变state，返回一个新的state\nfunction reducer(state, action) {\n    // ...\n    return state;\n}\n\n//将reducer和store关联起来，只有通过action通知reducer改变state后同步到store，返回一个store对象\nconst store = createStore(reducer);\n\n//订阅store中的state，如果有state发生变化，则会触发监听函数\nstore.subscribe(function() {\n    store.getState();\n});\n\n//通过dispatch发送一个action\nstore.dispatch({\n    type: 'ADD',\n    data: 1\n})`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、实现createStore方法</span>\n                </p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction createStore(reducer) {\n    let state = null; //存储全部的状态\n    const events = []; //保存订阅状态变化的回调函数\n    //订阅\n    const subscribe = (fn) => {\n        events.push(fn);\n        //订阅成功后返回一个取消订阅的方法\n        return function () {\n            events = events.filter(itemFn => itemFn !== fn);\n        }\n    }\n    //获取最新的state\n    const getState = () => state;\n\n    const dispatch = (action) => {\n        //通过action执行reducer改变state\n        state = reducer(state, action);\n        //state改变后执行订阅的回调函数\n        events.forEach(fn => fn());\n    }\n    //初始化全局状态\n    dispatch({});\n    return { subscribe, getState, dispatch };\n}`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、实现combineReducers方法</span>\n                </p>\n                <div className=\"article-desc\">\n                combineReducers方法会将所有的reducer合并成一个传给createStore方法。<br />\n                    <Code code={`\nfunction combineReducers(reducers) {\n    return function(state = {}, action) {\n        let newState = {};\n        for (let key in reducers) {\n            newState[key] = reducers[key](state[key], action);\n        }\n        return newState;\n    }\n}\n//使用\nconst rootReducer = combineReducers({\n    userInfoReducer,\n    adminReducer,\n});\ncreatStore(rootReducer);`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、实现bindActionCreators方法</span>\n                </p>\n                <div className=\"article-desc\">\n                bindActionCreators这个方法，这是redux提供的一个辅助方法，能够让我们以方法的形式来调用action。同时，自动dispatch对应的action。它接收2个参数，第一个参数是接收一个action creator，第二个参数接收一个 dispatch 函数，由 Store 实例提供。<br/><br/>\n                <span className=\"mark\">不使用bindActionCreators方法：</span><br/><br/>\n                <Code code={`\n// TodoActions.js\n\nfunction add(text) {\n    return {\n        type: 'ADD',\n        text,\n    }\n}\n\nfunction remove(id) {\n    return {\n        type: 'REMOVE',\n        id,\n    }\n}\n\n//使用\nimport * as TodoActionCreators from './TodoActions';\n//生成action\nlet addReadAction = TodoActionCreators.add('看书');\n// 手动调用dispatch\ndispatch(addReadAction);\n\nlet removeEatAction = TodoActionCreators.remove('看书');\ndispatch(removeEatAction);\n`} /><br />\n                为了简化上述过程， 我们可以使用bindActionCreators方法。<br />\n                <Code code={`\nimport * as TodoActionCreators from './TodoActions';\n\nfunction bindActionCreators(actions, dispatch) {\n    let newActions = {};\n    for (let key in actions) {\n        newActions[key] = function() {\n            dispatch(actions[key].apply(null, arguments));\n        };\n    }\n    return newActions;\n}\n\nconst TodoAction = bindActionCreators(TodoActionCreators, store.dispatch);\nTodoAction.add('看书');\nTodoAction.remove('看书');\n`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">四、实现compose方法</span>\n                </p>\n                <div className=\"article-desc\">\n                compose这个方法，这是一个redux里的辅助方法，其作用是把一系列的函数，组装生成一个新的函数，并且从后到前依次执行，后面函数的执行结果作为前一个函数执行的参数。<br /><br />\n\n                示例：<br />\n                <Code code={`\nfunction add1(str) {\n    return str + 1\n}\n\nfunction add2(str) {\n    return str + 2\n}\n\nfunction add3(str) {\n    return str + 3\n}\n\ncompose(add3(add2(add1('abc')))); //'abc123'`} /><br />\n                    如果使用compose函数会简化上述操作：<br />\n                    <Code code={`\nfunction compose(...funs) {\n    return funs.reduce((preFn, curFn) => {\n        return (..args) {\n            preFn(curFn(...args));\n        }\n    })\n}\n\nconst composeFn = compose(add3, add2, add1);\ncomposeFn('abc'); //'abc123'`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">五、所有代码</span>\n                </p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction createStore(reducer) {\n    let state = null;\n    const events = [];\n    const getState = () => state;\n    const dispatch = (action) => {\n        reducer(state, action);\n        events.forEach(fn => fn());\n    }\n    const subscribe = (fn) => {\n        events.push(fn);\n        return function() {\n            events = events.filter(itemFn => itemFn !== fn);\n        }\n    }\n    dispatch({});\n    return {\n        getState,\n        dispatch,\n        subscribe,\n    }\n}\n\nfunction combineReducers(reducers) {\n    return (state, action) => {\n        let newState = {};\n        for (let key in reducers) {\n            newState[key] = reducers[key](state[key], action);\n        }\n        return newState;\n    }\n}\n\nfunction bindActionCreators(actionsFn, dispatch) {\n    let newActions = {};\n    for (let key in actionsFn) {\n        newActions[key] = (...args) => dispatch(actionsFn[key].apply(null, args));\n    }\n    return newActions;\n}\n\nfunction compose(...fns) {\n    return fns.reduce((preFn, curFn) => {\n        return (...args) => {\n            return preFn(curFn(...args));\n        }\n    })\n}\n`} />\n                </div>\n            </div>\n        )\n    }\n}","// https://kutlugsahin.github.io/smooth-dnd-demo/\n\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './index.scss';\nimport { Button } from 'antd';\n\nexport default class Note extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">一些好用的react代码库</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、可拖拽组件：react-smooth-dnd</span>\n                </p>\n                <div className=\"article-desc\">\n                    github: https://github.com/kutlugsahin/react-smooth-dnd<br />\n                    demo: https://kutlugsahin.github.io/smooth-dnd-demo/\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、SVG组件：vivus</span>\n                </p>\n                <div className=\"article-desc\">\n                    github: https://github.com/maxwellito/vivus<br />\n                    demo: http://maxwellito.github.io/vivus/\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class SetState extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0,\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            value: this.state.value + 1,\n        });\n        console.log('---componentDidMount---', this.state.value);\n        this.setState({\n            value: this.state.value + 2,\n        });\n        this.setState({\n            value: this.state.value + 3,\n        });\n        this.setState({\n            value: this.state.value + 4,\n        });\n\n        document.body.addEventListener('click', () => {\n            this.setState({\n                value: this.state.value + 1,\n            });\n            console.log('---addEventListener---', this.state.value);\n        }, false);\n\n        setTimeout(() => {\n            this.setState({\n                value: this.state.value + 1,\n            });\n            console.log('---setTimeout---', this.state.value);\n        }, 3000);\n\n        // setInterval(() => {\n        //     this.setState({\n        //         value: this.state.value + 1,\n        //     });\n        //     console.log('---setInterval---', this.state.value);\n        // }, 4000);\n    }\n\n    btnClick() {\n        this.setState({\n            value: this.state.value + 1,\n        });\n        console.log('---合成事件---', this.state.value);\n    }\n\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">setState</span></p>\n                <div className=\"article-desc\">\n                    1. setState只有在合成事件和钩子函数中是“异步”执行的；<br/><br/>\n                    2. setState在原生事件和setTimeout中是同步执行的；<br/><br/>\n                    3. setState的异步内部并不是由异步代码实现的，其实本身代码合执行的顺序都是同步的；只是因为合成事件和钩子函数的执行在更新之前，导致在合成事件和钩子函数中不能立即拿到更新后的值（可以通过setState的第二个参数callback获取最新值）。<br/><br/>\n                    <button onClick={() => this.btnClick()}>点我</button><br /><br />\n                \n                    <span className=\"mark\">为什么setTimeout中的setState是同步的？</span><br />\n                    这是由于setTimeout是异步代码，根据event loop，先会执行调用栈中同步代码，只到调用栈为空的时候，回去检查事件队列里有没有事件，如果有则拿出来执行。所以setTimeout中的setState是“同步”执行的。<br/><br/>\n                    react的事件机制：react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在jsx中常见的onClick、onChange这些都是合成事件。\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\nimport BaseNote from './base/index';\nimport LifeCycle from './lifeCycle/index';\nimport PerfState from './perf/index';\nimport SelfComp from './selfComp/index';\n\n\nimport PureFn from './special/pureFn';\nimport PureComp from './special/pureComp';\nimport HOC from './special/hoc';\nimport ControllComp from './special/controlled-comp';\nimport NoControllComp from './special/no-controlled-comp';\n\nimport Props from './communication/props';\nimport Context from './communication/context';\nimport ReduxComp from './communication/redux';\nimport PublishSubscribe from './communication/publishSubscribe';\nimport CustomRedux from './communication/custom-redux';\n\n\nimport Note from './note/index';\nimport SetState from './base/setState';\n\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'react',\n        prop: 'react-base',\n        children: [\n            {\n              label: 'setState',\n              prop: 'set-state',\n              comp: function() {\n                return <SetState />;\n              },\n            },\n        ]\n    },\n    {\n      label: 'react生命周期',\n      prop: 'react-lifeCycle',\n      children: [\n          {\n            label: '生命周期函数',\n            prop: 'lifeCycle',\n            comp: function() {\n              return <LifeCycle />;\n            },\n          },\n      ]\n    },\n    {\n      label: 'react性能优化',\n      prop: 'react-perf',\n      children: [\n          {\n            label: '性能优化',\n            prop: 'perf',\n            comp: () => <PerfState />,\n          },\n      ]\n    },\n    {\n      label: 'react通信方案',\n      prop: 'react-communication',\n      children: [\n          {\n            label: 'props',\n            prop: 'communication-props',\n            comp: () => <Props />,\n          },\n          {\n            label: 'context',\n            prop: 'communication-context',\n            comp: () => <Context />,\n          },\n          {\n            label: 'publish-subscribe',\n            prop: 'communication-publish-subscribe',\n            comp: () => <PublishSubscribe />,\n          },\n          {\n            label: 'redux',\n            prop: 'communication-redux',\n            comp: () => <ReduxComp />,\n          },\n          {\n            label: '实现redux核心',\n            prop: 'custom-redux',\n            comp: () => <CustomRedux />,\n          },\n      ]\n    },\n    {\n      label: 'react专业术语',\n      prop: 'react-special',\n      children: [\n          {\n            label: '纯函数',\n            prop: 'pure-fn',\n            comp: () => <PureFn />,\n          },\n          {\n            label: '纯组件',\n            prop: 'pure-comp',\n            comp: () => <PureComp />,\n          },\n          {\n            label: '高阶组件',\n            prop: 'hoc',\n            comp: () => <HOC />,\n          },\n          {\n            label: '受控组件',\n            prop: 'controll-comp',\n            comp: () => <ControllComp />,\n          },\n          {\n            label: '非受控组件',\n            prop: 'no-controll-comp',\n            comp: () => <NoControllComp />,\n          },\n      ]\n    },\n    {\n      label: '自定义组件',\n      prop: 'self-comp',\n      children: [\n          {\n            label: '预览大图',\n            prop: 'preview-imgs',\n            comp: () => <SelfComp />,\n          },\n      ]\n    },\n    {\n      label: '好用的react库',\n      prop: 'good-react',\n      children: [\n          {\n            label: '好用的react库',\n            prop: 'react-good-comp',\n            comp: () => <Note />,\n          },\n      ]\n    }\n\n];\n\nexport default function ReactIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\nimport './../../comp/common/style.css';\n\n\n\n\nexport default class ThisComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">javaScript中this解读</span>\n                </p>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">为什么使用this</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    this提供了一种更加优雅的方式来隐式“传递”一个对象的引用，因此可以将API设计的更加简洁并且易于复用。\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">this绑定</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    <span className=\"mark\">this是在运行时候进行绑定的，并不是在编写时绑定的，它的上下文取决于函数调用时的各种条件。</span>this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\n                    <br /><br />\n                    当一个函数被调用时，会创建一个活动记录（有时候会称为执行上下文）。<br />\n                    这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式，传入的参数等信息，this就是这个记录中的一个属性，会在函数执行的过程中用到。\n                </div>\n\n                <div>\n                    <p className=\"item-title\">\n                        <span className=\"textShadow\">调用位置</span>\n                    </p>\n\n                    <div className=\"article-desc\">\n                        <span className=\"mark\">调用位置就是函数在代码中被调用的位置（不是申明的位置）</span>\n                        <br /><br />\n                        寻找调用位置就是寻找“函数被调用的位置”，最重要的就是分析调用栈，我们关心的调用位置就是在当前正在执行的函数的前一个调用中。\n                    </div>\n                </div>\n                <Code code={`\nfunction a() {\n    //当前的调用栈是： a\n    //当前调用位置是全局作用域\n    console.log('---a---', this); //所以此时this为window\n    b(); // b的调用位置\n}\n\nfunction b() {\n    //当前的调用栈是：a --> b\n    //当前的调用位置是在a中\n    console.log('---b---', this); //所以此时this为window\n    c(); // c的调用位置\n}\n\nfunction c() {\n    //当前的调用栈是：a --> b --> c\n    //当前的调用位置是在b中\n    console.log('---c---', this); //所以此时this为window\n}\n\na(); //a的调用位置\n                `} />\n\n\n                <div>\n                    <p className=\"item-title\">\n                        <span className=\"textShadow\">this的绑定规则</span>\n                    </p>\n\n                    <p className=\"item-title\">\n                        <span className=\"textShadow\"><span className=\"mark\">1. 默认绑定</span></span>\n                    </p>\n\n                    <div className=\"article-desc\">\n                        最常用的函数调用类型：独立函数调用。可以把这条规则看作是无法应用其他规则时的默认规则。\n                    </div>\n                </div>\n                <Code code={`\nvar text = 'hello world';\nfunction a() {\n    console.log('---a---', this, this.text);\n    //this为window\n    //this.text: 'hello world'\n}\n\na();\n//在上面的代码中函数调用时应用了this的默认绑定，因此this会指向全局对象\n                `} />\n                <div className=\"article-desc\">\n                    分析上述代码：<br />\n                    函数a的调用位置：a是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定，无法使用其他的规则。\n                </div>\n\n                <div className=\"article-desc\">\n                    <span className=\"mark\">如果使用了严格模式，则不能将全局对象用于默认绑定，因此this会绑定到undefined。</span><br/>\n                    虽然this的绑定规则完全取决于调用位置，但是只有a()运行在非严格模式下，默认绑定才能绑定到全局对象上。\n                </div>\n                <Code code={`\nvar text = 'hello';\nfunction a() {\n    'use strict';\n    console.log('---a---', this, this.text);\n    //此时，this为undefined\n    //使用严格模式会影响this的绑定\n}\na(); //报错`} />\n               <div className=\"article-desc\">\n                    <span className=\"mark\">如果在严格模式下调用a方法，则不会影响this的默认绑定：</span><br/>\n                </div> \n                <Code code={`\nvar text = 'hello';\nfunction a() {\n    console.log('---a---', this, this.text);\n    //this为window\n    //this.text为hello，在严格模式下运行不会影响this的绑定\n}\n(function(){\n    \"use strict\";\n    a(); \n})()`}/>\n\n                    <p className=\"item-title\">\n                        <span className=\"textShadow\"><span className=\"mark\">2. 隐式绑定</span></span>\n                    </p>\n                    <div className=\"article-desc\">\n                        调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含。\n                    </div>\n                    <Code code={`\nvar text = 'hello';\nfunction a() {\n    console.log('---a---', this, this.text);\n}\nvar obj = {\n    text: 'world',\n    a: a,\n};\nobj.a(); //此时this指向obj，this.text为world\n`} />\n                <div className=\"article-desc\">\n                    上述代码中，a的调用位置会使用obj上下文来引用函数，因此可以说函数被调用的时候obj对象“拥有”或者“包含”函数的引用。\n                    <br /><br />\n                    函数a在被调用的时候，前面确实加上了对obj的引用。当函数引用有上下文对象时，隐式绑定规则会把函数调用中的this绑定到这个上下文对象上。\n                    <br /><br />\n                    <span className=\"mark\">\n                        对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。\n                    </span>\n                </div>\n                <Code code={`\nvar text = 'hello';\nfunction a() {\n    console.log('---a---', this, this.text);\n}\n\nvar obj1 = {\n    text: 'world',\n    b: {\n        text: '你好',\n        a: a\n    }\n};\n\nobj1.b.a();\n//this为obj1.b\n//this.text为'你好'\n//多层级的对象嵌套时只有当前的上面的一层起作用`} />\n\n                <div className=\"article-desc\">\n                    <span className=\"mark\">隐式绑定存在的问题：隐式丢失</span>\n                    <br /><br />\n                    在某些情况下，隐式绑定会出现丢失的情况，也就是说它会应用默认绑定，从而把this绑定到全局对象或者undefined上（取决于是否为严格模式）。\n                </div>\n                <Code code={`\nvar text = 'hello';\n\nfunction a() {\n    console.log('---a---', this, this.text);\n}\n\nvar obj = {\n    text: 'world',\n    a: a,\n}\n\nvar b = obj.a;\n\nb();\n//this为window\n//this.text为hello`} /> \n                <div className=\"article-desc\">\n                    虽然b是obj.a的一个引用，实际上，b引用的是a函数本身，因此此时的b()其实是一个不带任何修饰的函数调用，因此使用了默认绑定规则。                    \n                </div>\n                <div className=\"article-desc\">\n                    另外一种情况就是在传入回调函数的时候：\n                    <Code code={`\nvar text = 'hello';\nfunction a() {\n    console.log('---a---', this, this.text);\n}\n\nfunction doFn(fn) {\n    fn(); //调用位置\n}\n\nvar obj = {\n    text: 'world',\n    a: a,\n};\n\ndoFn(obj.a);\n//this 为window\n//this.text为world`} />\n                这是因为在doFn(obj.a)调用的时候obj.a其实就是一种隐式赋值，和上述例子一样。\n                </div>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\"><span className=\"mark\">3. 显式绑定</span></span>\n                </p>\n\n                <div className=\"article-desc\">\n                    通过使用call和apply来实现显式绑定。\n                    <Code code={`\nvar text = 'hello';\n\nfunction a() {\n    console.log('---a---', this, this.text);\n}\n\nvar obj = {\n    text: 'world',\n    a: a,\n}\n\nvar b = obj.a;\n\nb.call(obj);\n//this为obj\n//this.text为world `} />\n                </div>\n                \n                <p className=\"item-title\">\n                    <span className=\"textShadow\"><span className=\"mark\">4. new绑定</span></span>\n                </p>\n\n                <div className=\"article-desc\">\n                    在js中，构造函数只是一些使用new操作符被调用的函数。<br /><br />\n\n                    <span className=\"mark\">使用new时执行的操作：</span><br />\n                    1. 创建一个全新的对象；<br />\n                    2. 这个新对象会被执行[[Prototype]]连接；<br />\n                    3. 这个新对象会绑定到函数调用的this；<br />\n                    4. 如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。\n\n                </div>\n                <Code code={`\nfunction a(text) {\n    this.text = text;\n}\nvar bar = new a('hello');\n\nconsole.log(bar.text);\n//hello`} />\n            <div className=\"article-desc\">在使用new来调用a方法时，我们会构建一个新对象并把它绑定到a调用的this上。</div>\n            <div className=\"line\" />\n            <p className=\"item-title\">\n                <span className=\"textShadow\">规则的优先级</span>\n            </p>\n            <div className=\"article-desc\">\n                依次是new，显式绑定，隐式绑定，默认绑定\n            </div>\n\n            <p className=\"item-title\">\n                <span className=\"textShadow\">判断this</span>\n            </p>\n            <div className=\"article-desc\">\n                1. 函数是否在new中调用，如果是的话this绑定的是新创建的对象；<br />\n                2. 函数是否通过call、apply显式绑定，如果是的话this绑定的是指定的对象；<br />\n                3. 函数是否在某个上下文对象中调用（隐式绑定），如果是this绑定的是那个上下文对象；<br />\n                4. 如果以上3条都不符合的时候，使用默认绑定。如果在严格模式下就绑定到undefined上，否则绑定到全局对象。\n            </div>\n\n\n            <p className=\"item-title\">\n                <span className=\"textShadow\">绑定this的例外情况</span>\n            </p>\n            <div className=\"article-desc\">\n                1. 被忽略的this：\n                <Code code={`\nfunction foo() {\n    console.log(this.a);\n}\nvar a = 2;\nfoo.call(null); // 2\nfoo.call(undefined); //2`} />\n                如果把null，undefined作为this的绑定对象传入call，apply或者bind，这些值会在调用的时候忽略，实际应用是默认绑定规则。\n                <br />\n                <br />\n                2. 间接引用<br />\n                在间接引用时也会使用默认绑定规则， 间接引用最容易在赋值时发生：\n                <Code code={`\nfunction foo() {\n    console.log(this.a);\n}\nvar a = 2;\nvar o = {a: 3, foo: foo};\nvar p = {a: 4};\n\no.foo(); // 3, 隐式绑定\n(p.foo = o.foo)(); // 2\np.foo(); // 4`} />\n                p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo, 所以使用的是默认绑定。<br />\n                调用p.foo()时使用的是隐式绑定。\n            </div>\n\n            <p className=\"item-title\">\n                <span className=\"textShadow\">箭头函数的this</span>\n            </p>\n\n            <div className=\"article-desc\">\n                箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定this，具体来说，箭头函数会继承外层函数调用的this绑定。\n                <Code code={`\nvar a = 1;\nvar b = 2;\n\nvar c = function() {\n\tconsole.log('test-1:',this.a);\n\tconsole.log('test-2:', a);\n\tconsole.log('test-3:', this.b);\n\tconsole.log('test-4:', b);\n\tconsole.log('test-this-1:', this);\n\n\tvar a = 11;\n\tvar b = 22;\n\n\treturn () => {\n\t\tconsole.log('test-5:', this.a);\n\t\tconsole.log('test-6:', a);\n\t\tconsole.log('test-7:', this.b);\n\t\tconsole.log('test-8:', b);\n\t\tconsole.log('test-this-2:', this);\n\t}\n}\n\nvar d = c();\nd();\n`} />\n                <br />上述代码执行的时候没有对c方法进行this的绑定（显式， 隐式，new），所以会进行默认绑定，this为window。\n                <br />输出的结果为：<br />\n                <Code code={`\n// test-1: 1 ==> this进行了默认绑定，this为window\n// test-2: undefined ==> c函数里的a进行了变量提升，赋值为undefined\n// test-3: 2 ==> this进行了默认绑定，this为window\n// test-4: undefined  ==> c函数里的a进行了变量提升，赋值为undefined\n// test-this-1: window ==> this进行了默认绑定，this为window\n\n//箭头函数执行结果\n\n// test-5: 1 ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为window\n// test-6: 11 ==> 根据作用域链向上查找，箭头函数中没有变量a, 向上一级查找\n// test-7: 2 ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为window\n// test-8: 22 ==> 根据作用域链向上查找，箭头函数中没有变量b, 向上一级查找\n// test-this-2: window ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为window`} />\n\n            <br /><br/>\n            如果调用方式换为如下：\n            <Code code={`\nvar d = c();\nvar obj = {\n    a: 'aaa',\n    b: 'bbb',\n    d: d,\n};\nobj.d();`} />\n            在调用c方法的时候也是进行了this的默认绑定，所以this为window，结果和上面的一致。\n            箭头函数中的this也是为window，因此当前词法作用域的this为window。<br /><br/>\n            如果调用方式换为如下：\n            <Code code={`\nvar d = c();\nvar obj = {\n    a: 'aaa',\n    b: 'bbb',\n    d: function() {\n        d();\n    },\n};\nobj.d();`} />输出结果和上面一致。\n                <br /><br/>\n                如果调用方式换为如下：\n                <Code code={`\nvar obj = {\n    a: 'aaa',\n    b: 'bbb',\n    c: c,\n};\nvar d = obj.c();\nd();\nd.call(null);`} />\n                此时在调用c方法的时候进行了this的隐式绑定，因此this指向obj。箭头函数的this也会指向obj。\n                输出的结果为：\n                <Code code={`\n// test-1: aaa ==> this进行了隐式绑定，this为obj\n// test-2: undefined ==> c函数里的a进行了变量提升，赋值为undefined\n// test-3: bbb ==> this进行了隐式绑定，this为obj\n// test-4: undefined  ==> c函数里的a进行了变量提升，赋值为undefined\n// test-this-1: obj ==> this进行了默认绑定，this为obj\n\n//箭头函数执行结果\n\n// test-5: aaa ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为obj\n// test-6: 11 ==> 根据作用域链向上查找，箭头函数中没有变量a, 向上一级查找\n// test-7: bbb ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为obj\n// test-8: 22 ==> 根据作用域链向上查找，箭头函数中没有变量b, 向上一级查找\n// test-this-2: obj ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为obj`} />\n                <br />\n                上述代码中使用d.call(null)来视图修改this，但是箭头函数是不绑定this的，所以此操作是无效的。\n                <br /><br/>\n                参考资料：《你不知道的JavaScript-上卷》\n            </div>\n\n                <div className=\"article-desc\">\n                    以下方法调用后，分别输出什么？<br />\n                    <Code code={`\n// 方法一\nfunction Foo() { \n    console.log(1);\n    return this;\n}\n// 方法二\nFoo.getName = function() {\n    console.log(2);\n    return this;\n}\n// 方法三\nvar getName = function() {\n    console.log(3);\n}\n// 方法四\nfunction getName() {\n    console.log(4);\n}\n\nFoo.getName(); // 2, this = Foo\ngetName(); // 3\nFoo().getName(); // 1 this = window  3\ngetName(); // 3\nnew Foo.getName(); // 2 this为Foo.getName示例\nFoo.getName().getName(); // 2 this = Foo 2\n`} ></Code>\n                    分别输出的结果是：<br />\n                    Foo.getName() : 调用方法二，输入2， 此时this为Foo对象，因为this进行了显式绑定<br /><br />\n                    getName(): 调用方法三，首先因为进行了函数申明提升（优先级高），后面方法三getName又进行了变量提升，导致getName被方法三覆盖， 所以输出3<br /><br />\n                    Foo().getName()： 首先执行方法一Foo(), 输出1， 返回的this为window， 所以在调用window.getName(),即调用方法三，输出3<br /><br />\n                    getName(): 调用方法三，首先因为进行了函数申明提升（优先级高），后面方法三getName又进行了变量提升，导致getName被方法三覆盖， 所以输出3<br /><br />\n                    new Foo.getName(): 调用方法二，输出2， 返回的this为Foo.getName的实例<br /><br />\n                    Foo.getName().getName()：首先调用方法二，输出2， 返回的this为Foo，所以再次调用Foo.getName()输出2<br /><br />\n                </div>\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\n\n\n\nexport default class BlockScope extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">块级作用域解析</span>\n                </p>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">javaScript中的块作用域</span>\n                </p>\n                <div className=\"article-desc\">\n                    具有块作用域的代码块、属性有：<br />\n                    1. with<br />\n                    2. try/catch语句<br />\n                    3. let<br />\n                    4. const<br />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、with</span>\n                </p>\n                <div className=\"article-desc\">\n                    用with从对象中创建出来的作用域仅仅在with声明中有效：<br />\n                    <Code code={`\nwith(window.location) {\n    console.log(href);\n    console.log(host);\n    console.log(origin);\n}\nconsole.log(href); //报错`} />\n                    在with作用域的外部是访问不到with内部的变量\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、try/catch</span>\n                </p>\n                <div className=\"article-desc\">\n                    在try/catch语句中的catch分句会创建一个块作用域，其中声明的变量只能在catch内部有效。\n                    <br /><br />\n                    <Code code={`\ntry {\n    undefined(); //执行一个非法操作来强制制造一个异常\n} catch (err) {\n    console.log(err);\n}\nconsole.log(err); //报错`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、let</span>\n                </p>\n                <div className=\"article-desc\">\n                    let关键字可以将变量绑定到所在的任意作用域中。换句话说就是，let为其声明的变量隐式的劫持了所在的快作用域。\n                    用let将变量加在一个已经存在的块作用域上的行为是隐式的。\n                    <br /><br />\n                    使用let进行的声明不会在块级作用域中进行提升。声明的代码被运行之前，声明并不“存在”。\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">四、const</span>\n                </p>\n                <div className=\"article-desc\">\n                    在es6中除了let外，还引入了const，同样可以用来创建块作用域变量，但是用const声明的变量的值是一个常量。\n                    声明之后任何试图修改值的操作都会引起错误。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ObjShili extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">对象实例化过程及方法</span></p>\n                <div className=\"article-desc\">\n                    对象的实例化方法主要有：<br />\n                        <span className=\"text-placeholder\"></span>工厂模式<br />\n                        <span className=\"text-placeholder\"></span>构造函数模式<br />\n                        <span className=\"text-placeholder\"></span>原型链模式<br />\n                        <span className=\"text-placeholder\"></span>构造函数模式和原型链模式结合--混合模式<br />\n\n                </div>\n                <p className=\"item-title\"><span className=\"textShadow\">一、工厂模式</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction obj1(name,age) {\n    let obj = {};\n    obj.name = name;\n    obj.age = age;\n    obj.sayName = function() {\n        return obj.name;\n    }\n    return obj;\n}\nvar person1 = obj1('xixi', 18);\n`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、构造函数模式</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction obj2(name, age) {\n    this.name = name;\n    this.age = age;\n    this.sayName = function() {\n        return name;\n    }\n}\nvar person2 = new obj2('xixi', 18);\n`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、原型链模式</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction obj3() {}\n\nobj3.prototype.name = 'xixi';\nobj3.prototype.age = 18;\nobj3.prototype.sayName = function() {\n    return this.name;\n}\n\nvar person3 = new obj3();\n`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、混合模式</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction obj4(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nobj4.prototype.sayName = function() {\n    return this.name;\n}\n\nvar person4 = new obj4('xixi', 18);`} />\n                </div>\n                \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ObjExtend extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">对象继承方法</span></p>\n                <div className=\"article-desc\">\n                    对象的实例化方法主要有：<br />\n                        <span className=\"text-placeholder\"></span>原型继承<br />\n                        <span className=\"text-placeholder\"></span>构造函数继承<br />\n                        <span className=\"text-placeholder\"></span>组合式继承（原型继承 + 构造函数继承）<br />\n                        <span className=\"text-placeholder\"></span>寄生式组合继承<br />\n                        参考文章： https://juejin.im/post/5e8b261ae51d4546c0382ab4\n                        \n                </div>\n                <p className=\"item-title\"><span className=\"textShadow\">一、原型继承</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n// 父类\nfunction Person() {\n    this.name = ['xixi'];\n}\nPerson.prototype.getName = function() {\n    return this.name;\n}\n// 子类\nfunction Child() {}\n// 子类通过原型继承父类\nChild.prototype = new Person();\nChild.prototype.constructor = Child;\n// 实例化子类1\nvar child1 = new Child();\nchild1.name; // ['xixi'];\nchild1.getName(); //['xixi'];\n\n// 实例化子类2\nvar child2 = new Child();\nchild2.name; // ['xixi'];\nchild2.getName(); //['xixi'];\n//修改属性\nchild1.name[0] = 'xiaoming';\n// 会影响其他子类的属性\nchild2.name; // ['xiaoming'];\n`} /><br /><br />\n                    <span className=\"mark\">原型继承缺点：</span><br />\n                    <span className=\"text-placeholder\"></span>1. 某个实例修改父类中的引用类型的属性后会影响到其他的所有的子类<br /><br />\n                    <span className=\"text-placeholder\"></span>2. 无法向父类传参\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、构造函数继承</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction Parent(name) {\n    this.name = name;\n}\nParent.prototype.age = 18;\nParent.prototype.getName = function() {\n    return this.name;\n}\n// 子类\nfunction Child(name) {\n    //使用父类的构造函数实现继承\n    Parent.call(this, name);\n}\n\nvar child1 = new Child('xixi');\nchild1.name; //xixi\nchild1.age; //undefined\nchild1.getName(); // 报错\n\n`} /><br /><br />\n                    <span className=\"mark\">构造函数继承的缺点：</span><br />\n                    <span className=\"text-placeholder\"></span>1. 子类无法继承父类原型链上的属性和方法<br /><br />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、组合式继承</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction Parent(name) {\n    this.name = name;\n}\nParent.prototype.age = 18;\nParent.prototype.getName = function() {\n    return this.name;\n}\n\n//子类\nfunction Child(name) {\n    //使用父类的构造函数继承\n    Parent.call(this, name);\n}\n// 使用父类的原型继承\nChild.prototype = new Parent();\n\nvar child1 = new Child('xixi');\nchild1.name; //xixi\nchild1.age; //18\nchild1.getName(); //xixi\n`} /><br /><br />\n                    <span className=\"mark\">组合式继承的缺点：</span><br />\n                    <span className=\"text-placeholder\"></span>1. 每次创建子类实例的时候都执行了两次构造函数（new Parent() 和 Parent.call()）,这并不影响父类的继承，但是子类创建实例时，原型中会保存两份一样的属性和方法，这不是很优雅<br /><br />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、寄生式组合继承</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction Parent(name) {\n    this.name = name;\n}\nParent.prototype.getName = function() {\n    return this.name;\n}\nfunction Child(name) {\n    Parent.call(this, name);\n}\n\n//但这种方式存在一个问题，由于子类原型和父类原型指向同一个对象，\n//我们对子类原型的操作会影响到父类原型，例如给Child.prototype增加一个getName()方法，\n//那么会导致Parent.prototype也增加或被覆盖一个getName()方法，为了解决这个问题，\n//我们给Parent.prototype做一个浅拷贝\n\n// Child.prototype = Parent.prototype;\n\n//做浅拷贝\nChild.prototype = Object.create(Parent.prototype);\n\nChild.prototype.constructor = Child;\n\nvar child = new Child('xiaoming');\n\nchild.name; //'xiaoming'\nchild.getName(); //'xiaoming'\n\n`} />\n                </div>\n                \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class EventLoop extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">event Loop</span></p>\n                <div className=\"article-desc\">\n                    参考文档： https://juejin.im/post/5b63b4cb6fb9a04fb4017f5a<br />\n                    http://www.ruanyifeng.com/blog/2014/10/event-loop.html<br />\n                    https://juejin.im/post/59e85eebf265da430d571f89\n                </div>\n                <div className=\"article-desc\">\n                    <Code code={`\nconsole.log('start')\nnew Promise((resolve, reject) => {\n  console.log('promise3')\n    setTimeout(() => {\n        resolve('111')\n        resolve('222')\n        reject()\n    }, 1000)\n})\n.then((data1) => {\n    console.log('res1', data1)\n}, (data2) => {\n    console.log('res2', data2)\n})\n.then((data3) => {\n    console.log('re3', data3)\n})\nconsole.log('end')\n\n// 输出结果依次是\nstart\n\npromise3\n\nend\n\nres1  111\n\nres2 这个不会执行\n\nres3 undefined`} />\n                    promise中有多个resolve（reject）方法的时候，只执行第一个，因为执行第一个后状态已经发生改变了（状态凝固），所以后面的resolve（reject）都不会执行，也不会被覆盖。\n                </div>\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class CopyMode extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">浅拷贝 & 深拷贝</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、浅拷贝</span>\n                </p>\n                <div className=\"article-desc\">\n                    实现浅拷贝的方法🤔<br />\n                    1. 使用for...in循环<br />\n                    2. 使用Object.assign<br />\n                    3. 直接使用=赋值<br />\n                </div>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">1. 使用for...in循环</span><br />\n                    <Code code={`\n// 只复制第一层的浅拷贝\nfunction copy(obj1) {\n    var obj2 = Array.isArray(obj1) ? [] : {};\n    for (let key in obj1) {\n        obj2[key] = obj1[key];\n    }\n    return obj2;\n}\nvar obj1 = {\n    a: 1,\n    b: {\n        c: 2\n    }\n}\nvar obj2 = copy(obj1);\nobj2.a = 3;\nobj1.a; // 3\n\nobj2.b.c = 4;\nobj1.b.c; //4\n`} /><br /><br />\n                    <span className=\"mark\">2. 使用Object.assign</span><br />\n                    <Code code={`\nconst obj1 = {a: {b: 1},c: 2};\nconst obj2 = Object.assign({}, obj1);\n\nobj1.a.b = 2;\nobj2.a.b; // 2\n\nobj1.c = 888;\nobj2.c; // 2\n`} /><br /><br />\n                    <span className=\"mark\">3.直接使用=赋值</span><br />\n                    <Code code={`\nconst obj1 = {a: {b: 1},c: 2};\nconst obj2 = obj1;\n\nobj1.c = 333;\nobj2.c; //333\n\nobj1.a.b = 444;\nobj2.a.b; //444\n`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、深拷贝</span>\n                </p>\n                <div className=\"article-desc\">\n                    实现深拷贝的方法🤔<br />\n                    1. 使用循环+递归<br />\n                    2. 使用JSON方法<br />\n                    3. 使用Reflect法<br />\n                    4. 数组使用slice和concat<br />\n                </div>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">1. 使用循环+递归</span><br />\n                    <Code code={`\nfunction deepCopy(obj) {\n    let newObj = Array.isArray(obj) ? [] : {};\n    if (obj && typeof obj === 'object') {\n        for (let key in obj) {\n            if (Object.hasOwnProperty(key)) {\n                if (obj[key] && typeof obj[key] === 'object') {\n                    deepCopy(obj[key]);\n                } else {\n                    newObj[key] = obj[key];\n                }\n            }\n        }\n    }\n    return newObj;\n}`} /><br /><br />\n                    <span className=\"mark\">2. 使用JSON方法</span><br />\n                    使用JSON.stringify的缺点是：对象中的属性值为undefined和方法的属性会丢失。<br />\n                    <Code code={`\nfunction deepCopy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nvar obj = {\n    a: 1,\n    b: null,\n    c: undefined,\n    d: function() {\n        console.log(1111);\n    }\n}\nvar obj1 = deepCopy(obj);\nobj1 = {\n    a: 1,\n    b: null\n}\n`} /><br /><br />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\n\n\n\nexport default class EventEmitterFn extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">自定义--发布订阅模式</span>\n                </p>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">代码</span>\n                </p>\n\n                <Code code={`\n/**\n * 实现一个简单版的发布订阅模式的emit\n */\n\nclass EventEmitter {\n    constructor() {\n        this.events = {};\n    }\n    //订阅事件\n    //绑定事件，可以绑定多个同类型的事件，用数组保存cb，按照绑定的先后顺序依次执行\n    on(type, cb) {\n        if (!this.events[type]) {\n            this.events[type] = [cb];\n        } else {\n            this.events[type].push(cb);\n        }\n    }\n    //解除订阅\n    //解绑事件\n    off(type, cb) {\n        if (!this.events[type]) {\n            return;\n        }\n        this.events[type] = this.events[type].filter(item => {\n            return item !== cb;\n        });\n    }\n\n    //单次订阅\n    //绑定单次事件\n    one(type, cb) {\n        function fn() {\n            cb && cb();\n            this.off(type, fn);\n        }\n        this.on(type, fn);\n    }\n\n    //发布\n    //触发事件\n    emit(type, ...params) {\n        this.events[type] && this.events[type].map(fn => fn.apply(this, params));\n    }\n}\n\nexport default EventEmitter;\n                `} />\n            </div>\n        )\n    }\n}","/**\n * 实现图片点亮功能\n * 模拟：https://mp.weixin.qq.com/s/jkUmXL7RYCgN_LLrDJgwcg\n */\n\nexport default class LightImage {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        //设置样式\n        const style = document.createElement('style');\n        style.type = 'text/css';\n        const gray_css = 'img.img-gray{filter: grayscale(1);}';\n        const light_css = `img.img-light{animation-duration: 2.6s;animation-fill-mode: both;animation-name: imageLight;}`;\n        const animation = `@keyframes imageLight {from {filter: grayscale(1);}to {filter: grayscale(0);}}`;  \n        style.innerText = gray_css + light_css + animation;\n        document.getElementsByTagName('head')[0].appendChild(style);\n        \n        const allImages = document.querySelectorAll('img');\n        if (allImages) {\n            const allImagesList = Array.prototype.slice.call(allImages);\n            if (allImagesList && allImagesList.length > 0) {\n                allImagesList.map(item => {\n                    //设置成灰色\n                    item.classList.add('img-gray');\n\n                    //点击变亮\n                    item.addEventListener('click', function(e) {\n                        if (e.target.nodeName === 'IMG') {\n                            e.target.classList.remove('img-gray');\n                            e.target.classList.add('img-light');\n                        }\n                    }, false);\n                });\n            }\n        }\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\nimport LightImage from './../../../component/LightImage';\n\n\nexport default class LightImageFn extends Component {\n    constructor(props) {\n        super(props);\n       \n    }\n\n    componentDidMount() {\n        new LightImage();\n    }\n\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">点亮图片</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    点击图片, 将会点亮图片<br />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939135&di=cb3dee315e0f312aab4e2fae136abca5&imgtype=0&src=http%3A%2F%2Fp0.ifengimg.com%2Fpmop%2F2018%2F0809%2FD5AD6058C6F7F813F01E0AF06364286B93F53E27_size21_w600_h399.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939136&di=84d3db1eaf300c7da975f9b77c4aeed7&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161019%2F38dae34b3f264fd39ce0de0d9ae613b7_th.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939134&di=7e4cb10cf71cd9fc5653d21ada0824db&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201403%2F20%2F20140320235526_QWwya.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939134&di=2eb3ae79c4e7d3fe858173d0e9d346cb&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201612%2F05%2F20161205101430_QjPwv.thumb.700_0.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594202302213&di=9b7676b88364df814275b304690a3f4d&imgtype=0&src=http%3A%2F%2Fimg.pconline.com.cn%2Fimages%2Fupload%2Fupc%2Ftx%2Fitbbs%2F1901%2F05%2Fc1%2F126971444_1546641805999_mthumb.jpg\" />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">代码</span>\n                </p>\n\n                <Code code={`\n/**\n * 实现图片点亮功能\n * 模拟：https://mp.weixin.qq.com/s/jkUmXL7RYCgN_LLrDJgwcg\n */\n\nclass LightImage {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        //设置样式\n        const style = document.createElement('style');\n        style.type = 'text/css';\n        const gray_css = 'img.img-gray{filter: grayscale(1);}';\n        const light_css = 'img.img-light{animation-duration: 2.6s;animation-fill-mode: both;animation-name: imageLight;}';\n        const animation = '@keyframes imageLight {from {filter: grayscale(1);}to {filter: grayscale(0);}}';  \n        style.innerText = gray_css + light_css + animation;\n        document.getElementsByTagName('head')[0].appendChild(style);\n        \n        const allImages = document.querySelectorAll('img');\n        if (allImages) {\n            const allImagesList = Array.prototype.slice.call(allImages);\n            if (allImagesList && allImagesList.length > 0) {\n                allImagesList.map(item => {\n                    //设置成灰色\n                    item.classList.add('img-gray');\n\n                    //点击变亮\n                    item.addEventListener('click', function(e) {\n                        if (e.target.nodeName === 'IMG') {\n                            e.target.classList.remove('img-gray');\n                            e.target.classList.add('img-light');\n                        }\n                    }, false);\n                });\n            }\n        }\n    }\n}\n                `} />\n            </div>\n        )\n    }\n}","// https://www.imooc.com/article/277705?block_id=tuijian_wz\n\n\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Memoization extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">js中的memoization技术</span>\n                </p>\n                <div className=\"article-desc\">\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MySymbol extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">Symbol</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、Symbol要解决的问题</span>\n                </p>\n                <div className=\"article-desc\">\n                    ES5 的对象属性名都是字符串，这容易造成属性名的冲突。Symbol就是这样一种机制，能保证每个属性的名字都是独一无二的，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。<br /><br />\n                    <span className=\"mark\">ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</span>\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、生成Symbol</span>\n                </p>\n                <div className=\"article-desc\">\n                    Symbol 值通过Symbol函数生成。<br />\n                    <Code code={`\nconst s = Symbol();\ntypeof s; // 'symbol'`} /><br />\n                    <span className=\"mark\">\n                    注意，Symbol函数前不能使用new命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。\n                    </span><br /><br />\n                    Symbol可以接受一个字符串类型的值作为入参，用来描述生成的Symbol实例，主要是为了在控制台或者转为字符串时好区分。<br />\n                    <Code code={`\nconst s1 = Symbol('hello');\nconst s2 = Symbol('world');\n\nconsole.log(s1); // Symbol('hello')\nconsole.log(s2); // Symbol('world')\n\ns1.toString(); //\"Symbol('hello')\"\ns2.toString(); //\"Symbol('world')\"`} /><br />\n                    如果Symbol的入参是一个对象，就会调用该对象的toString方法，将toString的返回值转为字符串作为Symbol的入参，然后生成一个Symbol值。<br />\n                    <Code code={`\nvar obj = {\n    toString() {\n        return 'abc';\n    }\n}\nconst s1 = Symbol(obj);\nconsole.log(s1); // Symbol('abc')`} /><br />\n\n                    使用Symbol的一些注意事项：<br />\n                    <span className=\"text-placeholder\" />1. 两个没有入参的Symbol生成的实例不想等；<br />\n                    <span className=\"text-placeholder\" />2. 两个有相同入参的Symbol生成的实例不想等；<br />\n                    <span className=\"text-placeholder\" />3. Symbol生成的实例不能与其他类型进行运算，否则会报错；<br />\n                    <span className=\"text-placeholder\" />4. Symbol生成的实例可以显式的转成字符串，通过调用：toString；<br />\n                    <span className=\"text-placeholder\" />5. Symbol生成的实例可以转为布尔值。<br />\n                    <Code code={`\nconst s1 = Symbol();\nconst s2 = Symbol();\n\ns1 === s2; // false\n\nconst s3 = Symbol('aaa');\nconst s4 = Symbol('bbb');\n\ns3 === s4 // false\n\ns1 + 'hello' + s2; //报错\ns1.toString(); // 'Symbol()'\nBoolean(s1); //true`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、Symbol.prototype.description</span>\n                </p>\n                <div className=\"article-desc\">\n                    在创建Symbol的时候可以添加一个描述，这个属性可以通过实例的description属性来获取：\n                    <br />\n                    <Code code={`\nconst s1 = Symbol('hello');\ns1.description; // 'hello'`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">四、作为属性名的Symbol</span>\n                </p>\n                <div className=\"article-desc\">\n                    由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。<br />\n                    这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。<br /><br />\n                    <span className=\"mark\">注意，Symbol 值作为对象属性名时，不能用点运算符。</span><br />\n                    原因是： 因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个 Symbol 值。<br />\n                    <Code code={`\nconst s1 = Symbol('ss');\nvar obj = {\n    [s1]: 'sss',\n};\nobj[s1]; // 'sss'`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">五、属性名的遍历</span>\n                </p>\n                <div className=\"article-desc\">\n                    Symbol 作为属性名，遍历对象的时候，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。<br />\n                    但是，它也不是私有属性，有一个Object.getOwnPropertySymbols()方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。<br />\n                    <Code code={`\nconst a = Symbol('a');\nconst b = Symbol('b');\n\nvar obj = {};\nobj[a] = 'hello';\nobj[b] = 'wrold';\n\nconst symbolKeys = Object.getOwnPropertySymbols(obj);\nconsole.log(symbolKeys); // [Symbol('a'), Symbol('b')]`} /><br />\n                    作用： 由于以 Symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。<br /><br />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">六、Symbol.for()，Symbol.keyFor()</span>\n                </p>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">1. Symbol.for()</span><br/><br/>\n                    我们希望重新使用同一个 Symbol 值，Symbol.for()方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值，并将其注册到全局。<br /><br />\n                    <Code code={`\nlet s1 = Symbol.for('aaa');\nlet s2 = Symbol.for('aaa');\n\ns1 === s2; // true\n\nlet s3 = Symbol('aaa');\nlet s4 = Symbol('aaa');\n\ns3 === s4; // false`} /><br/>\n                    Symbol.for()与Symbol()这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(\"cat\")30 次，每次都会返回同一个 Symbol 值，但是调用Symbol(\"cat\")30 次，会返回 30 个不同的 Symbol 值。\n                    <br/><br/>\n                    <span className=\"mark\">2. Symbol.keyFor()</span><br/><br/>\n                    Symbol.keyFor()方法返回一个已登记的 Symbol 类型值的key。<br/>\n                    <Code code={`\nlet s1 = Symbol.for('aaa');\nSymbol.keyFor(s1); // 'aaa'\n\nlet s2 = Symbol('bbb');\nSymbol.keyFor(s2); // undefined`} /><br />\n                    <span className=\"mark\">注意，Symbol.for()为 Symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。</span>\n                </div>\n\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class MatchMedia extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">window.matchMeida</span>\n                </p>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">window.matchMeida</span>\n                </p>\n                <div className=\"article-desc\">\n                    MDN文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia\" target=\"_blank\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia</a><br />\n                    菜鸟文档：<a href=\"https://www.runoob.com/jsref/met-win-matchmedia.html\" target=\"_blank\">https://www.runoob.com/jsref/met-win-matchmedia.html</a>\n                    实例代码：<br /><br />\n                    <Code code={`\nconst checkMediaQuery = () => {\n    const type = window.matchMedia(\"(min-width: 1025px)\").matches ? 'desktop' : 'mobile';\n    console.log('---type---', type);\n};\n\nwindow.addEventListener('resize', checkMediaQuery);`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class AboutQueue extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现一个类：链式调用，执行事件，流程控制</span></p>\n                <div className=\"article-desc\">\n                    问题描述： 设计一个类，实现以下能力：<br />\n                    <Code code={`\nnew Queue('start the queue').task('a').restFirst(1).rest(3).task('b'); \n\n// 立即输出：start the queue\n// 1秒后输出： do a\n// 3秒后输入： do b`}/>\n                \n                <Code code={`\nfunction Queue(str) {\n    console.log(str);\n    this.eventQueue = [];\n    this.valueQueue = [];\n}\n\nQueue.prototype.getItem = function(type) {\n    if (type === 'event') {\n        return this.eventQueue.shift();\n    } else {\n        return this.valueQueue.shift();\n    }\n}\n\nQueue.prototype.push = function(value, type) {\n    if (type === 'event') {\n        this.eventQueue.push(value);\n    } else {\n        this.valueQueue.push(value);\n    }\n}\n\nQueue.prototype.task = function(value) {\n    if (this.valueQueue.indexOf(value) == -1) {\n        this.push(value, 'value');\n    }\n    const fn = this.getItem('event');\n    fn && typeof fn === 'function' && fn(value);\n    return this;\n}\n\nQueue.prototype.rest = function(time) {\n    const fn = (value) => {\n        setTimeout(() => {\n            console.log('do ' + value);\n        }, time * 1000);\n    };\n    this.push(fn, 'event');\n    return this;\n}\n\nQueue.prototype.restFirst = function(time) {\n    const fn = (value) => {\n        setTimeout(() => {\n            console.log('do ' + value);\n        }, time * 1000);\n    };\n    this.push(fn, 'event');\n    this.task(this.getItem('value'));\n    return this;\n}`} />\n            </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class AboutTree extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">判断一棵树是否对称</span></p>\n                <div className=\"article-desc\">\n                    先实现一个二叉查找树，然后进行判断是否为对称树。<br />\n                    <Code code={`\nfunction Node(data, left, right) {\n    this.data = data;\n    this.left = left;\n    this.right = right;\n}\n\n/**\n * 二叉树： 每个节点的子节点不允许超过两个\n * 二叉查找树：是一种特殊的二叉树，相对较小的值保存在左节点中，较大的值保存在右节点中\n */\nfunction BST() {\n    this.root = null;\n    this.insert = insert;\n    this.isSymmetry = isSymmetry;\n    this.inOrder = inOrder;\n    this.preOrder = preOrder;\n    this.postOrder = postOrder;\n    this.getMin = getMin;\n    this.getMax = getMax;\n    this.find = find;\n}\n\nfunction insert(data) {\n    var node = new Node(data, null, null);\n    if (this.root === null) {\n        this.root = node;\n    } else {\n        var current = this.root;\n        var parent = null;\n        while(true) {\n            parent = current;\n            if (data < current.data) {\n                current = current.left;\n                if (current == null) {\n                    parent.left = node;\n                    break;\n                }\n            } else {\n                current = current.right;\n                if (current == null) {\n                    parent.right = node;\n                    break;\n                }\n            }\n        }\n    }\n}\n\nfunction isSymmetry() {\n    var root = this.root;\n    if (root == null) {\n        return true;\n    }\n    return compare(root.left, root.right);\n}\n\nfunction compare(left,right) {\n    if (left == null && right == null) {\n        return true;\n    }\n    if (left == null || right == null) {\n        return false;\n    }\n    if (left.data !== right.data) {\n        return false;\n    }\n    return compare(left.left, left.right) && compare(right.left, right.right);\n}\n// 中序遍历\n// 左子树 ---> 根节点 ---> 右子树\n\nfunction inOrder(node) {\n    if (node != null) {\n        inOrder(node.left);\n        console.log(node);\n        inOrder(node.right);\n    }\n}\n\n// 前序遍历\n// 根节点 ---> 左子树 ---> 右子树\nfunction preOrder(node) {\n    if (node != null) {\n        console.log(node);\n        preOrder(node.left);\n        preOrder(node.right);\n    }\n}\n\n// 后序遍历\n// 左子树 ---> 右子树 ---> 根节点\nfunction postOrder(node) {\n    if (node != null) {\n        postOrder(node.left);\n        postOrder(node.right);\n        console.log(node);\n    }\n}\n\n\n// 获取最小值\n// 最小值总是在左子节点上，只需要遍历左子树，直到找到最后一个节点\n\nfunction getMin() {\n    var currentRoot = this.root;\n    while(currentRoot.left != null) {\n        currentRoot = currentRoot.left;\n    }\n    return currentRoot.data;\n}\n\n// 获取最大值\n// 最大值总是在右子节点上，只需要遍历右子树，直到找到最后一个节点\nfunction getMax() {\n    var currentRoot = this.root;\n    while(currentRoot.right != null) {\n        currentRoot = currentRoot.right;\n    }\n    return currentRoot.data;\n}\n\n// 查找指定的值\n// 需要比较该值和当前节点的值的大小，小于则遍历左子树，大于则遍历右子树\nfunction find(data) {\n    var currentRoot = this.root;\n    while(currentRoot != null) {\n        if (currentRoot.data == data) {\n            return currentRoot;\n        } else if (currentRoot.data > data) {\n            currentRoot = currentRoot.left;\n        } else {\n            currentRoot = currentRoot.right;\n        }\n    }\n    return null;\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Myfetch extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现一个带并发数限制的fetch请求函数</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction myFetch(urls, max, callback) {\n    let pending_count = 0;\n    const allUrls = [...ulrs];\n    \n    async function _fetch(url) {\n        if (!url) {\n            return;\n        }\n        pending_count++;\n        await fetch(url);\n        pending_count--;\n        _fetch(allUrls.shift());\n        if (!pending_count) {\n            callback && callback();\n        }\n    }\n    while(pending_count < max) {\n        _fetch(allUrls.shift());\n    }\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyMap extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现Map</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nArray.prototype.myMap = function(fn, context) {\n\tvar arr = this;\n\tcontext = context || window;\n\tvar result = [];\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tresult.push(fn.call(context, arr[i], i, arr));\n\t}\n\treturn result;\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyMap extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现forEach</span></p>\n                <div className=\"article-desc\">\n                    forEach没有返回值<br />\n                    <Code code={`\nArray.prototype.myForEach = function(fn, context) {\n\tvar arr = this;\n\tcontext = context || window;\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tfn.call(context, arr[i], i, arr);\n\t}\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyNew extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现new</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n/*\n* 实现思路\n*\t1. 创建新对象并继承原型\n*\t2. 执行构造函数并绑定this\n*\t3. 返回新对象\n*/\n\nfunction myNew() {\n\t//获取构造函数\n\tconst Func = Array.from(arguments).shift();\n\t//创建一个新对象，并继承原型\n\tconst obj = Object.create(Func.prototype);\n\t//执行构造函数，并将this指向新建的对象\n\tconst result = Func.apply(obj, Array.from(arguments).slice(1));\n\t//构造函数的执行结果如果为对象就直接返回该对象\n\tif (result instanceof Object) {\n\t\treturn result;\n\t}\n\t//否则返回空对象\n\treturn {};\n}\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyApply extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现apply</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nFunction.prototype.newApply = function(thisArg, args) {\n    // 声明一个独有的Symbol属性, 防止fn覆盖已有属性\n    const fn = Symbol('fn');\n    // 若没有传入this, 默认绑定window对象\n    thisArg = thisArg || window;\n    // this指向调用call的对象,即我们要改变this指向的函数\n    thisArg[fn] = this;\n    // 执行当前函数（此处说明一下：虽然apply()接收的是一个数组，但在调用原函数时，依然要展开参数数组。可以对照原生apply()，原函数接收到展开的参数数组）\n    const result = thisArg[fn](...args);\n    // 删除我们声明的fn属性\n    delete thisArg[fn];\n    // 返回函数执行结果              \n    return result;            \n}\n\n//测试\nconst obj = {\n\tname: 'hello world'\n};\n\nfunction foo() {\n\tconsole.log(this.name);\n}\n\nfoo.newApply(obj, [])     // hello world\n\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyCall extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现call</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nFunction.prototype.newCall = function(context, ...args) {\n\t//防止原有的属性被覆盖,生成唯一的变量名\n    const fn = Symbol('fn');\n    context = context || window;\n    //将this保存到要调用call的对象\n    context[fn] = this;\n    // 执行当前函数\n    const result = context[fn](...args);\n    //删除fn属性\n    delete context[fn];\n    return result;\n}\n\n//测试\nconst obj = {\n\tname: 'hello world'\n}\nfunction foo() {\n\tconsole.log(this.name);\n}\nfoo.newCall(obj)     // hello world`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyBind extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现bind</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n/**\n *bind() 方法创建一个新的函数，在 bind() 被调用时，\n *\t这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。\n *\t语法: function.bind(thisArg, arg1, arg2, ...)\n *\n *\n */\n \n /**\n *要注意的点\n *\t1. bind()除了this还接收其他参数，bind()返回的函数也接收参数，这两部分的参数都要传给返回的函数\n *\t2. new会改变this指向：如果bind绑定后的函数被new了，那么this指向会发生改变，指向当前函数的实例\n *\t3. 没有保留原函数在原型链上的属性和方法\n */\n \n Function.prototype.newBind = function(context, ...args) {\n     var self = this\n     // new优先级\n     var _bind = function () {\n         //判断this是不是self的实例，意思是this是不是new出来的\n         self.apply(this instanceof self ? this : context, args.concat(Array.from(arguments)));\n     }\n     // 继承原型上的属性和方法\n     _bind.prototype = Object.create(self.prototype);\n     return _bind;\n }\n \n //测试\n const obj = { name: 'hello world' };\n function foo() {\n     console.log(this.name);\n }\n \n foo.newBind(obj)();    //hello world`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyLet extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现let</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n//let写法，let具有块级作用域\n\nfor (let i = 0; i < 5; i++) {\n    console.log(i);\n}\nconsole.log(i);  // Uncaught ReferenceError: i is not defined\n\n//用es5中的var模拟实现let功能：使用自执行函数的函数作用域模拟块级作用域\n(function() {\n    for (var i = 0; i < 5; i++) {\n        console.log(i);\n    }\n})();\nconsole.log(i);  // Uncaught ReferenceError: i is not defined\n\n\n//es5中的var没有块级作用域\nfor (var i = 0; i < 5; i++) {\n    console.log(i);\n}\nconsole.log(i); // 5`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyLet extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现let</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n/**\n * 用es5实现const的功能\n * @param {*} prop 属性名\n * @param {*} value 属性值\n * 不能够完全实现和const一致的功能，只能通过以下的方式模拟const的功能\n * 将自定义const实现成一个方法，然后将该属性挂在window对象下，\n * 通过Object.defineProperty方法对属性进行拦截处理，从而达到效果\n */\nvar _const = function(prop, value) {\n    window[prop] = value;\n    Object.defineProperty(window, prop, {\n        // 当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。\n        configurable: false,\n        // 当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。\n        enumerable: false,\n        get: function() {\n            return value;\n        },\n        set: function() {\n            throw new TypeError('Assignment to constant variable.');\n        },\n    });\n}\n\n_const('a', 10);\nconsole.log(a); // 10\na = 10; // Uncaught TypeError: Assignment to constant variable.\n\n\n/**\n * 用es6中的Proxy来对对象进行拦截处理\n */\nvar _const = new Proxy({}, {\n    get: function(target, prop) {\n        return target[prop];\n    },\n    set: function(target, prop, value) {\n        if (!target[prop]) {\n            target[prop] = value;\n        } else {\n            throw new TypeError('Assignment to constant variable.');\n        }\n    }\n});\n\n_const.age = 18; \n_const.age = 18; // Uncaught TypeError: Assignment to constant variable.\n_const.age = 1; // Uncaught TypeError: Assignment to constant variable.\nconsole.log(_const.age);  // 18\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyLet extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现instanceof</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n// obj1 是不是 obj2的实例\nfunction myInstanceof(obj1, obj2) {\n\tlet left = obj1.__proto__;\n\tlet right = obj2.prototype;\n\twhile(true) {\n\t\tif (left === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (left !== right) {\n\t\t\tleft = left.__proto__;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\nfunction myInstanceof(obj1, obj2) {\n\tlet left = obj1.__proto__;\n\tlet right = obj2.prototype;\n\tif (left === null) {\n\t\treturn false\n\t}\n\tif (left === right ) {\n\t\treturn true;\n\t} else {\n\t\t// left = left.__proto__;\n\t\tmyInstanceof(left, obj2);\n\t}\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyPromise extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现promise</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n/*\n\t参考文档： https://juejin.im/post/5e3b9ae26fb9a07ca714a5cc\n*/\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\nclass MyPromise {\n\tconstructor(executor) {\n\t\tthis._state = PENDING;   //promise状态值\n\t\tthis._resolveQueue = [];\n\t\tthis._rejectQueue = [];\n\n\t\tlet _resolve = (value) => {\n\t\t\tif (this._state !== PENDING) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._state = FULFILLED;\n\n\t\t\twhile (this._resolveQueue.length) {\n\t\t\t\tconst callback = this._resolveQueue.shift();\n\t\t\t\tcallback(value);\n\t\t\t}\n\t\t}\n\n\t\tlet _reject = (value) => {\n\t\t\tif (this._state !== PENDING) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._state = REJECTED;\n\n\t\t\twhile (this._rejectQueue.length) {\n\t\t\t\tconst callback = this._rejectQueue.shift();\n\t\t\t\tcallback(value);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t\t@实现then方法的思考：\n\t\t显然.then()需要返回一个Promise，这样才能找到then方法，所以我们会把then方法的返回值包装成Promise。\n\t\t.then()的回调需要拿到上一个.then()的返回值\n\t\t.then()的回调需要顺序执行。我们要等待当前Promise状态变更后，再执行下一个then收集的回调，这就要求我们对then的返回值分类讨论\n\t*/\n\n\tthen(resolveFn, rejectFn) {\n\t\t//返回一个新的promise对象\n\t\treturn new MyPromise((resolve, reject) => {\n\t\t\tconst fulfilledFn = value => {\n\t\t\t\ttry {\n\t\t\t\t\tlet x = resolveFn(value);\n\t\t\t\t\tx instanceof MyPromise ? x.then(resolve, reject) : resolve(x);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._resolveQueue.push(fulfilledFn);\n\n\t\t\tcosnt rejectedFn = value => {\n\t\t\t\ttry {\n\t\t\t\t\tlet x = rejectFn(value);\n\t\t\t\t\tx instanceof MyPromise ? x.then(resolve, reject) : resolve(x);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._rejectQueue.push(rejectedFn);\n\t\t})\n\t}\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyCache extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现一个有缓存功能的函数</span></p>\n                <div className=\"article-desc\">\n                    实现一个缓存函数，如果要计算的参数之前已经计算过，那就拿缓存的值，如果没有重新计算。\n                    <Code code={`\nfunction add() {\n    const args = Array.from(arguments);\n    return args.reduce((preV, curV) => {\n        return preV + curV;\n    });\n}\nfunction memorize(fn) {\n    let cache = {};\n    return function() {\n        console.time('---计算耗时---');\n        const args = Array.from(arguments);\n        const key = JSON.stringify(args);\n        if (!cache[key]) {\n            const res = fn.apply(null, args);\n            cache[key] = res;\n            console.timeEnd('---计算耗时---');\n            return res;\n        } else {\n            console.timeEnd('---计算耗时---');\n            return cache[key];\n        }\n    }\n}\n\nconst adder = memorize(add);\nadder(1,2,3);\n\n\n//用Map实现\nfunction memorize(fn) {\n    let cache = new Map();\n    return function() {\n        console.time('---计算耗时---');\n        const args = Array.from(arguments);\n        const key = JSON.stringify(args);\n        if (!cache.has(key)) {\n            const res = fn.apply(null, args);\n            cache.set(key, res);\n            console.timeEnd('---计算耗时---');\n            return res;\n        } else {\n            console.timeEnd('---计算耗时---');\n            return cache.get(key);\n        }\n    }\n}\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Note extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">笔记</span></p>\n                <div className=\"article-desc\">\n                    AST查看器： https://astexplorer.net/\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\n\nimport ThisNote from './base/this';\nimport BlockScope from './base/blockScope';\nimport ObjShili from './base/obj';\nimport ObjExtend from './base/extend';\nimport EventLoop from './base/eventLoop';\nimport CopyNote from './base/copy';\n\nimport EventEmitterFn from './HeightLevelFn/EventEmitter';\nimport LightImage from './HeightLevelFn/LightImage';\nimport Memoization from './HeightLevelFn/memoization';\n\nimport MySymbol from './es6/symbol';\n\n\nimport MatchMedia from './lessCommon/matchMedia';\n\nimport AboutQueue from './mianshi/aboutQueue';\nimport AboutTree from './mianshi/aboutTree';\nimport Myfetch from './mianshi/myFetch';\nimport MyMap from './mianshi/myMap';\nimport MyForEach from './mianshi/myForEach';\nimport MyNew from './mianshi/myNew';\nimport MyApply from './mianshi/myApply';\nimport MyCall from './mianshi/myCall';\nimport MyBind from './mianshi/myBind';\nimport MyLet from './mianshi/myLet';\nimport MyConst from './mianshi/myConst';\nimport MyInstanceof from './mianshi/myInstanceof';\nimport MyPromise from './mianshi/myPromise';\nimport MyCache from './mianshi/myCache';\n\n\nimport MyNote from './note/index';\n\n\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'js基础',\n        prop: 'js-base',\n        children: [\n            {\n              label: 'this',\n              prop: 'this',\n              comp: function() {\n                  return <ThisNote />;\n              },\n            },\n            {\n                label: '块作用域',\n                prop: 'block-scope',\n                comp: function() {\n                    return <BlockScope />;\n                },\n            },\n            {\n                label: '浅拷贝 & 深拷贝',\n                prop: 'copy-mode',\n                comp: function() {\n                    return <CopyNote />;\n                },\n            },\n            {\n                label: '对象实例化方法',\n                prop: 'obj-shili',\n                comp: function() {\n                    return <ObjShili />;\n                },\n            },\n            {\n                label: '对象继承方法',\n                prop: 'obj-extend',\n                comp: function() {\n                    return <ObjExtend />;\n                },\n            },\n            {\n                label: 'event loop',\n                prop: 'event-loop',\n                comp: function() {\n                    return <EventLoop />;\n                },\n            },\n        ]\n    },\n    {\n        label: '高级方法',\n        prop: 'height-level-fn',\n        children: [\n            {\n              label: '发布订阅模式',\n              prop: 'event-emit-fn',\n              comp: function() {\n                  return <EventEmitterFn />;\n              },\n            },\n            {\n                label: '点亮图片',\n                prop: 'light-image-fn',\n                comp: function() {\n                    return <LightImage />;\n                },\n            },\n            {\n                label: 'memoization技术',\n                prop: 'memoization',\n                comp: function() {\n                    return <Memoization />;\n                },\n            },\n        ]\n    },\n    {\n        label: 'es6',\n        prop: 'es6',\n        children: [\n            {\n              label: 'symbol',\n              prop: 'es6-symbol',\n              comp: function() {\n                  return <MySymbol />;\n              },\n            },\n        ]\n    },\n    {\n        label: '不常用知识点',\n        prop: 'less-common',\n        children: [\n            {\n              label: 'window.matchMedia',\n              prop: 'matchMedia',\n              comp: function() {\n                  return <MatchMedia />;\n              },\n            },\n        ]\n    },{\n        label: '面试',\n        prop: 'mianshi',\n        children: [\n            {\n              label: '实现一个类：链式调用，事件执行，流程控制',\n              prop: 'mianshi-1',\n              comp: function() {\n                  return <AboutQueue />;\n              },\n            },\n            {\n                label: '判断树是否对称',\n                prop: 'mianshi-2',\n                comp: function() {\n                    return <AboutTree />;\n                },\n            },\n            {\n                label: 'fetch实现控制并发请求数',\n                prop: 'mianshi-3',\n                comp: function() {\n                    return <Myfetch />;\n                },\n            },\n            {\n                label: '实现map',\n                prop: 'mianshi-4',\n                comp: function() {\n                    return <MyMap />;\n                },\n            },\n            {\n                label: '实现forEach',\n                prop: 'mianshi-5',\n                comp: function() {\n                    return <MyForEach />;\n                },\n            },{\n                label: '实现new',\n                prop: 'mianshi-6',\n                comp: function() {\n                    return <MyNew />;\n                },\n            },{\n                label: '实现apply',\n                prop: 'mianshi-7',\n                comp: function() {\n                    return <MyApply />;\n                },\n            },{\n                label: '实现call',\n                prop: 'mianshi-8',\n                comp: function() {\n                    return <MyCall />;\n                },\n            },{\n                label: '实现bind',\n                prop: 'mianshi-9',\n                comp: function() {\n                    return <MyBind />;\n                },\n            },{\n                label: '实现let',\n                prop: 'mianshi-10',\n                comp: function() {\n                    return <MyLet />;\n                },\n            },{\n                label: '实现const',\n                prop: 'mianshi-11',\n                comp: function() {\n                    return <MyConst />;\n                },\n            },{\n                label: '实现instanceof',\n                prop: 'mianshi-12',\n                comp: function() {\n                    return <MyInstanceof />;\n                },\n            },{\n                label: '实现promise',\n                prop: 'mianshi-13',\n                comp: function() {\n                    return <MyPromise />;\n                },\n            },{\n                label: '实现缓存函数',\n                prop: 'mianshi-14',\n                comp: function() {\n                    return <MyCache />;\n                },\n            },  \n        ]\n    },\n    {\n        label: '笔记',\n        prop: 'note',\n        children: [\n            {\n              label: '笔记',\n              prop: 'my-note',\n              comp: function() {\n                  return <MyNote />;\n              },\n            },\n        ]\n    },\n\n];\n\n\nexport default function JsIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class H5Page extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <Code \n                    code={`\nfunction aaa() {\n    console.log('hello world!!!');\n}\n                    `}\n                />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class H5APIPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                h5新增api----是的发生\n                <Code \n                    code={`\nfunction aaa() {\n    console.log('hello world!!!');\n}\n                    `}\n                />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\nimport H5Note from './h5/index';\nimport H5APINote from './api/index';\n\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'h5',\n        prop: 'h5',\n        children: [\n            {\n              label: 'h5新增标签',\n              prop: 'h5-span',\n              comp: function() {\n                return <H5Note />;\n              },\n            },\n            {\n                label: 'h5新增API',\n                prop: 'h5-api',\n                comp: function() {\n                  return <H5APINote />;\n                },\n            },\n        ]\n    },\n];\n\nexport default function H5Index () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class CSS3Page extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                css3新特性\n                \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\nimport FlexImage from './../../../img/flex-img.jpg';\nimport './layout.scss';\n\nexport default class FlexPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">flex布局</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、flex简介</span></p>\n                <div className=\"article-desc\">\n                    参考文档： http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html<br /><br />\n                    Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。<br />\n                    任何一个容器都可以指定为 Flex 布局。<br />\n                    注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。<br />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、基本概念</span></p>\n                <div className=\"article-desc\">\n                    1. 容器： 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。<br />\n                    2. 项目： 它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。<br />\n                    3. 轴： 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br />\n                    4. 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。<br />\n                    <img className=\"big-img\" alt=\"\" src={FlexImage} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、容器的属性</span></p>\n                <div className=\"article-desc\">\n                    容器的属性：<br />\n                    <span className=\"text-placeholder\" />1. flex-direction<br/>\n                    <span className=\"text-placeholder\" />2. flex-wrap<br/>\n                    <span className=\"text-placeholder\" />3. flex-flow<br/>\n                    <span className=\"text-placeholder\" />4. justify-content<br/>\n                    <span className=\"text-placeholder\" />5. align-items<br/>\n                    <span className=\"text-placeholder\" />6. align-content<br/><br/>\n\n                    每个属性的含义：<br/>\n                    1. flex-direction：<br/>\n                    属性决定主轴的方向（即项目的排列方向）。<br/><br/>\n                    <Code code={`\n.box {\n    flex-direction: row | row-reverse | column | column-reverse;\n}`} /><br/>\n                    flex-direction有四个可能值：<br/>\n                    <span className=\"text-placeholder\" />1. row（默认值）：主轴为水平方向，起点在左端。<br/>\n                    <span className=\"text-placeholder\" />2. row-reverse：主轴为水平方向，起点在右端。<br/>\n                    <span className=\"text-placeholder\" />3. column：主轴为垂直方向，起点在上沿。<br/>\n                    <span className=\"text-placeholder\" />4. column-reverse：主轴为垂直方向，起点在下沿。<br/>\n\n                    实例：<br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-direction: row;</span>\n                        <div className=\"flex-layout flex-layout-1\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-direction: row-reverse;</span>\n                        <div className=\"flex-layout flex-layout-2\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-direction: column;</span>\n                        <div className=\"flex-layout flex-layout-3\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-direction: column-reverse;</span>\n                        <div className=\"flex-layout flex-layout-4\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/><br/>\n                    2. flex-wrap:<br/>\n                    默认情况下，项目都排在一条线（又称\"轴线\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。<br/><br/>\n                    <Code code={`\n.box{\n    flex-wrap: nowrap | wrap | wrap-reverse;\n}`} />\n                    flex-wrap有四个可能值：<br/>\n                    <span className=\"text-placeholder\" />1. nowrap（默认）：不换行。<br/>\n                    <span className=\"text-placeholder\" />2. wrap：换行，第一行在上方。<br/>\n                    <span className=\"text-placeholder\" />3. wrap-reverse：换行，第一行在下方。<br/>\n\n                    实例：<br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-wrap: nowrap;</span>\n                        <div className=\"flex-layout flex-layout-wrap-1\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-wrap: wrap;</span>\n                        <div className=\"flex-layout flex-layout-wrap-2\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-wrap: wrap-reverse;</span>\n                        <div className=\"flex-layout flex-layout-wrap-3\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/><br/>\n                    3. flex-flow:<br/>\n                    flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。<br/><br/>\n                    <Code code={`\n.box {\n    flex-flow: <flex-direction> || <flex-wrap>;\n}`} />\n<br/><br/>\n                    4. justify-content:<br/>\n                    justify-content属性定义了项目在主轴上的对齐方式。<br/><br/>\n                    <Code code={`\n.box {\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n}`} />\n                    justify-content有5个可能值：<br/>\n                    <span className=\"text-placeholder\" />1. flex-start（默认值）：左对齐<br/>\n                    <span className=\"text-placeholder\" />2. flex-end：右对齐<br/>\n                    <span className=\"text-placeholder\" />3. center： 居中<br/>\n                    <span className=\"text-placeholder\" />4. space-between：两端对齐，项目之间的间隔都相等。<br/>\n                    <span className=\"text-placeholder\" />5. space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<br/>\n                    实例：<br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: flex-start;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-1\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: flex-end;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-2\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: center;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-3\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: space-between;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-4\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: space-around;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-5\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/><br/>\n                    5. align-items:<br/>\n                    align-items属性定义项目在交叉轴上如何对齐。<br/><br/>\n                    <Code code={`\n.box {\n    align-items: flex-start | flex-end | center | baseline | stretch;\n}`} />\n                    align-items有5个可能值：<br/>\n                    <span className=\"text-placeholder\" />1. flex-start：交叉轴的起点对齐。<br/>\n                    <span className=\"text-placeholder\" />2. flex-end：交叉轴的终点对齐。<br/>\n                    <span className=\"text-placeholder\" />3. center：交叉轴的中点对齐。<br/>\n                    <span className=\"text-placeholder\" />4. baseline: 项目的第一行文字的基线对齐。<br/>\n                    <span className=\"text-placeholder\" />5. stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<br/>\n                    实例：<br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: flex-start;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-1\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: flex-end;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-2\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: center;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-3\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: baseline;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-4\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: stretch;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-5\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                </div>\n                <p className=\"item-title\"><span className=\"textShadow\">四、项目的属性</span></p>\n                <div className=\"article-desc\">\n                    以下6个属性设置在项目上:<br/>\n                    <span className=\"text-placeholder\" />1. order<br />\n                    <span className=\"text-placeholder\" />2. flex-grow<br />\n                    <span className=\"text-placeholder\" />3. flex-shrink<br />\n                    <span className=\"text-placeholder\" />4. flex-basis<br />\n                    <span className=\"text-placeholder\" />5. flex<br />\n                    <span className=\"text-placeholder\" />6. align-self<br /><br />\n\n                    各属性的含义及用法：<br/>\n                    <span className=\"mark1\">1. order: 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</span><br /><br />\n                    <span className=\"mark1\">2. flex-grow: 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span><br /><br />\n                    <span className=\"mark1\">3. flex-shrink: 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</span><br /><br />\n                    <span className=\"mark1\">4. flex-basis: 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</span><br /><br />\n                    <span className=\"mark1\">5. flex: flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<span className=\"mark\">两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</span></span><br /><br />\n                    <span className=\"mark1\">6. align-self: 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</span><br /><br />\n                    <Code code={`\n.item {\n    order: 1;\n}\n.item {\n    flex-grow: 0;\n}\n.item {\n    flex-shrink: 1;\n}\n.item {\n    flex-basis: auto;\n}\n.item {\n    flex: auto; // 1 1 auto\n    flex: none; // 0 0 auto\n    flex: 1;    // 1 1 0%\n    flex: 10;   // 10 1 0%\n}\n.item {\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\nimport './common.scss';\n\nexport default class Col2Page extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">两列自适应布局</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">常见的两列布局方案</span>\n                </p>\n                <div className=\"article-desc\">\n                    1. flex布局<br />\n                    2. float布局<br />\n                    3. position: absolute布局<br />\n                    4. table布局<br />\n                    5. grid布局<br />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、flex布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-flex\">\n                        <div className=\"left\">左，定宽100px</div>\n                        <div className=\"right\">右，自适应</div>\n                    </div>\n                    <br />\n                    <Code code={`\n//html\n<div className=\"layout-flex\">\n    <div className=\"left\">左，定宽100px</div>\n    <div className=\"right\">右，自适应</div>\n</div>\n\n//css\n.layout-flex{\n    display: flex;\n    height: 100px;\n    .left{\n        width: 100px;\n        border: 1px solid red;\n    }\n    .right{\n        flex: 1;\n        border: 1px solid green;\n    }\n}\n`} />\n\n                <span className=\"mark\">flex布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少<br/>\n                2. 缺点：兼容性较差，只能兼容到ie9及以上<br />\n                </div>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、float布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-float\">\n                        <div className=\"left\">左，定宽100px</div>\n                        <div className=\"right\">右，自适应</div>\n                    </div>\n                    <br />\n                    <Code code={`\n//html\n<div className=\"layout-float\">\n    <div className=\"left\">左，定宽100px</div>\n    <div className=\"right\">右，自适应</div>\n</div>\n\n//css\n.layout-float{\n    width: 100%;\n    .left{\n        float: left;\n        width: 100px;\n        border: 1px solid red;\n    }\n    .right{\n        margin-left: 100px;\n        border: 1px solid green;\n    }\n}\n`} />\n                <span className=\"mark\">float布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少,兼容性好<br/>\n                2. 缺点：会造成父元素高度塌陷（要对父元素进行清浮动处理）, 脱离文档流<br />\n                </div>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、position: absolute布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-position\">\n                        <div className=\"left\">左，定宽100px</div>\n                        <div className=\"right\">右，自适应</div>\n                    </div>\n                    <br />\n                    <Code code={`\n//html\n<div className=\"layout-position\">\n    <div className=\"left\">左，定宽100px</div>\n    <div className=\"right\">右，自适应</div>\n</div>\n\n//css\n.layout-position{\n    width: 100%;\n    height: 100px;\n    position: relative;\n    .left{\n        width: 100px;\n        height: 100%;\n        position: absolute;\n        left: 0;\n        top: 0;\n    }\n    .right{\n        margin-left: 100px;\n        height: 100%;\n    }\n}\n`} />\n                <span className=\"mark\">position: absolute布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少,兼容性好<br/>\n                2. 缺点：会造成父元素高度塌陷（要对父元素进行清浮动处理）, 脱离文档流<br />\n                </div>\n\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">四、table布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-table\">\n                        <div className=\"table-row\">\n                            <div className=\"left\">左，定宽100px</div>\n                            <div className=\"right\">右，自适应</div>\n                        </div>\n                    </div>\n                    <br />\n\n                    <Code code={`\n//html\n<div className=\"layout-table\">\n    <div className=\"table-row\">\n        <div className=\"left\">左，定宽100px</div>\n        <div className=\"right\">右，自适应</div>\n    </div>\n</div>\n\n//css\n.layout-table{\n    width: 100%;\n    height: 100px;\n    display: table;\n    .table-row{\n        display: table-row;\n    }\n    .left{\n        width: 100px;\n        height: 100%;\n        display: table-cell;\n    }\n    .right{\n        display: table-cell;\n    }\n}\n`} />\n                <span className=\"mark\">position: absolute布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少,兼容性好<br/>\n                2. 缺点：<br />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">五、grid布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-gird\">\n                        <div className=\"left\">左，定宽100px</div>\n                        <div className=\"right\">右，自适应</div>\n                    </div>\n                    <br />\n                    <Code code={`\n//html\n<div className=\"layout-gird\">\n    <div className=\"left\">左，定宽100px</div>\n    <div className=\"right\">右，自适应</div>\n</div>\n\n//css\n.layout-gird{\n    display: grid;\n    grid-template-columns: 100px auto;\n    grid-template-rows: 100px;\n}\n`} />\n                <span className=\"mark\">position: absolute布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少<br/>\n                2. 缺点：有兼容性问题<br />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class Col3Page extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                3列布局\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class GridLayout extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                Grid 网格布局\n                http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\nimport './layout.scss';\n\nexport default class SanjiaoPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">实现三角形</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"sanjiao-wrap\">\n                        <div className=\"sanjiao-1 sanjiao-item\"></div>\n                        <div className=\"sanjiao-2 sanjiao-item\"></div>\n                        <div className=\"sanjiao-3 sanjiao-item\"></div>\n                        <div className=\"sanjiao-4 sanjiao-item\"></div>\n                    </div>\n                    <Code code={`\n//html\n<div className=\"sanjiao-1 sanjiao-item\"></div>\n//css\n.sanjiao-item{\n    width: 0;\n    height: 0;\n    border-top: 40px solid red;\n    \n    &.sanjiao-1{\n        border-left: 0px solid transparent;\n        border-right: 40px solid transparent;\n        border-bottom: 40px solid transparent;\n    }\n    &.sanjiao-2{\n        border-left: 40px solid transparent;\n        border-right: 0px solid transparent;\n        border-bottom: 40px solid transparent;\n    }\n    &.sanjiao-3{\n        border-left: 40px solid transparent;\n        border-right: 40px solid transparent;\n        border-bottom: 0px solid transparent;\n    }\n    &.sanjiao-4{\n        border-top: 0px solid transparent;\n        border-left: 40px solid transparent;\n        border-right: 40px solid transparent;\n        border-bottom: 40px solid red;\n    }\n}\n`} />\n                </div>\n            </div>\n            \n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\nimport boxModel1 from '../../../img/box-model-1.jpg';\nimport boxModel2 from '../../../img/box-model-2.jpg';\n\nexport default class BoxModel extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">盒模型</span></p>\n                <div className=\"article-desc\">\n                    盒子模型（Box Modle）可以用来对元素进行布局，包括内边距，边框，外边距，和实际内容这几个部分。<br />\n                    盒子模型分为两种 第一种是W3c标准的盒子模型（标准盒模型） 、第二种IE标准的盒子模型（怪异盒模型）<br />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">一、两者的区别</span></p>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">1. 标准盒模型</span><br />\n                    标准盒模型中width指的是内容区域content的宽度；height指的是内容区域content的高度。<br /><br />\n                    标准盒模型下盒子的大小  = content + border + padding + margin<br /><br />\n                    <img className=\"middle-img\" scr={boxModel1} alt=\"\" />\n\n                    <span className=\"mark\">2. 怪异盒模型</span><br />\n                    怪异盒模型中的width指的是内容、边框、内边距总的宽度（content + border + padding）;<br />\n                    height指的是内容、边框、内边距总的高度<br /><br />\n                    怪异盒模型下盒子的大小=width（content + border + padding） + margin<br />\n                    <img className=\"middle-img\" scr={boxModel2} alt=\"\" />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、选择盒模型</span></p>\n                <div className=\"article-desc\">\n                    如果是定义了完整的doctype的标准文档类型，无论是哪种模型情况，最终都会触发标准模式。<br /><br />\n                    我们可以通过属性box-sizing来设置盒子模型的解析模式:<br /><br />\n                    可以为box-sizing赋三个值：<br />\n\n                        <span className=\"text-placeholder\" />content-box： 默认值，border和padding不算到width范围内，可以理解为是W3c的标准模型(default)<br />\n\n                        <span className=\"text-placeholder\" />border-box：border和padding划归到width范围内，可以理解为是IE的怪异盒模型<br />\n\n                        <span className=\"text-placeholder\" />padding-box：将padding算入width范围<br />\n                </div>\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\nimport CSS3Note from './css3/index';\nimport FlexNote from './layout/flex';\nimport Layout2Cols from './layout/2cols';\nimport Layout3Cols from './layout/3cols';\nimport LayoutGrid from './layout/grid';\nimport LayoutSanjiao from './layout/sanjiao';\nimport BoxModel from './css3/boxModel';\n\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'css3新特性',\n        prop: 'css3',\n        children: [\n            {\n              label: 'css3新特性',\n              prop: 'css3-new',\n              comp: function() {\n                  return <CSS3Note />;\n              },\n            },\n            {\n                label: '盒模型',\n                prop: 'css3-boxModel',\n                comp: function() {\n                    return <BoxModel />;\n                },\n              },\n        ]\n    },\n    {\n        label: '布局',\n        prop: 'layout',\n        children: [\n            {\n                label: 'flex布局',\n                prop: 'layout-flex',\n                comp: function() {\n                    return <FlexNote />;\n                },\n            },\n            {\n              label: '两栏布局',\n              prop: 'layout-2-col',\n              comp: function() {\n                  return <Layout2Cols />;\n              },\n            },\n            {\n                label: '三栏布局',\n                prop: 'layout-3-col',\n                comp: function() {\n                    return <Layout3Cols />;\n                },\n            },\n            {\n                label: 'grid网格布局',\n                prop: 'layout-grid',\n                comp: function() {\n                    return <LayoutGrid />;\n                },\n            },\n            {\n                label: '三角形',\n                prop: 'layout-sanjiao',\n                comp: function() {\n                    return <LayoutSanjiao />;\n                },\n            },\n        ]\n    },\n\n];\n\n\nexport default function JsIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class BrowserLoad extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">从地址栏输入url到页面加载完成都发生了什么</span></p>\n                <div className=\"article-desc\">\n                https://juejin.im/entry/59c1e43e6fb9a00a53275fcc\n\n                https://juejin.im/post/5cb44c365188257ab74c639c\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class BrowserCache extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">浏览器缓存</span></p>\n                <div className=\"article-desc\">\n                https://juejin.im/post/5c417993f265da61285a6075\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\n\nimport BrowserLoad from './base/browserload';\nimport BrowserCache from './base/cache';\n\n\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: '浏览器基础',\n        prop: 'js-base',\n        children: [\n            {\n              label: '在地址栏输入url到页面加载的过程',\n              prop: 'browser-load',\n              comp: function() {\n                  return <BrowserLoad />;\n              },\n            },{\n                label: '浏览器缓存',\n                prop: 'browser-cache',\n                comp: function() {\n                    return <BrowserCache />;\n                },\n              },\n        ]\n    },\n\n];\n\n\nexport default function BrowserIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\nimport Code from './../comp/Code';\nimport './../comp/common/style.css';\n\n\nexport default class TreeSort extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">二叉树排序</span>\n                </p>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">概念</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    树：是一种非线性的数据结构，以分层的方式存储数据。树是由一组以边连接的节点组成。\n                    <br />\n                    二叉树：是一种特殊的树，子节点不超过两个。\n                    <br />\n                    二叉查找树：是一种特殊的二叉树，相对较小的值保存在左节点中，较大的值保存在右节点中。\n                </div>\n\n                <div className=\"article-desc\">\n                    二叉树的特点：在二叉树上查找，添加，删除元素非常快速\n                    <div className=\"line\"></div>\n                    <p className=\"mark\">思考点：为什么在二叉树上查找，添加，删除元素非常快速？</p>\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">节点对象类</span>\n                </p>\n\n                <Code \n                    code={`\n/**\n * Node对象保存数据和其他节点的链接（left和right）\n * @param {*} data 数据\n * @param {*} left 左子节点\n * @param {*} right 右子节点\n */\nfunction Node(data, left, right) {\n    this.data = data;\n    this.left = left;\n    this.right = right;\n    this.show = show;\n    // this.count = 0;\n} \n\nfunction show() {\n    return this.data;\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二叉树类</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 实现二叉查找树类\n */\nfunction BST() {\n    this.root = null;\n    this.insert = insert;\n    this.inOrder = inOrder;\n    this.preOrder = preOrder;\n    this.postOrder = postOrder;\n    this.getMin = getMin;\n    this.getMax = getMax;\n    this.find = find;\n    this.remove = remove;\n    this.nodeCount = 0;\n    this.update = update;\n//  this.getNodeCount = getNodeCount; //节点个数\n}\n                    `}\n                />\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">插入节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 插入节点方法\n * 算法：\n *     1. 设根节点为当前节点\n *     2. 如果待插入的节点的值小于当前节点，则设新的节点为原节点的左节点，反之为右节点\n *     3. 如果当前节点的左节点为null，就将新的节点插入该位置，循环退出，反之，继续下一次\n *     4. 设新的当前节点为原节点的右节点\n *     5. 如果当前节点的右节点为null，就将新的节点插入该位置，循环退出，反之，继续下一次\n * @param {*} data \n */\nfunction insert(data) {\n    const node = new Node(data, null, null);\n    this.nodeCount += 1;\n    if (this.root == null) {\n        this.root = node;\n    } else {\n        let current = this.root;\n        let parent;\n        const bool = true;\n        while(bool) {\n            parent = current;\n            if (data < current.data) {\n                current = current.left;\n                if (current == null) {\n                    parent.left = node;\n                    break;\n                }\n            } else {\n                current = current.right;\n                if (current == null) {\n                    parent.right = node;\n                    break;\n                }\n            }\n        }\n    }\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">遍历 ==> 中序遍历</span>\n                </p>\n                <Code \n                    code={`\n/**\n * BST遍历之☞中序遍历\n * 中序遍历流程： 左子树 => 根节点 => 右子树\n */\nfunction inOrder(node) {\n    if (node !== null) {\n        inOrder(node.left);\n        window.console.log(node.show());\n        inOrder(node.right);\n    }\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">遍历 ==> 先序遍历（前序)</span>\n                </p>\n                <Code \n                    code={`\n/**\n * BST遍历之☞先序遍历（前序）\n * 中序遍历流程： 根节点 => 左子树 => 右子树\n */\nfunction preOrder(node) {\n    if (node !== null) {\n        window.console.log(node.show());\n        preOrder(node.left);\n        preOrder(node.right);\n    }\n}\n                    `}\n                />\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">遍历 ==> 后序遍历</span>\n                </p>\n                <Code \n                    code={`\n/**\n * BST遍历之☞后序遍历\n * 中序遍历流程： 左子树 => 右子树 => 根节点\n */\n\nfunction postOrder(node) {\n    if (node !== null) {\n        postOrder(node.left);\n        postOrder(node.right);\n        window.console.log(node.show());\n    }\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">获取最小的节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 获取最小的节点\n * 由于较小值在BST的左子树上，所以只需要遍历左子树即可\n */\nfunction getMin() {\n    let current = this.root;\n    while(current.left != null) {\n        current = current.left;\n    }\n    return current;\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">获取最大的节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 获取最大的节点\n * 由于较大值在BST的右子树上，所以只需要遍历右子树即可\n */\n\nfunction getMax() {\n    let current = this.root;\n    while(current.right != null) {\n        current = current.right;\n    }\n    return current;\n}\n                `}/>\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">在BST中查找给定值的节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 在BST中查找给定值的节点\n * @param {*} data \n */\nfunction find(data) {\n    let current = this.root;\n    while(current != null) {\n        if (current.data == data) {\n            return current;\n        } else if (data < current.data) {\n            current = current.left;\n        } else {\n            current = current.right;\n        }\n    }\n    return null;\n}\n                `}/>\n\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">在BST中删除指定节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 在BST中删除指定节点\n * 算法： \n *     1. 判断当前节点是否包含待删除的数据，如果包含，则删除；如果不包含，则比较大小\n *     2. 如果待删除数据小于当前节点上的数据，则移至当前节点的左子节点继续比较；\n *     3. 如果待删除数据大于当前节点上的数据，则移至当前节点的右子节点继续比较；\n *     4. 如果待删除数据是叶子节点，只需将从父节点指向null\n * @param {*} data \n */\n\nfunction remove(data) {\n    removeNode(this.root, data);\n}\n\nfunction removeNode(node, data) {\n    if (node == null) {\n        return null;\n    }\n    if (data == node.data) {\n        //没有子节点的节点\n        if (node.left == null && node.right == null) {\n            return null;\n        }\n        // 没有左子节点的节点\n        if (node.left == null) {\n            return node.right;\n        }\n        // 没有右子节点的节点\n        if (node.right == null) {\n            return node.left;\n        }\n        const getSmallest = function(node) {\n            if (node.left == null && node.right == null) {\n                return node;\n            }\n            if (node.left != null) {\n                return node.left;\n            }\n            if (node.right != null) {\n                return getSmallest(node.right);\n            }\n        }\n        // 有两个子节点的节点\n        const tempNode = getSmallest(node.right);\n        node.data = tempNode.data;\n        node.right = removeNode(node.right, tempNode.data);\n        return node;\n    } else if (data < node.data) {\n        node.left = removeNode(node.left, data);\n        return node;\n    } else {\n        node.right = removeNode(node.right, data);\n        return node;\n    }\n}\n                `}/>\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">在BST中更新指定节点</span>\n                </p>\n                <Code \n                    code={`\nfunction update(data) {\n    const node = this.find(data);\n    node.count++;\n    return node;\n}\n                    `}/>\n\n\n                <div className=\"line\" />\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">完整代码</span>\n                </p>\n                <Code \n                    code={`\n /**\n * 概念\n *      树：是一种非线性的数据结构，以分层的方式存储数据。树是由一组以边连接的节点组成。\n *      二叉树：是一种特殊的树，子节点不超过两个。\n *      二叉查找树：是一种特殊的二叉树，相对较小的值保存在左节点中，较大的值保存在右节点中。\n * 特点： 在二叉树上查找，添加，删除元素非常快速\n */\n\n\n/**\n * Node对象保存数据和其他节点的链接（left和right）\n * @param {*} data 数据\n * @param {*} left 左子节点\n * @param {*} right 右子节点\n */\n function Node(data, left, right) {\n     this.data = data;\n     this.left = left;\n     this.right = right;\n     this.show = show;\n     this.count = 0;\n } \n\n function show() {\n     return this.data;\n }\n\n/**\n * 实现二叉查找树类\n */\n function BST() {\n     this.root = null;\n     this.insert = insert;\n     this.inOrder = inOrder;\n     this.preOrder = preOrder;\n     this.postOrder = postOrder;\n     this.getMin = getMin;\n     this.getMax = getMax;\n     this.find = find;\n     this.remove = remove;\n     this.nodeCount = 0;\n     this.update = update;\n    //  this.getNodeCount = getNodeCount; //节点个数\n }\n\n /**\n  * 插入节点方法\n  * 算法：\n  *     1. 设根节点为当前节点\n  *     2. 如果待插入的节点的值小于当前节点，则设新的节点为原节点的左节点，反之为右节点\n  *     3. 如果当前节点的左节点为null，就将新的节点插入该位置，循环退出，反之，继续下一次\n  *     4. 设新的当前节点为原节点的右节点\n  *     5. 如果当前节点的右节点为null，就将新的节点插入该位置，循环退出，反之，继续下一次\n  * @param {*} data \n  */\n function insert(data) {\n     const node = new Node(data, null, null);\n     this.nodeCount += 1;\n     if (this.root == null) {\n         this.root = node;\n     } else {\n        let current = this.root;\n        let parent;\n        const bool = true;\n        while(bool) {\n            parent = current;\n            if (data < current.data) {\n                current = current.left;\n                if (current == null) {\n                    parent.left = node;\n                    break;\n                }\n            } else {\n                current = current.right;\n                if (current == null) {\n                    parent.right = node;\n                    break;\n                }\n            }\n        }\n     }\n }\n/**\n * BST遍历之☞中序遍历\n * 中序遍历流程： 左子树 => 根节点 => 右子树\n */\n function inOrder(node) {\n    if (node !== null) {\n        inOrder(node.left);\n        window.console.log(node.show());\n        inOrder(node.right);\n    }\n }\n\n /**\n * BST遍历之☞先序遍历（前序）\n * 中序遍历流程： 根节点 => 左子树 => 右子树\n */\nfunction preOrder(node) {\n    if (node !== null) {\n        window.console.log(node.show());\n        preOrder(node.left);\n        preOrder(node.right);\n    }\n }\n\n /**\n * BST遍历之☞后序遍历\n * 中序遍历流程： 左子树 => 右子树 => 根节点\n */\nfunction postOrder(node) {\n    if (node !== null) {\n        postOrder(node.left);\n        postOrder(node.right);\n        window.console.log(node.show());\n    }\n }\n\n/**\n * 获取最小的节点\n * 由于较小值在BST的左子树上，所以只需要遍历左子树即可\n */\n function getMin() {\n    let current = this.root;\n    while(current.left != null) {\n        current = current.left;\n    }\n    return current;\n }\n\n /**\n * 获取最大的节点\n * 由于较大值在BST的右子树上，所以只需要遍历右子树即可\n */\n\n function getMax() {\n     let current = this.root;\n     while(current.right != null) {\n         current = current.right;\n     }\n     return current;\n }\n\n /**\n  * 在BST中查找给定值的节点\n  * @param {*} data \n  */\n function find(data) {\n    let current = this.root;\n    while(current != null) {\n        if (current.data == data) {\n            return current;\n        } else if (data < current.data) {\n            current = current.left;\n        } else {\n            current = current.right;\n        }\n    }\n    return null;\n }\n\n /**\n  * 在BST中删除指定节点\n  * 算法： \n  *     1. 判断当前节点是否包含待删除的数据，如果包含，则删除；如果不包含，则比较大小\n  *     2. 如果待删除数据小于当前节点上的数据，则移至当前节点的左子节点继续比较；\n  *     3. 如果待删除数据大于当前节点上的数据，则移至当前节点的右子节点继续比较；\n  *     4. 如果待删除数据是叶子节点，只需将从父节点指向null\n  * @param {*} data \n  */\nfunction remove(data) {\n    removeNode(this.root, data);\n}\n\nfunction removeNode(node, data) {\n    if (node == null) {\n        return null;\n    }\n    if (data == node.data) {\n        //没有子节点的节点\n        if (node.left == null && node.right == null) {\n            return null;\n        }\n        // 没有左子节点的节点\n        if (node.left == null) {\n            return node.right;\n        }\n        // 没有右子节点的节点\n        if (node.right == null) {\n            return node.left;\n        }\n        const getSmallest = function(node) {\n            if (node.left == null && node.right == null) {\n                return node;\n            }\n            if (node.left != null) {\n                return node.left;\n            }\n            if (node.right != null) {\n                return getSmallest(node.right);\n            }\n        }\n        // 有两个子节点的节点\n        const tempNode = getSmallest(node.right);\n        node.data = tempNode.data;\n        node.right = removeNode(node.right, tempNode.data);\n        return node;\n    } else if (data < node.data) {\n        node.left = removeNode(node.left, data);\n        return node;\n    } else {\n        node.right = removeNode(node.right, data);\n        return node;\n    }\n}\n\n// //获取BST中所有节点（包括根节点）个数\n// function getNodeCount() {\n//     this.count = 0;\n//     if (this.root !== null) {\n//         inOrder(node.left);\n//         console.log(node.show());\n//         inOrder(node.right);\n//     }\n// }\n\nfunction update(data) {\n    const node = this.find(data);\n    node.count++;\n    return node;\n}\n\nexport default BST;\n                    `}\n                />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\nimport TreeSort from './tree';\n// import H5APINote from './api/index';\n\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: '算法',\n        prop: 'algorithm',\n        children: [\n            {\n              label: '冒泡排序',\n              prop: 'algorithm-bubble-sort',\n              comp: function() {\n                return null;\n              },\n            },\n            {\n                label: '快排',\n                prop: 'algorithm-quick',\n                comp: function() {\n                  return null;\n                },\n            },\n            {\n                label: '二叉树',\n                prop: 'algorithm-tree',\n                comp: function() {\n                  return <TreeSort />;\n                },\n            },\n        ]\n    },\n];\n\nexport default function H5Index () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WXNavbar extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">微信小程序---自定义导航栏</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n// wxml\n<view class=\"nav-bar {{modType=='normal'? 'normal': modType}} {{showBlank ? 'bg-color':''}}\" style='height:{{navigationBarHeight}};{{headerStyle}}'>\n    <view style=\"{{'height: ' + statusBarHeight}}\"></view>\n\n    <view class=\"nav-group flex flex-align-center flex-pack-around\"  style=\"{{'top: ' + statusBarHeight}};{{btnHomeStyle}}\">\n        <view wx:if=\"{{showBack && !showHome}}\" class=\"nav-btn\">\n            <view class=\"icon icon-arrow-l flex flex-align-center flex-pack-center\"></view>\n        </view>\n        <view wx:if=\"{{showHome}}\" class=\"nav-btn\" >\n            <image class=\"showHome\" src=\"{{src}}\" />\n        </view>\n    </view>\n\n    <view class=\"nav-title flex flex-align-center flex-pack-center\" style=\"{{'top: ' + statusBarHeight}};{{btnHomeStyle}}\">\n        {{pageName}}\n    </view>\n</view>\n<view class=\"nav-bar-placeholder\" style='height:{{navigationBarHeight}};'></view>\n\n// js\n\nimport { getStatusBarHeight } from 'util/wx/sysinfo'\nconst statusBarHeight = getStatusBarHeight()\nComponent({\n    options: {\n        addGlobalClass: true,\n    },\n    /**\n     * 组件的属性列表\n     * pageName 指定页面标题\n     * modType normal | '' normal为带头部的样式，传空字符串为没有头部的样式\n     * goList true | false true表示跳转到列表页\n     * customStyle:\n     * backUrl: 返回的url\n     */\n    properties: {\n        pageName: String,\n        modType: String,\n        goList: {\n            type: Boolean,\n            value: false\n        },\n        showHome: {\n            type: Boolean,\n            value: false\n        },\n        headerStyle: String,\n        btnHomeStyle: String,\n        backUrl: {\n            type: String,\n            value: ''\n        }\n    },\n    /**\n     * 组件的初始数据\n     * showBack showBack\n     * statusBarHeight  界面状态栏高度，用于适配不同设备状态栏\n     * navigationBarHeight  navbar的设计高度，UI定义高度，可以手动修改\n     */\n    data: {\n        showBlank: true,\n        showBack: true,\n        showHome: false,\n        statusBarHeight: statusBarHeight + 'px',\n        navigationBarHeight: (statusBarHeight + 50) + 'px'\n    },\n    pageLifetimes: {\n        show() {\n            this.setData({\n                showBack: this.data.goList ? true : (getCurrentPages().length > 1)\n            })\n        },\n\n    },\n    lifetimes: {\n        ready: function () {\n            this._observer = wx.createIntersectionObserver(this)\n            this._observer\n                .relativeToViewport()\n                .observe('.nav-bar-placeholder', (res) => {\n                    if (res.intersectionRatio > 0) {\n                        // 移出，背景出现\n                        this.setData({\n                            showBlank: false\n                        })\n                    } else {\n                        // 进入，背景变透明\n                        this.setData({\n                            showBlank: true\n                        })\n                    }\n                })\n        },\n        detached: function () {\n            if (this._observer) this._observer.disconnect()\n        }\n    },\n    /**\n     * 组件的方法列表\n     */\n    methods: {\n        //回退\n        historyBack: function () {\n            if (this.data.goList) {\n                wx.reLaunch({\n                    url: '/pages/home/index'\n                })\n            } else {\n                wx.navigateBack()\n            }\n        },\n        goHome: function (e) {\n            this.triggerEvent(\"homeEventHandler\", e);\n            if (this.data.backUrl && this.data.backUrl != '') {\n                wx.reLaunch({\n                    url: this.data.backUrl\n                })\n            } else {\n                wx.switchTab({\n                    url: '/pages/home/index'\n                })\n            }\n        }\n    }\n})\n\n`} />\n\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Taro extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">Taro</span></p>\n                <div className=\"article-desc\">\n                    taro开发小程序过程中的一些坑：<br />\n                    1. 要跳转的路由中不能有中划线<br /><br />\n                    2. 一个文件中只能有一个class<br /><br />\n                    3. 在微信小程序中this代表组件实例，在taro中this.$scope代表组件实例<br /><br />\n                    <Code code={`\ncomponentDidMount() {\n    const query = Taro.createSelectorQuery().in(this.$scope);\n    query.select('#list-card').boundingClientRect((res) => {\n    console.log('res: ', res);\n    }).exec()\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\nimport WXNavbar from './wx/navbar';\nimport TaroBug from './taro/bug';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: '微信小程序',\n        prop: 'wx-miniApp',\n        children: [\n            {\n              label: '自定义导航栏',\n              prop: 'wx-navbar',\n              comp: function() {\n                  return <WXNavbar />;\n              },\n            },\n        ]\n    },\n    {\n        label: 'taro小程序',\n        prop: 'taro-miniApp',\n        children: [\n            {\n              label: 'taro开发过程中的坑',\n              prop: 'taro-bug',\n              comp: function() {\n                  return <TaroBug />;\n              },\n            },\n        ]\n    },\n];\n\n\nexport default function JsIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\n\nexport default class HtmlWebpackPlugin extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                参考文档：https://www.jianshu.com/p/08a60756ffda\n                <br />\n                https://www.cnblogs.com/woodk/p/8288957.html\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Concept extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">概念</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、 webpack</span></p>\n                <div className=\"article-desc\">\n                   webpack是一个现代js应用程序的静态模块打包器（module bundler）。当webpack处理应用程序时，它会递归的构建一个依赖图， 其中包含\n                   应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、 入口（entry）</span></p>\n                <div className=\"article-desc\">\n                    入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。<br /><br />\n                    配置：<br/>\n                    可以通过在 webpack 配置中配置 entry 属性，来指定一个入口起点（或多个入口起点）。默认值为 ./src。<br /><br/>\n                    简单实例：<br/>\n                    <Code code={`\n//webpack.confing.js\nmodule.exports = {\n    entry: './scr/index.js',\n}`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、 出口（output）</span></p>\n                <div className=\"article-desc\">\n                    出口属性告诉webpack在哪里输出它所创建的bundles，以及如何命名这些文件，默认值为./dist<br/><br/>\n                    简单实例：<br/>\n                    <Code code={`\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'my-fitst-webpack-demo.js',\n    }\n}`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、 loader</span></p>\n                <div className=\"article-desc\">\n                    loader让webpack能够处理js以外的文件（webpack只能理解js），loader可以将所有类型的文件转换为webpack能够处理的有效模块，\n                    然后利用webpack的打包能力，对它们进行处理。<br/><br/>\n                    在webpack中配置loader的两个目标：<br/>\n                    1. test属性： 用于标示出，应该被对应的loader进行转换的文件；<br/>\n                    2. use属性： 表示进行转换时，应该用哪个loader。<br/><br/>\n\n                    简单实例：<br/>\n                    <Code code={`\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'my-first-webpack-demo.js',\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.test$/,\n                use: 'raw-loader',\n            }\n        ]\n    }\n}\n`}/>\n                </div>\n\n\n                <p className=\"item-title\"><span className=\"textShadow\">五、 插件（plugin）</span></p>\n                <div className=\"article-desc\">\n                    插件的范围包括：从打包优化，压缩，一直到重新定义环境中的变量。<br/><br/>\n                    使用一个插件，首先需要require它，把它添加到plugins数组中。多数插件可以通过option来自定义。\n                    也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。<br/><br/>\n\n                    简单实例：<br/>\n                    <Code code={`\n// webpack.config.js\n\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装\nconst path = require('path');\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'my-first-webpack-demo.js',\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.text$/,\n                use: 'raw-loader',\n            }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/public/index.html',\n        })\n    ]\n}`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">六、 模式</span></p>\n                <div className=\"article-desc\">\n                    通过选择 development 或 production 之中的一个，来设置 mode 参数，可以启用相应模式下的 webpack 内置的优。<br/><br/>\n\n                    简单实例：<br/>\n                    <Code code={`\n// webpack.config.js\n\nmodule.exports = {\n    mode: 'production',\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackEntry extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">entry配置</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、 单个入口---简单配置</span></p>\n                <div className=\"article-desc\">\n                    entry 的写法有三种 分别是:字符串/数组/对象; 其中 字符串 和数组是 对象的一种简写形式.<br /><br />\n                    用法： entye: string | Array(string)<br /><br />\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    entry: './src/index.js', // 是下面的简写\n    entry: {\n        main: './src/index.js'\n    }\n}`} />       \n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、 对象语法</span></p>\n                <div className=\"article-desc\">\n                    用法： entry: [entryChunkName: string]: string | Array(string)<br /><br />\n                    <Code code={`\n//webpack.confing.js\nmodule.exports = {\n    entry: {\n        main: './src/index.js',\n        home: './src/pages/home/index.js',\n    }\n}`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、 多页面应用程序</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    entry: {\n        page1: './src/pages/index.js',\n        page2: './src/pages/home.js',\n        page3: './src/pages/my.js',\n    }\n}`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、 entry---数组</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    entry: ['./src/index.js', './src/pages/home.js'],\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackOutput extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">output配置</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、用法</span></p>\n                <div className=\"article-desc\">\n                    配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。<br /><br />\n                    在 webpack 中配置 output 属性的最低要求是，将它的值设置为一个对象，包括以下两点：<br />\n                    1、filename 用于输出文件的文件名。<br />\n                    2、目标输出目录 path 的绝对路径。<br /><br />\n\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'demo.js',\n    }\n}`} />       \n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、 多个入口起点的output</span></p>\n                <div className=\"article-desc\">\n                    如果配置创建了多个单独的 \"chunk\"，则应该使用占位符来确保每个文件具有唯一的名称。<br /><br />\n                    <Code code={`\n//webpack.confing.js\nmodule.exports = {\n    entry: {\n        main: './src/index.js',\n        home: './src/pages/home/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: __dirname + '/dist',\n    }\n\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackMode extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">mode</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、用法</span></p>\n                <div className=\"article-desc\">\n                    提供 mode 配置选项，告知 webpack 使用相应模式的内置优化。<br /><br />\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    mode: 'production'\n}`} />       \n                或者从 CLI 参数中传递： webpack --mode=production<br /><br />\n\n                mode的可选值： <br />\n                <span className=\"text-placeholder\" />1. development: 会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。<br /><br />\n                <span className=\"text-placeholder\" />2. production: 会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.\n\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackLoader extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">loader</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、loader</span></p>\n                <div className=\"article-desc\">\n                    loader 用于对模块的源代码进行转换。loader 可以使你在 import 或\"加载\"模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许直接在 JavaScript 模块中 import CSS文件！ <br /><br />\n                    示例：<br />\n                    <Code code={`\nnpm install --save-dev css-loader\nnpm install --save-dev ts-loader\n\n// webpack.config.js\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: 'css-loader',\n            },\n            {\n                test: /\\.ts$/,\n                use: 'ts-loader',\n            }\n        ]\n    }\n}`} />       \n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、使用loader</span></p>\n                <div className=\"article-desc\">\n                    在应用程序中有三种使用loader的方式：<br /><br />\n                    1. 配置（推荐）：在webpack.config.js文件中指定loader；<br />\n                    2. 内联：在每个import语句中显式的指定loader；<br />\n                    3. CLI：在shell命令中指定loader；<br /><br />\n\n                    <span className=\"mark\">1. 配置</span><br />\n                    module.rules 允许你在 webpack 配置中指定多个 loader。 这是展示 loader 的一种简明方式，并且有助于使代码变得简洁。同时让你对各个 loader 有个全局概览：\n                    <Code code={`\n module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          { loader: 'style-loader' },\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          }\n        ]\n      }\n    ]\n  }`} />\n                    <span className=\"mark\">2. 内联</span><br />\n                    可以在 import 语句或任何等效于 \"import\" 的方式中指定 loader。使用 ! 将资源中的 loader 分开。分开的每个部分都相对于当前目录解析。\n                    <div className=\"code-desc\">\n                        import Styles from 'style-loader!css-loader?modules!./styles.css';\n                    </div>\n                    通过前置所有规则及使用 !，可以对应覆盖到配置中的任意 loader。<br /><br />\n\n\n                    <span className=\"mark\">3. CLI</span><br />\n                    也可以通过 CLI 使用 loader：\n                    <div className=\"code-desc\">\n                        webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader';\n                    </div>\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、loader特性</span></p>\n                <div className=\"article-desc\">\n                    1. loader支持链式传递，一组链式的 loader 将按照相反的顺序执行。loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。<br/><br/>\n                    2. loader可以是同步的，也可以是异步的；<br/><br/>\n                    3. loader运行在node.js环境中，能够执行任何可能的操作；<br/><br/>\n                    4. loader接受查询参数，用于对loader传递配置；<br/><br/>\n                    5. loader也可以通过options对象进行配置；<br/><br/>\n                    6. 除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。<br/><br/>\n                    7. 插件可以为loader带来更多的特性；<br/><br/>\n                    8. loader能够产生额外的任意文件；<br/><br/>\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、解析loader</span></p>\n                <div className=\"article-desc\">\n                    loader 遵循标准的模块解析。多数情况下，loader 将从模块路径（通常将模块路径认为是 npm install, node_modules）解析。\n                    loader 模块需要导出为一个函数，并且使用 Node.js 兼容的 JavaScript 编写。通常使用 npm 进行管理，但是也可以将自定义 loader 作为应用程序中的文件。按照约定，loader 通常被命名为 xxx-loader（例如 json-loader）。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackPlugins extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">plugins</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、plugins</span></p>\n                <div className=\"article-desc\">\n                    插件目的在于解决 loader 无法实现的其他事。<br /><br />\n                    webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，\n                    并且 compiler 对象可在整个编译生命周期访问。<br /><br />\n                    \n                    <Code code={`\nconst pluginName = 'ConsoleLogOnBuildWebpackPlugin';\n\nclass ConsoleLogOnBuildWebpackPlugin {\n    apply(compiler) {\n        compiler.hooks.run.tap(pluginName, compilation => {\n            console.log(\"webpack 构建过程开始！\");\n        });\n    }\n}`} />       compiler hook 的 tap 方法的第一个参数，应该是驼峰式命名的插件名称。建议为此使用一个常量，以便它可以在所有 hook 中复用。\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、用法</span></p>\n                <div className=\"article-desc\">\n                    由于插件可以携带参数/选项，你必须在 webpack 配置中，向 plugins 属性传入 new 实例。<br /><br />\n                    <Code code={`\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); //通过 npm 安装\n\nconst config = {\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin(),\n    new HtmlWebpackPlugin({template: './src/index.html'})\n  ]\n};\n\nmodule.exports = config;`} />\n                \n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\nimport HtmlWebpackPlugin from './plugin/html-webpack-plugin';\nimport Concept from './base/concept';\nimport WebpackEntry from './base/entry';\nimport WebpackOutput from './base/output';\nimport WebpackMode from './base/mode';\nimport WebpackLoader from './base/loader';\nimport WebpackPlugins from './base/plugins';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'webpack基础',\n        prop: 'webpack-base',\n        children: [\n            {\n              label: '基本概念',\n              prop: 'webpack-concept',\n              comp: function() {\n                return <Concept />;\n              },\n            },\n            {\n              label: '入口',\n              prop: 'webpack-entry',\n              comp: function() {\n                return <WebpackEntry />;\n              },\n            },\n            {\n              label: '出口',\n              prop: 'webpack-output',\n              comp: function() {\n                return <WebpackOutput />;\n              },\n            },\n            {\n              label: 'mode',\n              prop: 'webpack-mode',\n              comp: function() {\n                return <WebpackMode />;\n              },\n            },\n            {\n              label: 'loader',\n              prop: 'webpack-loader',\n              comp: function() {\n                return <WebpackLoader />;\n              },\n            },\n            {\n              label: 'plugins',\n              prop: 'webpack-plugins',\n              comp: function() {\n                return <WebpackPlugins />;\n              },\n            },\n        ]\n    },\n    {\n        label: '插件',\n        prop: 'plugin',\n        children: [\n            {\n              label: 'html-webpack-plugin',\n              prop: 'html-webpack-plugin',\n              comp: function() {\n                return <HtmlWebpackPlugin />;\n              },\n            },\n        ]\n    },\n];\n\nexport default function WebpackIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React from 'react';\nimport LeftSider from '../comp/LeftSider';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'H5性能优化',\n        prop: 'h5-perf',\n        children: [\n            {\n              label: 'html',\n              prop: 'h5-perf-html',\n              comp: function() {\n                  return null;\n              },\n            },\n            {\n                label: 'css',\n                prop: 'h5-perf-css',\n                comp: function() {\n                    return null;\n                },\n            },\n            {\n                label: 'js',\n                prop: 'h5-perf-js',\n                comp: function() {\n                    return null;\n                },\n            },\n            {\n                label: 'image',\n                prop: 'h5-perf-image',\n                comp: function() {\n                    return null;\n                },\n            },\n            {\n                label: 'react',\n                prop: 'h5-perf-react',\n                comp: function() {\n                    return null;\n                },\n            },{\n                label: 'webpack',\n                prop: 'h5-perf-webpack',\n                comp: function() {\n                    return null;\n                },\n            },\n            {\n                label: '白屏时间',\n                prop: 'h5-perf-whiteScreen',\n                comp: function() {\n                    return null;\n                },\n            },\n            {\n                label: '首屏时间',\n                prop: 'h5-perf-firstScreen',\n                comp: function() {\n                    return null;\n                },\n            },\n        ]\n    },\n    {\n        label: '小程序性能优化',\n        prop: 'miniApp-perf',\n        children: [\n            {\n              label: '白屏时间',\n              prop: 'miniApp-perf-whiteScreen',\n              comp: function() {\n                  return null;\n              },\n            },\n            {\n                label: '首屏时间',\n                prop: 'miniApp-perf-firstScreen',\n                comp: function() {\n                    return null;\n                },\n            },{\n                label: 'js',\n                prop: 'miniApp-perf-js',\n                comp: function() {\n                    return null;\n                },\n            },\n        ]\n    },\n];\n\n\nexport default function JsIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React from 'react';\nimport LeftSider from '../comp/LeftSider';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'node基础',\n        prop: 'node-base',\n        children: [\n            {\n              label: '基础概念',\n              prop: 'node-base-note',\n              comp: function() {\n                  return null;\n              },\n            },\n        ]\n    },\n];\n\n\nexport default function JsIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import ReactNote from './pages/react';\nimport JSNote from './pages/js';\nimport HTMLNote from './pages/html';\nimport CSSNote from './pages/css';\nimport BrowserNote from './pages/browser';\nimport AlgorithmNote from './pages/algorithm';\nimport MiniAppNote from './pages/miniApp';\nimport WebpackNote from './pages/webpack';\nimport PerfNote from './pages/perf';\nimport NodeNote from './pages/node';\n\nconst routeList = [\n    {path: '/', component: ReactNote},\n    {path: '/react', component: ReactNote},\n    {path: '/js', component: JSNote},\n    {path: '/html', component: HTMLNote},\n    {path: '/css', component: CSSNote},\n    {path: '/browser-network', component: BrowserNote},\n    {path: '/algorithm', component: AlgorithmNote},\n    {path: '/miniApp', component: MiniAppNote},\n    {path: '/webpack', component: WebpackNote},\n    {path: '/perf', component: PerfNote},\n    {path: '/node', component: NodeNote},\n];\n\n\n//头部菜单栏\nconst MenuLinkDatas = [\n    {\n        label: 'React',\n        prop: 'react',\n        path: 'react',\n        id: 'react',\n    },\n    {\n        label: 'JavaScript',\n        prop: 'js',\n        path: 'js',\n        id: 'js',\n    },\n    {\n        label: 'HTML',\n        prop: 'html',\n        path: 'html',\n        id: 'html',\n    },\n    {\n        label: 'CSS',\n        prop: 'css',\n        path: 'css',\n        id: 'css',\n    },\n    {\n        label: 'webpack',\n        prop: 'webpack',\n        path: 'webpack',\n        id: 'webpack',\n    },\n    {\n        label: 'node',\n        prop: 'node',\n        path: 'node',\n        id: 'node',\n    },\n    {\n        label: '性能优化',\n        prop: 'perf',\n        path: 'perf',\n        id: 'perf',\n    },\n    // {\n    //     label: '移动端',\n    //     prop: 'mobile',\n    //     path: 'mobile',\n    //     id: 'mobile',\n    // },\n    {\n        label: '小程序',\n        prop: 'miniApp',\n        path: 'miniApp',\n        id: 'miniApp',\n    },\n    {\n        label: '浏览器&网络',\n        prop: 'browser-network',\n        path: 'browser-network',\n        id: 'browser-network',\n    },\n    {\n        label: '算法',\n        prop: 'algorithm',\n        path: 'algorithm',\n        id: 'algorithm',\n    }\n];\n\n\n\nexport {\n    routeList,\n    MenuLinkDatas,\n}","import React from 'react';\nimport './index.scss';\nimport { Menu, Dropdown } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nconst settingMenu = [\n    {\n        label: '更换主题',\n        prop: 'theme',\n    },\n];\n\nexport default class Theme extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    handleMenuClick = (data) => {\n        const { changeTheme } = this.props;\n        if (data.key === 'theme') {\n            changeTheme();\n        }\n    }\n\n    render() {\n        return (\n            <div className={`theme-component ${this.props.theme}`}>\n                <Dropdown overlay={\n                    <Menu onClick={this.handleMenuClick}>\n                        {\n                            settingMenu.map(item => <Menu.Item key={item.prop}>{item.label}</Menu.Item>)\n                        }\n                  </Menu>\n                }>\n                    <span>\n                        更多 <DownOutlined />\n                    </span>\n                </Dropdown>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport reducer from './reducer/index';\nimport thunk from 'redux-thunk'\nimport logger from 'redux-logger'\nimport { Layout } from 'antd';\n\nimport { HashRouter } from 'react-router-dom';\nimport Route from './component/route/router';\nimport MenuLink from './component/route/link';\n\nimport { MenuLinkDatas, routeList } from './config';\nimport logo from './img/logo.jpg';\nimport './index.css';\nimport './pages/comp/common/style.css';\n\nimport Theme from './component/Theme/index';\nimport { ThemeContext, themesObj } from './context/theme';\n\nconst { Header } = Layout;\n\nconst middleware = [thunk];\nif(process.env.NODE_ENV !== 'production'){\n    middleware.push(logger)\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(...middleware)));\n\n\nclass APP extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            theme: themesObj.dark,\n        }\n    }\n\n    toggleTheme = () => {\n        const { theme } = this.state;\n        this.setState({\n            theme: theme.key === 'dark' ? themesObj.light : themesObj.dark,\n        });\n    }\n\n    render() {\n        const { foreground, background, key:theme } = this.state.theme;\n        const style = {\n            color: foreground,\n            background: background,\n        }\n        return (\n            <ThemeContext.Provider value={theme}>\n                <Layout>\n                    <HashRouter>\n                        <Header className=\"header\" style={style}>\n                            <div className=\"logo-wrap\">\n                                <img className=\"logo\" src={logo} alt=\"\" />\n                            </div>\n                            <MenuLink menuList={MenuLinkDatas} />\n                            <Theme changeTheme={this.toggleTheme} style={style} theme={theme}/>\n                        </Header>\n                        <Route routeList={routeList} />\n                    </HashRouter>\n                </Layout>\n            </ThemeContext.Provider>\n        )\n    }\n}\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <APP />\n    </Provider>,\n    document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}