{"version":3,"sources":["serviceWorker.js","component/loginModel/index.js","actions/index.js","pages/home/index.js","services/home.js","pages/my/index.js","component/route/router.js","component/route/link.js","reducer/app.js","reducer/index.js","index.js"],"names":["Boolean","window","location","hostname","match","LoginModel","props","state","name","phonenumber","isLogin","inputChange","bind","confirmLogin","logOut","nextProps","console","log","e","type","this","setState","target","value","getLoginStatus","app","show","showLogout","loginStatus","className","placeholder","onChange","maxLength","onClick","React","Component","userinfo","status","data","Home","tabs","title","text","dot","videoDuanzi","showLogin","Promise","resolve","reject","axios","get","then","res","code","result","msg","catch","err","message","tab","index","initialPage","onTabClick","tabClick","map","item","key","sid","src","video","controls","width","height","top_comments_header","alt","top_comments_name","connect","dispatch","My","ContentRoute","exact","path","component","routeList","Link","linkList","id","to","activeStyle","borderBottom","activeColor","color","replace","changeLoginStatus","action","Object","assign","combineReducers","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.05552cb5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.scss';\n\nexport default class LoginModel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            phonenumber: '',\n            isLogin: false,\n        }\n        this.inputChange = this.inputChange.bind(this);\n        this.confirmLogin = this.confirmLogin.bind(this);\n        this.logOut = this.logOut.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log('nextProps',  nextProps);\n    }\n\n    inputChange(e, type) {\n        this.setState({\n            [type]: e.target.value\n        })\n    }\n\n    confirmLogin() {\n        const { name, phonenumber } = this.state;\n        const { getLoginStatus } = this.props;\n        if (name && phonenumber) {\n            getLoginStatus({\n                name,\n                phonenumber,\n            }, true);\n            this.setState({\n                isLogin: true,\n                name: '',\n                phonenumber: ''\n            })\n        }\n    }\n\n    logOut() {\n        const { getLoginStatus } = this.props;\n        getLoginStatus(null, false);\n        this.setState({\n            isLogin: false,\n        })\n    }\n\n    render() {\n        const { name, phonenumber } = this.state;\n        const { app={} } = this.props.state;\n        const { show, showLogout } = this.props;\n        if (!show) {\n            return null;\n        }\n        return (\n            <div>\n                {\n                    !app.loginStatus && (\n                        <div className=\"loginWrap\">\n                            <div className=\"loginPanle\">\n                                <div className=\"title\">登录</div>\n                                <div className=\"row\">\n                                    <div className=\"label name\">姓名</div>\n                                    <input \n                                        className=\"input\" \n                                        placeholder=\"请输入姓名\" \n                                        onChange={(e) => this.inputChange(e, 'name')} \n                                        value={name} \n                                    />\n                                </div>\n\n                                <div className=\"row\">\n                                    <div className=\"label phonenumber\">电话</div>\n                                    <input \n                                        type=\"number\" \n                                        maxLength=\"11\" \n                                        className=\"input\" \n                                        placeholder=\"请输入电话\" \n                                        onChange={(e) => this.inputChange(e, 'phonenumber')} \n                                        value={phonenumber}\n                                    />\n                                </div>\n                                <div className=\"confirmBtn\" onClick={() => this.confirmLogin()}>确认</div>\n                            </div>\n                        </div>\n                    )\n                }\n                {\n                    app.loginStatus && showLogout && <div className=\"logoutBtn\" onClick={() => this.logOut()}>退出登陆</div>\n                }\n            </div>\n        )\n    }\n}","\n\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const LOGIN_STATUS = 'LOGIN_STATUS';\n\nexport const getLoginStatus = (userinfo, status) => {\n    return {\n        type: LOGIN,\n        data: {\n            userinfo,\n            loginStatus: status,\n        }\n    }\n}","import React, { Component } from 'react';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Tabs from 'antd-mobile/es/tabs';\nimport 'antd-mobile/lib/tabs/style/css';\nimport Badge from 'antd-mobile/lib/badge';\nimport 'antd-mobile/lib/badge/style/css';\nimport { getTodayVideo } from './../../services/home';\nimport LoginModel from '../../component/loginModel';\nimport { getLoginStatus } from '../../actions';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabs: [\n                { title: <Badge>段子</Badge> },\n                { title: <Badge text={'今日(20)'}>新闻</Badge> },\n                { title: <Badge dot>笑话</Badge> },\n            ],\n            videoDuanzi: [],\n            showLogin: false,\n        };\n    }\n\n    componentDidMount() {\n        getTodayVideo().then(res => {\n            if (res) {\n                this.setState({\n                    videoDuanzi: res,\n                });\n            }\n        });\n    }\n\n\n    tabClick(tab, index) {\n        console.log(tab, index);\n        const { app={} } = this.props.state;\n        if (!app.loginStatus && (index == 1 || index == 2)) {\n            this.setState({\n                showLogin: true,\n            })\n        }\n    }\n\n    render() {\n        const { tabs, videoDuanzi } = this.state; \n        return (\n            <div className=\"homeWrap\">\n                 <Tabs tabs={tabs}\n                    initialPage={0}\n                    onChange={(tab, index) => { console.log('onChange', index, tab); }}\n                    onTabClick={(tab, index) =>  this.tabClick(tab, index)}\n                >\n                    <div className=\"tab-list\">\n                        {\n                            videoDuanzi && videoDuanzi.map(item => (\n                                <div className=\"items\" key={item.sid}>\n                                    {\n                                        item.type === 'video' && (\n                                            <div className=\"videoWrap\">\n                                                <video src={item.video} controls width=\"100%\" height=\"210px\" />\n                                                <div className=\"desc\">{item.text}</div>\n                                            </div>\n                                        )\n                                    }\n                                    <div className=\"basicInfo\">\n                                        <img className=\"avatar\" src={item.top_comments_header} alt=\"\" />\n                                        <span className=\"name\">{item.top_comments_name}</span>\n                                    </div>\n                                </div>\n                            ))\n                        }\n                    </div>\n                    <div>\n                        222\n                    </div>\n                    <div>\n                        333\n                    </div>\n                </Tabs>\n                <LoginModel {...this.props} show={this.state.showLogin} />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        state\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getLoginStatus: (userinfo={}, status) => {\n            dispatch(getLoginStatus(userinfo, status));\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import axios from 'axios';\nimport config from '../utils';\n\nconst appKey = config.appInfo.APPKEY;\n\nexport const getTodayVideo = () => {\n    return new Promise((resolve, reject) => {\n        const url = `https://api.apiopen.top/getJoke?page=1&count=10&type=video`;\n        axios.get(url).then(res => {\n            if (res && res.status === 200 && res.data) {\n                const { code, result } = res.data;\n                if (code === 200) {\n                    resolve(result);\n                }\n            } else {\n                reject({\n                    code: -1,\n                    msg: '获取每日段子出错~~~',\n                })\n            }\n        }).catch(err => {\n            console.log(err);\n            reject({\n                code: -1,\n                msg: err && err.message\n            })\n        });\n    })\n};\n\n\n","import React from 'react';\nimport './index.scss';\nimport { connect } from 'react-redux';\nimport { getLoginStatus } from '../../actions';\nimport PropTypes from 'prop-types';\nimport LoginModel from '../../component/loginModel';\n\nclass My extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"my-wrap\">\n               <LoginModel {...this.props} showLogout show />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        state,\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        getLoginStatus: (userinfo={}, status) => {\n            dispatch(getLoginStatus(userinfo, status));\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(My);\n","import React from 'react';\nimport { Route, Switch, } from 'react-router-dom';\n\nexport const ContentRoute = (props) =>\n    <Switch>\n            <Route exact path='/' component={props.routeList[0].component}/>\n            {\n                props.routeList.map((item, index) => \n                    <Route exact path={item.path} component={item.component} key={index}/>\n                )\n            }\n    </Switch>\n\nexport default ContentRoute;\n\n\n","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './link.scss';\n\nclass Link extends Component{\n\trender(){\n\t\tconst { linkList } = this.props;\n\t\treturn(\n\t\t\t<ul className=\"menuList\">\n\t\t\t\t{\n\t\t\t\t\tlinkList.map((item, index) => (\n\t\t\t\t\t\t<li className=\"list\" key={index}>\n                            <NavLink exact id={item.id} to={`/${item.path}`} activeStyle={{borderBottom: `4px solid ${item.activeColor}`,color: '#333333'}} replace>{item.text}</NavLink>\n                        </li>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</ul>\n\t\t)\n\t}\n}\n\nexport default Link;","import {LOGIN, LOGOUT } from '../actions/index';\n\n\nfunction changeLoginStatus(state, action) {\n    return Object.assign(state, action.data);\n}\n\nfunction loginStatus(state={}, action){\n    switch(action.type) {\n        case LOGIN:\n            return changeLoginStatus(state, action);\n        case LOGOUT: \n            return changeLoginStatus(state, action);\n        default: \n            return state || {};\n    }\n}\n\n\nexport default loginStatus;","import { combineReducers } from 'redux'\nimport app from './app';\n\nexport default combineReducers({ \n    app,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './pages/home';\nimport My from './pages/my';\nimport { HashRouter } from 'react-router-dom';\nimport Route from './component/route/router';\nimport Link from './component/route/link';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport reducer from './reducer/index';\nimport thunk from 'redux-thunk'\nimport logger from 'redux-logger'\n\n\nconst routeList = [\n    {path: '/', component: Home},\n    {path: '/home', component: Home},\n    {path: '/my', component: My},\n];\n\nconst linkList = [\n    {path: 'home', text: '首页', id: 'home', activeColor: '#FF0000'},\n    {path: 'my', text: '我的', id: 'my', activeColor: '#0033CC'},\n];\n\nconst middleware = [thunk];\nif(process.env.NODE_ENV !== 'production'){\n    middleware.push(logger)\n}\n\nconst composeEnhancers =window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(...middleware)));\n\nReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n          <HashRouter>\n              <Route routeList={routeList} />\n              <Link linkList={linkList} />\n          </HashRouter>\n        </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}