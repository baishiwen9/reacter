{"version":3,"sources":["img/life-cycle.jpg","img/border-image-slice.jpg","img/flex-img.jpg","img/boxModel1.jpg","img/boxModel2.jpg","img/html.jpg","img/cache-1.jpg","img/cache-2.jpg","img/cache-3.jpg","img/neihe.jpg","img/bubblesort","img/logo.jpg","serviceWorker.js","reducer/app.js","actions/index.js","reducer/index.js","component/route/router.js","context/theme.js","component/route/link.js","pages/comp/LeftSider/index.jsx","pages/comp/Code/index.jsx","pages/react/base/index.jsx","pages/react/lifeCycle/Test.jsx","pages/react/lifeCycle/index.jsx","pages/react/perf/index.jsx","component/PreviewImage/index.jsx","component/PreviewImage/EventEmitter.js","pages/react/selfComp/index.jsx","pages/react/special/pureFn.jsx","pages/react/special/pureComp.jsx","pages/react/special/hoc.jsx","pages/react/special/controlled-comp.jsx","pages/react/special/no-controlled-comp.jsx","pages/react/communication/props.jsx","pages/react/communication/context.jsx","pages/react/communication/redux.jsx","pages/react/communication/publishSubscribe.jsx","pages/react/communication/custom-redux.jsx","pages/react/note/index.jsx","pages/react/base/setState.jsx","pages/react/css/cssModules.jsx","pages/react/index.jsx","pages/js/base/this.jsx","pages/js/base/blockScope.jsx","pages/js/base/obj.jsx","pages/js/base/extend.jsx","pages/js/base/eventLoop.jsx","pages/js/base/copy.jsx","pages/js/base/diffArrowFn.jsx","pages/js/base/ajax.jsx","pages/js/base/cookie&session.jsx","pages/js/base/prototype.jsx","pages/js/HeightLevelFn/EventEmitter.jsx","component/LightImage/index.js","pages/js/HeightLevelFn/LightImage.jsx","pages/js/HeightLevelFn/memoization.jsx","pages/js/HeightLevelFn/currying.jsx","pages/js/HeightLevelFn/throttle&debounce.jsx","pages/js/lessCommon/matchMedia.jsx","pages/js/mianshi/aboutQueue.jsx","pages/js/mianshi/aboutTree.jsx","pages/js/mianshi/myFetch.jsx","pages/js/mianshi/myMap.jsx","pages/js/mianshi/myForEach.jsx","pages/js/mianshi/myNew.jsx","pages/js/mianshi/myApply.jsx","pages/js/mianshi/myCall.jsx","pages/js/mianshi/myBind.jsx","pages/js/mianshi/myLet.jsx","pages/js/mianshi/myConst.jsx","pages/js/mianshi/myInstanceof.jsx","pages/js/mianshi/myPromise.jsx","pages/js/mianshi/myCache.jsx","pages/js/mianshi/mySetInterval.jsx","pages/js/mianshi/mySelf.jsx","pages/js/mianshi/light.jsx","pages/js/mianshi/myClone.jsx","pages/js/mianshi/myFlat.jsx","pages/js/mianshi/myReduce.jsx","pages/js/base/dataType.jsx","pages/js/base/object.jsx","pages/js/mianshi/myObjectCreate.jsx","pages/js/base/compiler.jsx","pages/js/base/scope.jsx","pages/js/es6/await.jsx","pages/js/es6/set.jsx","pages/js/es6/class.jsx","pages/js/es6/module.jsx","pages/js/es6/proxy.jsx","pages/js/es6/interator.jsx","pages/js/es6/generator.jsx","pages/js/es6/weakSet.jsx","pages/js/es6/map.jsx","pages/js/base/quote.jsx","pages/js/es6/weakMap.jsx","pages/js/es6/symbol.jsx","pages/js/mode/compMode.jsx","pages/js/mianshi/myJsonp.jsx","pages/js/mianshi/mySleep.jsx","pages/js/mobile/jsBridge.jsx","pages/js/base/router.jsx","pages/js/tool/git.jsx","pages/js/tool/vim.jsx","pages/js/tool/linux.jsx","pages/js/tool/photoshop.jsx","pages/js/index.jsx","pages/html&css/html/h5/index.jsx","pages/html&css/html/h5/canvas.jsx","pages/html&css/html/h5/meta.jsx","pages/html&css/html/h5/media.jsx","pages/html&css/html/api/index.jsx","pages/html&css/css/css3/index.jsx","pages/html&css/css/css3/margin.jsx","pages/html&css/css/css3/bfc.jsx","pages/html&css/css/css3/clearFloat.jsx","pages/html&css/css/css3/selector.jsx","pages/html&css/css/css3/import.jsx","pages/html&css/css/layout/flex.jsx","pages/html&css/css/layout/2cols.jsx","pages/html&css/css/layout/3cols.jsx","pages/html&css/css/layout/grid.jsx","pages/html&css/css/layout/sanjiao.jsx","pages/html&css/css/css3/boxModel.jsx","pages/html&css/css/layout/unit.jsx","pages/html&css/css/layout/16to9.jsx","pages/html&css/css/layout/progress.jsx","pages/html&css/index.jsx","pages/browser/base/workPrinciple.jsx","pages/browser/base/browserload.jsx","pages/browser/base/cache.jsx","pages/browser/base/browser.jsx","pages/browser/network/http.jsx","pages/browser/network/https.jsx","pages/browser/network/tcp.jsx","pages/browser/safe/feSafe.jsx","pages/browser/index.js","pages/algorithm/bubbleSort.jsx","pages/algorithm/mianshi.jsx","pages/algorithm/quickSort.jsx","pages/algorithm/selectionSort.jsx","pages/algorithm/tree.jsx","pages/algorithm/index.jsx","pages/miniApp/wx/navbar.jsx","pages/miniApp/taro/bug.jsx","pages/miniApp/index.jsx","pages/webpack/plugin/html-webpack-plugin.jsx","pages/webpack/base/concept.jsx","pages/webpack/base/entry.jsx","pages/webpack/base/output.jsx","pages/webpack/base/mode.jsx","pages/webpack/base/loader.jsx","pages/webpack/base/plugins.jsx","pages/webpack/index.jsx","pages/perf/h5/css.jsx","pages/perf/index.jsx","pages/node/index.jsx","config.js","component/Theme/index.jsx","component/Drawer/index.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","changeLoginStatus","state","action","Object","assign","data","loginStatus","type","combineReducers","app","ContentRoute","props","exact","path","component","routeList","map","item","index","key","themesObj","light","foreground","background","dark","ThemeContext","React","createContext","MenuLink","currentHash","hash","menuList","this","curSelectedKeyIndex","forEach","indexOf","Consumer","theme","mode","defaultSelectedKeys","Item","id","to","replace","label","Component","SubMenu","Content","Sider","LeftSider","currentContentComp","SliderMenuList","children","comp","getCompFn","setState","contentHeight","innerHeight","width","className","collapsible","style","height","borderRight","prop","defaultOpenKeys","title","one","onClick","clickSliderItem","padding","margin","minHeight","Code","code","xmlns","viewBox","fill","fillRule","transform","cx","cy","r","stroke","strokeWidth","Base","Test","text","console","log","value","LifeCycle","update","src","lifeCycleIcon","alt","states","getList","res","i","push","Perf","list1","list2","list3","splice","Date","unshift","addItem","eventEmitter","events","cb","filter","fn","args","apply","PreviewImage","previewClass","root","canPreviewImages","getCurrentPageImages","show","selectedIndex","document","body","rootClass","Array","from","querySelectorAll","addEventListener","previewImage","bind","on","e","target","nodeName","toLowerCase","classList","isChildNode","getAttribute","selectorClassName","imageNodes","node","setAttribute","child","Node","length","contains","close","ref","dots","autoplay","infinite","defaultProps","SelfComp","Special","PureComp","HOC","ControllComp","NoControllComp","CommunicationProps","ContextComp","CommunicationRedux","href","CommunicationPublishSubscribe","Note","SetState","setTimeout","btnClick","CssModules","ReactIndex","ThisComp","BlockScope","ObjShili","ObjExtend","EventLoop","CopyMode","DiffArrowFn","Ajax","CookieSession","Prototype","EventEmitterFn","LightImage","init","createElement","innerText","gray_css","getElementsByTagName","appendChild","allImages","allImagesList","prototype","slice","call","add","remove","LightImageFn","Memoization","Currying","ThrottleAndDebounce","MatchMedia","AboutQueue","AboutTree","Myfetch","MyMap","MyNew","MyApply","MyCall","MyBind","MyLet","MyPromise","MyCache","MySetInterval","MySelf","Light","red","time","yellow","green","executor","count","Promise","resolve","timeid","setInterval","clearInterval","step","then","a","MyClone","MyFlat","MyReduce","DataType","ObjectNote","MyObjectCreate","CompilerNote","ScopeNote","MyAsyncAwait","MySet","MyClass","MyModule","MyProxy","MyInterator","MyGenerator","MyWeakSet","MyQuote","MyWeakMap","MySymbol","CompMode","MyJsonp","MySleep","JsBridge","Router","Git","Vim","Linux","Photoshop","H5Page","Canvas","Meta","Media","dataSource","propName","desc","columns","dataIndex","pagination","eventName","eventCall","Api","CSS3Page","borderImageSliceIcon","Margin","ClearFloat","SelectorNum","Import","FlexPage","FlexImage","Col2Page","Col3Page","GridLayout","SanjiaoPage","BoxModel","BoxModelIcon1","BoxModelIcon2","Unit","Layout16to9","Progress","WorkPrinciple","BrowserLoad","statusNum","keys","htmlImage","BrowserCache","position","cache1","cachekey","cache2","cache3","BrowserNote","NeiHe","HTTP","Https","TCP","FeSafe","BubbleSort","bubblesortIcon","mianshi","QuickSort","SelectionSort","TreeSort","WXNavbar","Taro","HtmlWebpackPlugin","Concept","WebpackEntry","WebpackOutput","WebpackMode","WebpackLoader","WebpackPlugins","ReactNote","MenuLinkDatas","settingMenu","Theme","handleMenuClick","changeTheme","overlay","DownOutlined","TabPane","TabsData","notes","link","DrawerComp","onClose","visible","placement","closable","defaultActiveKey","tabPosition","tab","Header","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","APP","toggleTheme","openDrawer","color","Provider","logo","ReactDOM","render","getElementById","UI","loading","hide","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b948ad36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/life-cycle.049d47c2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/border-image-slice.d249c1b0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/flex-img.7c3c19eb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/boxModel1.997166de.jpg\";","module.exports = __webpack_public_path__ + \"static/media/boxModel2.d73f52fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/html.476770c3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cache-1.140fff8c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cache-2.e7b3bd55.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cache-3.64091ad6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/neihe.135cbcbe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bubblesort.4e536486.bin\";","module.exports = __webpack_public_path__ + \"static/media/logo.126792da.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {LOGIN, LOGOUT } from '../actions/index';\n\n\nfunction changeLoginStatus(state, action) {\n    return Object.assign(state, action.data);\n}\n\nfunction loginStatus(state={}, action){\n    switch(action.type) {\n        case LOGIN:\n            return changeLoginStatus(state, action);\n        case LOGOUT: \n            return changeLoginStatus(state, action);\n        default: \n            return state || {};\n    }\n}\n\n\nexport default loginStatus;","\n\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const LOGIN_STATUS = 'LOGIN_STATUS';\n\nexport const getLoginStatus = (userinfo, status) => {\n    return {\n        type: LOGIN,\n        data: {\n            userinfo,\n            loginStatus: status,\n        }\n    }\n}","import { combineReducers } from 'redux'\nimport app from './app';\n\nexport default combineReducers({ \n    app,\n})","import React from 'react';\nimport { Route, Switch, } from 'react-router-dom';\n\nexport const ContentRoute = (props) =>\n    <Switch>\n            <Route exact path='/' component={props.routeList[0].component}/>\n            {\n                props.routeList.map((item, index) => \n                    <Route exact path={item.path} component={item.component} key={index}/>\n                )\n            }\n    </Switch>\n\nexport default ContentRoute;\n\n\n","import React from 'react';\n\nexport const themesObj = {\n    light: {\n      foreground: '#000000',\n      background: '#ffffff',\n      key: 'light',\n    },\n    dark: {\n      foreground: '#ffffff',\n      background: '#001529',\n      key: 'dark',\n    },\n};\n  \nexport const ThemeContext = React.createContext(\n    themesObj.dark // 默认值\n);","import React, { Component } from 'react';\nimport { Menu } from 'antd';\nimport { NavLink, Link } from 'react-router-dom';\nimport './link.scss';\nimport { ThemeContext } from '../../context/theme';\n\nclass MenuLink extends Component{\n\trender(){\n\t\tconst currentHash = window.location.hash;\n\t\tconst { menuList } = this.props;\n\t\tlet curSelectedKeyIndex = ['1'];\n\t\t\n\t\tmenuList.forEach((item, index) => {\n\t\t\tif (currentHash.indexOf(item.path) > -1) {\n\t\t\t\tcurSelectedKeyIndex = [(index + 1) + ''];\n\t\t\t}\n\t\t});\n\t\treturn(\n\t\t\t<ThemeContext.Consumer>\n\t\t\t\t{\n\t\t\t\t\t(theme) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Menu theme={theme} mode=\"horizontal\" defaultSelectedKeys={curSelectedKeyIndex}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmenuList.map((item, index) => <Menu.Item key={index + 1}><Link id={item.id} to={`/${item.path}`} replace>{item.label}</Link></Menu.Item>)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Menu>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t</ThemeContext.Consumer>\n\t\t)\n\t}\n}\n\nexport default MenuLink;","import React, {Component} from 'react';\nimport { Layout, Menu } from 'antd';\n\nconst { SubMenu } = Menu;\nconst { Content, Sider } = Layout;\n\nexport default class LeftSider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentContentComp: this.props.SliderMenuList[0].children[0].comp,\n        };\n    }\n\n    clickSliderItem(getCompFn) {\n        this.setState({\n          currentContentComp: getCompFn,\n        })\n    }\n\n    render() {\n        const { SliderMenuList } = this.props; \n        const { currentContentComp } = this.state; \n        const contentHeight = window.innerHeight - 60;\n        return (\n            <Layout>\n              <Sider width={200} className=\"site-layout-background\" collapsible>\n                <Menu\n                  mode=\"inline\" style={{ height: '100%', borderRight: 0 }}\n                  defaultSelectedKeys={[SliderMenuList[0].children[0].prop]}\n                  defaultOpenKeys={[SliderMenuList[0].prop]}\n                >\n                  {\n                    SliderMenuList.map((item) => {\n                        return (\n                          <SubMenu key={item.prop} title={item.label}>\n                              {\n                                  item.children.map((one) => <Menu.Item onClick={() => this.clickSliderItem(one.comp)} key={one.prop}>{one.label}</Menu.Item>)\n                              }\n                          </SubMenu>\n                        )\n                    })\n                  }\n                </Menu>\n              </Sider>\n              <Layout style={{ padding: '0 24px 24px'}}>\n                <Content className=\"site-layout-background\"\n                  style={{\n                    padding: 16,\n                    margin: 0,\n                    minHeight: contentHeight,\n                  }}\n                >\n                  { currentContentComp && currentContentComp()}\n                </Content>\n              </Layout>\n            </Layout>\n        )\n    }\n}","import React from 'react';\nimport './index.css';\n\nexport default function Code({ code, type }) {\n    return (\n        <div className=\"code-wrap\">\n            <div className=\"btn\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"54\" height=\"14\" viewBox=\"0 0 54 14\"><g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(1 1)\"><circle cx=\"6\" cy=\"6\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" strokeWidth=\".5\"></circle><circle cx=\"26\" cy=\"6\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" strokeWidth=\".5\"></circle><circle cx=\"46\" cy=\"6\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" strokeWidth=\".5\"></circle></g></svg>\n            </div>\n            <div className=\"code-type\">{type}</div>\n            <div className=\"code-text\">\n                <pre><code>{ code }</code></pre>\n            </div>\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class Base extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className='article-title'><span className=\"textShadow\">react基础</span></p>\n                <p className=\"item-title\">1. 虚拟DOM</p>\n                <div className=\"quote\">\n                    1. 虚拟DOM: Virtual DOM 可以理解为一个简单的JS对象，并且最少包含标签名( tag)、属性(attrs)和子元素对象( children)三个属性。<br /><br />\n                    2. 虚拟DOM的优势：<br />\n                        a. 具备跨平台的优势-由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。<br />\n                        b. 提升渲染性能-Virtual DOM的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。<br />\n                        c. 是一个js对象，存储在内存中。\n                </div>\n\n                <p className=\"item-title\">2. 虚拟DOM为什么会提高性能</p>\n                <div className=\"quote\">\n                虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 dom diff 算法避免了没有必要的 dom 操作，从而提高性能。<br/><br />\n                用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异把 2 所记录的差异应用到步骤 1 所构建的真正的 DOM 树上，视图就更新了。\n                </div>\n\n                <p className=\"item-title\">3. react diff原理</p>\n                <div className=\"quote\">\n                    a. 把树形结构按照层级分解，只比较同级元素。<br />\n                    b. 给列表结构的每个单元添加唯一的 key 属性，方便比较。<br />\n                    c. React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）。<br />\n                    d. 合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制。<br />\n                    e. 选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '我是子组件'\n        }\n        console.log('%c我是子组件---constructor---', 'background: red; color: white;');\n    }\n    static getDerivedStateFromProps(props, state) {\n        console.log('%c我是子组件---getDerivedStateFromProps---', 'background: red; color: white;', props, state);\n        return null;\n    }\n    componentDidMount() {\n        console.log('%c我是子组件---componentDidMount---', 'background: red; color: white;');\n    }\n    componentDidUpdate() {\n        console.log('%c我是子组件---componentDidUpdate---', 'background: red; color: white;');\n    }\n    shouldComponentUpdate() {\n        console.log('%c我是子组件---shouldComponentUpdate---', 'background: red; color: white;');\n        return true;\n    }\n    getSnapshotBeforeUpdate() {\n        console.log('%c我是子组件---getSnapshotBeforeUpdate---', 'background: red; color: white;');\n        return null;\n    }\n    render() {\n        console.log('%c我是子组件---render---', 'background: red; color: white;');\n        return (\n            <div>我是子组件---{this.props.value}</div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\nimport lifeCycleIcon from '../../../img/life-cycle.jpg';\nimport Test from './Test';\n\nexport default class LifeCycle extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0\n        }\n        console.log('%c我是---constructor---', 'background: red; color: white;');\n    }\n    static getDerivedStateFromProps(props, states) {\n        console.log('%c我是---getDerivedStateFromProps---', 'background: red; color: white;', props, states);\n        return null;\n    }\n    // componentWillMount() {\n    //     console.log('%c我是---componentWillMount---', 'background: red; color: white;');\n    // }\n    componentDidMount() {\n        console.log('%c我是---componentDidMount---', 'background: red; color: white;');\n    }\n\n    update() {\n        const {value} = this.state;\n        this.setState({\n            value: value + 1\n        });\n    }\n\n    // componentWillUpdate() {\n    //     console.log('%c我是---componentWillUpdate---', 'background: red; color: white;');\n    // }\n\n    shouldComponentUpdate() {\n        console.log('%c我是---shouldComponentUpdate---', 'background: red; color: white;'); \n        return true;\n    }\n    componentDidUpdate() {\n        console.log('%c我是---componentDidUpdate---', 'background: red; color: white;'); \n    }\n    render() {\n        console.log('%c我是---render---', 'background: red; color: white;');\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">生命周期</span></p>\n                <div className=\"quote\">\n                    生命周期主要分为三个过程：<br />\n                        <span className=\"text-placeholder\"></span>挂载<br />\n                        <span className=\"text-placeholder\"></span>更新<br />\n                        <span className=\"text-placeholder\"></span>卸载<br />\n                </div>\n                <button onClick={() => this.update()}>点击更新---{this.state.value}</button>\n                <Test value={this.state.value} />\n                <img className=\"big-img\" src={lifeCycleIcon} alt=\"\" />\n                <p className=\"item-title\"><span className=\"textShadow\">一、挂载</span></p>\n                <div className=\"quote\">\n                    当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：<br />\n                    constructor()<br /><br />\n                    static getDerivedStateFromProps()<br /><br />\n                    render()<br /><br />\n                    componentDidMount()\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、更新</span></p>\n                <div className=\"quote\">\n                    当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下<br />\n                    static getDerivedStateFromProps()<br /><br />\n                    shouldComponentUpdate()<br /><br />\n                    render()<br /><br />\n                    getSnapshotBeforeUpdate()<br /><br />\n                    componentDidUpdate()\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、卸载</span></p>\n                <div className=\"quote\">\n                    当组件从 DOM 中移除时会调用如下方法：<br />\n                    componentWillUnmount()\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、错误处理</span></p>\n                <div className=\"quote\">\n                    当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：<br />\n                    static getDerivedStateFromError()<br /><br />\n                    componentDidCatch()\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">五、新生命周期函数解析</span></p>\n                <div className=\"quote\">\n                    <span className=\"mark\">1. static getDerivedStateFromProps(props, state)</span><br /><br />\n                    getDerivedStateFromProps是为了替代componentWillReceiveProps而存在的，主要功能是将传入的props映射到state中。<br />\n                    getDerivedStateFromProps和componentWillReceiveProps两个的参数是不用的，getDerivedStateFromProps是一个静态函数，这个函数不能通过this访问到class的属性。<br />\n                    <Code code={`\nstatic getDerivedStateFromProps(nextProps, preState) {\n    if (nextProps.type !== preState.type) {\n        return {\n            type: nextProps.type //更新state\n        }\n    }\n    return null; //不更新state\n}`} />\n                    <span className=\"mark\">2. getSnapshotBeforeUpdate(prevProps, prevState)</span>\n                </div>\n                <p className=\"item-title\">props变化后会执行哪些生命周期</p>\n                <div className=\"quote\">\n                    componentWillRecevieProps<br />\n                    shouldcomponentUpdate<br />\n                    componentWillUpdate<br />\n                    render<br />\n                    componentDidUpdate\n                </div>\n\n                <p className=\"item-title\">react执行多次&执行一次的生命周期</p>\n                <div className=\"quote\">\n                    执行多次的：<br />\n                    componentWillReceiveProps<br />\n                    shouldComponentUpate<br />\n                    componentWillUpdate<br />\n                    render<br />\n                    componentDidUpdate<br /><br />\n                    执行一次的：<br />\n                    constructor<br />\n                    componentWillMount<br />\n                    componentDidMount<br />\n                    componentWillUnmount\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\nimport './index.scss';\nimport { Button } from 'antd';\n\nfunction getList() {\n    const res = [];\n    for (let i = 0; i < 1000; i++) {\n        res.push({\n            value: i,\n            id: i,\n        });\n    }\n    return res;\n}\n\nexport default class Perf extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list1: getList(),\n            list2: getList(),\n            list3: [\n                {value: 'item-1'},\n                {value: 'item-2'},\n                {value: 'item-3'},\n            ]\n        }\n    }\n\n    addItemToList() {\n        const { list1, list2 } = this.state;\n        list1.splice(499, 0, {\n            value: '我是新加的',\n            id: 'add'+ (+new Date()),\n        });\n        list2.splice(499, 0, {\n            value: '我是新加的',\n            id: 'add' + (+new Date()),\n        });\n        this.setState({\n            list1, list2\n        })\n    }\n\n    addItem() {\n        const {list3} = this.state;\n        list3.unshift({\n            value: 'item-' + (+new Date()),\n        });\n        this.setState({list3});\n    }\n\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react性能优化</span>\n                </p>\n                <div className=\"quote\">\n                    影响网页性能最大的因素是浏览器的重绘（reflow）和重排（repaint），virtual Dom就是尽可能的减少浏览器的重绘和重排。< br />\n                    可以优化的点：<br />\n                    1. 简化state<br />\n                    2. 列表中使用key<br />\n                    3. 纯函数(PureComponent, React.memo)<br />\n                    4. 使用shouldComponentUpdate\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、简化state</span>\n                </p>\n                <div>\n                    在react项目中初始化的时候要经历一个：getInitialState获取每个实例的初始化状态的过程，如果我们的state是一个很大的对象，那么在初始化的时候会比较耗时。\n                    在调用setState合并对象的时候也会比较耗时，所以，我们可以将不需要参与页面渲染的一些值抽离state，达到简化state的作用。\n                    <Code code={`\n//含有不参与页面渲染的state\nthis.state ={\n    isAPP: true,\n    isWx: false,\n    isQQ: false,\n    ...\n}`} />\n                    代码中的这些state其实都是不会参与页面的渲染，所以这些状态我可以不用放在state中。\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、渲染列表时加key</span>\n                </p>\n                <div className=\"\">\n                    在react项目中，在渲染一些列表的时候一定要加key这个属性，这样可以让react在最小范围内进行更新。\n                    参考资料： https://segmentfault.com/a/1190000017152570\n                    <br /><br />\n                    <span className=\"mark\">1. 为什么要使用key<br /></span>\n                    官方定义：key可以在DOM中的某些元素被增加或删除的时候帮助react识别哪些元素发生了变化。<br />\n                    react diff算法中是把key当做唯一id然后对比组件的value来确认是否要更新。<br /><br />\n                    <span className=\"mark\">2. 用index做key存在的问题<br /></span>\n                    如果是受控组件：使用index做key，表面看着没有问题，实际上性能会受到很大的影响。\n                    <Code code={`\nconst list = [\n    {label: '111', id: 1},\n    {label: '222', id: 2},\n    {label: '333', id: 3},\n];\n//render里渲染出的组件\n<ul>\n{list.map((item, index) => <li key={index}>{item.label}</li>)}\n</ul>\n\n// ==> 对应的html结构为\n<ul>\n    <li key=\"0\">111</li>\n    <li key=\"1\">222</li>\n    <li key=\"2\">333</li>\n</ul>\n\n//当list的顺序发生变化时：\nconst list = [\n    {label: '222', id: 2},\n    {label: '111', id: 1},\n    {label: '333', id: 3}, \n];\n\n//渲染出的html结构：\n<ul>\n    <li key=\"0\">222</li>\n    <li key=\"1\">111</li>\n    <li key=\"2\">333</li>\n</ul>\n`} />\n                在上述的代码中，key为0，1，2的三个li标签都发生了变化，所以在diff的时候都会重新渲染。<br />\n                如果对上述代码做优化，设置唯一的key：\n                <Code code={`\n//原始结构\n<ul>\n    <li key=\"111\">111</li>\n    <li key=\"222\">222</li>\n    <li key=\"333\">333</li>\n</ul>\n\n//修改位置\n<ul>\n    <li key=\"222\">222</li>\n    <li key=\"111\">111</li>\n    <li key=\"333\">333</li>\n</ul>`} />\n                此时，子组件的值和key都没有发生变化，只是位置变化了，所以只需要进行移动就行，不需要重新渲染，性能会大大的提升。\n                <br /><br />\n                {/* 实例演示：左右都为长度为1000的list，左边用index做key，右边用唯一值做key.\n                <div className=\"demo-1\">\n                    <Button onClick={() => this.addItemToList()}>中间添加一行数据</Button>\n                    <div className=\"left\">\n                        <ul>\n                            {\n                                this.state.list1.map((item, index) => <li key={index}>{item.value}</li>)\n                            }\n                        </ul>\n                    </div>\n                    <div className=\"right\">\n                        <ul>\n                            {\n                                this.state.list2.map((item, index) => <li key={item.id}>{item.value}</li>)\n                            }\n                        </ul>\n                    </div>\n                </div> */}\n                    <br /><br />\n                    在非受控组件中：使用index作为key会出问题，参考如下代码演示：<br /><br />\n                    <div className=\"demo\">\n                        <Button type=\"primary\" onClick={() => this.addItem()}>添加一行</Button>\n                            <div className=\"left\">\n                                <span className=\"mark\">用index作为key：<br /></span>\n                                {\n                                    this.state.list3.map((item, index) => (\n                                        <div key={index}>\n                                            <span>{item.value}:</span>\n                                            <input />\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                            <div className=\"right\">\n                                <span className=\"mark\">用唯一值作为key：<br /></span>\n                                {\n                                    this.state.list3.map((item, index) => (\n                                        <div key={item.value}>\n                                            <span>{item.value}:</span>\n                                            <input />\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Carousel } from 'antd-mobile';\nimport './index.scss';\nimport EventEmitter from './EventEmitter';\n\nconst eventEmitter = new EventEmitter();\n\nfunction updatePreviewImages() {\n    setTimeout(() => {\n        eventEmitter.emit('update-previewImages');\n    }, 300);\n}\n\nexport {\n    updatePreviewImages,\n};\n/**\n * 浏览大图组件\n * 使用：将组件引入当前页面即可对类名为preview-img的img生效\n * 属性：\n *   previewClass： 自定义要预览图片的className（默认为preview-img）\n *   rootClass：    只有父元素的className为rootClass的所有img（className为previewClass）才可以被预览（默认父元素为body）\n */\nexport default class PreviewImage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            selectedIndex: 0,\n            canPreviewImages: [],\n            root: document.body, //要预览图片的祖父元素，只能预览root内的图片，默认为body\n        };\n    }\n\n    componentDidMount() {\n        let { root } = this.state;\n        const { previewClass, rootClass = '' } = this.props;\n        \n        if (rootClass != '') {\n            root = Array.from(document.querySelectorAll(`.${rootClass}`));\n        }\n        const canPreviewImages = this.getCurrentPageImages(previewClass, root);\n        this.setState({\n            canPreviewImages,\n            root,\n        });\n        window.addEventListener('click', this.previewImage.bind(this, root), false);\n        eventEmitter.on('update-previewImages', this.update);\n    }\n\n    update = () => {\n        const { previewClass } = this.props;\n        const { root } = this.state;\n        this.setState({\n            canPreviewImages: this.getCurrentPageImages(previewClass, root),\n        });\n    }\n\n    // componentWillUnMount() {\n    //     window.removeEventListener('click', this.previewImage.bind(this, []));\n    //     eventEmitter.off('update-previewImages', this.update);\n    // }\n\n    previewImage(root, e) {\n        const { previewClass } = this.props;\n        if (e.target.nodeName.toLowerCase() === 'img' \n            && e.target.classList.value.indexOf(previewClass) > -1 \n                && this.isChildNode(root, e.target)) {\n            const index = e.target.getAttribute('data-preview-index');\n            console.log('---index---', index);\n            this.setState({\n                show: true,\n                selectedIndex: index,\n            });\n            // window.addEventListener('touchmove', this.preventDefault, {\n            //     passive: false\n            // });\n        }\n    }\n\n    //获取当前页面所有可以预览的图片\n    getCurrentPageImages(selectorClassName, root) {\n        const imageNodes = Array.from(document.querySelectorAll(`.${selectorClassName}`));\n        const canPreviewImages = [];\n        //从所有指定类名的img中筛选出可以预览的图片\n        imageNodes.filter((item, index) => {\n            if (item.nodeName.toLowerCase() === 'img' && this.isChildNode(root, item)) {\n                return item;\n            }\n        }).forEach((node, one) => {\n            const src = node.getAttribute('src');\n            node.setAttribute('data-preview-index', one);\n            canPreviewImages.push({\n                src,\n                index: one,\n            });\n        });\n        return canPreviewImages;\n    }\n    //阻止默认事件\n    // preventDefault(e) {\n    //     e = e || window.event;\n    //     if (e.preventDefault) {\n    //         e.preventDefault();\n    //     } else {\n    //         e.returnValue = false;\n    //     }\n    // }\n    //判断是否为子节点\n    isChildNode(root, child) {\n        let res = false;\n        if (!child instanceof Node) {\n            return false;\n        }\n        if (root instanceof Array) {\n            for (let i = 0; i < root.length; i++) {\n                if (root[i] instanceof Node && root[i].contains(child)) {\n                    res = true;\n                    break;\n                }\n            }\n        }\n        if (root instanceof Node) {\n            res = root.contains(child);\n        }\n        return res;\n    }\n\n    close() {\n        this.setState({\n            show: false,\n        });\n        // window.removeEventListener('touchmove', this.preventDefault);\n    }\n\n    render() {\n        const { show, selectedIndex, canPreviewImages } = this.state;\n        if (!show) {\n            return null;\n        }\n        return (\n            <div className=\"component-previewImage\" onClick={() => this.close()}>\n                <Carousel\n                    ref=\"previewImage\"\n                    selectedIndex={selectedIndex}\n                    dots={false}\n                    autoplay={false}\n                    infinite={false}\n                    // beforeChange={(from, to) => console.log(`slide from ${from} to ${to}`)}\n                    // afterChange={index => console.log('slide to', index)}\n                >\n                    {\n                        canPreviewImages.map((item, index) => {\n                            return (\n                                <div className=\"previewImage-wrap\" key={index}>\n                                    <img \n                                        className=\"previewImage-img\" \n                                        src={item.src} \n                                        alt=\"\" \n                                    />\n                                </div>\n                            )\n                        })\n                    }\n                </Carousel>\n            </div>\n        )\n    }\n}\n/**\n * rootClass: 只有class为rootClass的元素里面的img才可以被预览，默认是空（表示：body下的class为previewClass的img都可以预览）\n * previewClass: 要预览的图片的class类名，默认为preview-img\n */\nPreviewImage.propTypes = {\n    rootClass: PropTypes.string,\n    previewClass: PropTypes.string,\n};\n  \nPreviewImage.defaultProps = {\n    rootClass: '',\n    previewClass: 'preview-img',\n};\n","/**\n * 实现一个简单的发布订阅\n */\nexport default class EventEmitter {\n    constructor () {\n        this.events = {};\n    }\n\n    on (type, cb) {\n        if (!this.events[type]) {\n            this.events[type] = [cb];\n        } else {\n            this.events[type].push(cb);\n        }\n    }\n\n    off (type, cb) {\n        if (!this.events[type]) {\n            return;\n        } else {\n            this.events[type] = this.events[type].filter(fn => fn !== cb);\n        }\n    }\n\n    emit (type, ...args) {\n        if (this.events[type]) {\n            this.events[type].map(fn => fn.apply(this, args));\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport PreviewImage, { updatePreviewImages } from './../../../component/PreviewImage';\nimport Code from './../../comp/Code';\nimport './../../comp/common/style.css';\n\n\n\n\nexport default class SelfComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">自定义组件---预览大图</span>\n                </p>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">使用技术及方法</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    react, antd-mobile(Carousel--走马灯组件), 订阅发布功能<br />\n                    给将要预览的图片加上统一的类名（默认为preview-img）用来选取该元素。\n                </div>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">使用实例</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    点击任意图片，可以直接预览图片，并且可以左右滑动预览其他图片。<br />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939135&di=cb3dee315e0f312aab4e2fae136abca5&imgtype=0&src=http%3A%2F%2Fp0.ifengimg.com%2Fpmop%2F2018%2F0809%2FD5AD6058C6F7F813F01E0AF06364286B93F53E27_size21_w600_h399.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939136&di=84d3db1eaf300c7da975f9b77c4aeed7&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161019%2F38dae34b3f264fd39ce0de0d9ae613b7_th.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939134&di=7e4cb10cf71cd9fc5653d21ada0824db&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201403%2F20%2F20140320235526_QWwya.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939134&di=2eb3ae79c4e7d3fe858173d0e9d346cb&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201612%2F05%2F20161205101430_QjPwv.thumb.700_0.jpeg\" />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">页面中图片增加或者删除后预览</span>\n                </p>\n\n\n                <div className=\"article-desc\">\n                    用订阅发布模式实现了当前页面中有图片增多或者减少时候的更新方法:  updatePreviewImages<br />\n                </div>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">代码</span>\n                </p>\n\n                <Code code={`\n// EventEmitter.js\n\n/**\n * 实现一个简单的发布订阅\n */\nexport default class EventEmitter {\n    constructor () {\n        this.events = {};\n    }\n\n    on (type, cb) {\n        if (!this.events[type]) {\n            this.events[type] = [cb];\n        } else {\n            this.events[type].push(cb);\n        }\n    }\n\n    off (type, cb) {\n        if (!this.events[type]) {\n            return;\n        } else {\n            this.events[type] = this.events[type].filter(fn => fn !== cb);\n        }\n    }\n\n    emit (type, ...args) {\n        if (this.events[type]) {\n            this.events[type].map(fn => fn.apply(this, args));\n        }\n    }\n}\n\n\n// PreviewImage.jsx\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Carousel } from 'antd-mobile';\nimport './index.scss';\nimport EventEmitter from './EventEmitter';\n\nconst eventEmitter = new EventEmitter();\n\nfunction updatePreviewImages() {\n    setTimeout(() => {\n        eventEmitter.emit('update-previewImages');\n    }, 300);\n}\n\nexport {\n    updatePreviewImages,\n};\n/**\n * 浏览大图组件\n * 使用：将组件引入当前页面即可对类名为preview-img的img生效\n * 属性：\n *   previewClass： 自定义要预览图片的className（默认为preview-img）\n *   rootClass：    只有父元素的className为rootClass的所有img（className为previewClass）才可以被预览（默认父元素为body）\n */\nexport default class PreviewImage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            selectedIndex: 0,\n            canPreviewImages: [],\n            root: document.body, //要预览图片的祖父元素，只能预览root内的图片，默认为body\n        };\n    }\n\n    componentDidMount() {\n        let { root } = this.state;\n        const { previewClass, rootClass = '' } = this.props;\n        \n        if (rootClass != '') {\n            root = Array.from(document.querySelectorAll('.$ {rootClass}'));\n        }\n        const canPreviewImages = this.getCurrentPageImages(previewClass, root);\n        this.setState({\n            canPreviewImages,\n            root,\n        });\n        window.addEventListener('click', this.previewImage.bind(this, root), false);\n        eventEmitter.on('update-previewImages', this.update);\n    }\n\n    update = () => {\n        const { previewClass } = this.props;\n        const { root } = this.state;\n        this.setState({\n            canPreviewImages: this.getCurrentPageImages(previewClass, root),\n        });\n    }\n\n    componentWillUnMount() {\n        window.removeEventListener('click', this.previewImage.bind(this, []));\n        eventEmitter.off('update-previewImages', this.update);\n    }\n\n    previewImage(root, e) {\n        const { previewClass } = this.props;\n        if (e.target.nodeName.toLowerCase() === 'img' \n            && e.target.classList.value.indexOf(previewClass) > -1 \n                && this.isChildNode(root, e.target)) {\n            const index = e.target.getAttribute('data-preview-index');\n            console.log('---index---', index);\n            this.setState({\n                show: true,\n                selectedIndex: index,\n            });\n            window.addEventListener('touchmove', this.preventDefault, {\n                passive: false\n            });\n        }\n    }\n\n    //获取当前页面所有可以预览的图片\n    getCurrentPageImages(selectorClassName, root) {\n        const imageNodes = Array.from(document.querySelectorAll(.$ {selectorClassName}'));\n        const canPreviewImages = [];\n        //从所有指定类名的img中筛选出可以预览的图片\n        imageNodes.filter((item, index) => {\n            if (item.nodeName.toLowerCase() === 'img' && this.isChildNode(root, item)) {\n                return item;\n            }\n        }).forEach((node, one) => {\n            const src = node.getAttribute('src');\n            node.setAttribute('data-preview-index', one);\n            canPreviewImages.push({\n                src,\n                index: one,\n            });\n        });\n        return canPreviewImages;\n    }\n\n\n    //阻止默认事件\n    preventDefault(e) {\n        e = e || window.event;\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    }\n\n\n    //判断是否为子节点\n    isChildNode(root, child) {\n        let res = false;\n        if (!child instanceof Node) {\n            return false;\n        }\n        if (root instanceof Array) {\n            for (let i = 0; i < root.length; i++) {\n                if (root[i] instanceof Node && root[i].contains(child)) {\n                    res = true;\n                    break;\n                }\n            }\n        }\n        if (root instanceof Node) {\n            res = root.contains(child);\n        }\n        return res;\n    }\n\n    close() {\n        this.setState({\n            show: false,\n        });\n        window.removeEventListener('touchmove', this.preventDefault);\n    }\n\n    render() {\n        const { show, selectedIndex, canPreviewImages } = this.state;\n        if (!show) {\n            return null;\n        }\n        return (\n            <div className=\"component-previewImage\" onClick={() => this.close()}>\n                <Carousel\n                    ref=\"previewImage\"\n                    selectedIndex={selectedIndex}\n                    dots={false}\n                    autoplay={false}\n                    infinite={false}\n                    // afterChange={index => console.log('slide to', index)}\n                >\n                    {\n                        canPreviewImages.map((item, index) => {\n                            return (\n                                <div className=\"previewImage-wrap\" key={index}>\n                                    <img \n                                        className=\"previewImage-img\" \n                                        src={item.src} \n                                        alt=\"\" \n                                    />\n                                </div>\n                            )\n                        })\n                    }\n                </Carousel>\n            </div>\n        )\n    }\n}\n\n/**\n * rootClass: 只有class为rootClass的元素里面的img才可以被预览，默认是空（表示：body下的class为previewClass的img都可以预览）\n * previewClass: 要预览的图片的class类名，默认为preview-img\n */\nPreviewImage.propTypes = {\n    rootClass: PropTypes.string,\n    previewClass: PropTypes.string,\n};\n    \nPreviewImage.defaultProps = {\n    rootClass: '',\n    previewClass: 'preview-img',\n};\n\n// PreviewImage.sass\n\n.component-previewImage{\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0,0,0,.8);\n    z-index: 999;\n    left: 0;\n    top: 0;\n    .previewImage-wrap{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 100%;\n        height: 100vh;\n        overflow: hidden;\n        .previewImage-img{\n            width: 100%;\n            height: 100%;\n            object-fit: contain;\n        }\n    }\n}\n                `} />\n\n\n                <PreviewImage />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Special extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">纯函数</span>\n                </p>\n                <p className=\"item-title\">一、纯函数定义及构成原则</p>\n                \n                <div className=\"quote\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n\n                <p className=\"item-title\">二、纯函数的好处</p>\n                <div className=\"quote\">\n                    1. 使用纯函数的主要好处是方便测试，可以直接测试，给定入参，输出值；如果传入相同的参数，它们将始终产生相同的结果;<br />\n                    2. 纯函数使得代码的维护和重构会更加容易（可以放心地重构一个纯函数，不必担心没注意到的副作用搞乱了整个应用而导致终调试地狱）；<br />\n                    3. 正确的使用纯函数可以产生高质量的代码，也是一种更加干净的编码方式；<br />\n                    4. 可移植性、可复用性高；<br />\n                </div>\n\n                <p className=\"item-title\">三、纯函数在react中的使用</p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class PureComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">纯组件</span>\n                </p>\n                <p className=\"item-title\">\n                    一、纯函数定义及构成原则\n                </p>\n                \n                <div className=\"quote\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class HOC extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">高阶组件</span>\n                </p>\n                <p className=\"item-title\">\n                   一、纯函数定义及构成原则\n                </p>\n                \n                <div className=\"quote\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n\n                <p className=\"item-title\">二、纯函数的好处</p>\n\n                <p className=\"item-title\">三、纯函数在react中的使用</p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class ControllComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">受控组件</span>\n                </p>\n                <p className=\"item-title\">\n                    一、纯函数定义及构成原则\n                </p>\n                \n                <div className=\"quote\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class NoControllComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">非受控组件</span>\n                </p>\n                <p className=\"item-title\">\n                    一、纯函数定义及构成原则\n                </p>\n                \n                <div className=\"quote\">\n                    概念： 简单来说，就是一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。\n                    <br /><br />\n                    纯函数的构成四大原则为：<br />\n                    1. 给定相同的输入，它总是返回相同的输出；<br />\n                    2. 过程没有副作用（side effect）；<br />\n                    3. 没有额外的状态依赖。<br /><br />\n\n                    <span className=\"mark\">计算机科学设计原则之一：KISS（Keep It Simple, Stupid）<br /></span>\n                    纯函数在简洁性和傻瓜化方面做到了极致。\n                    <br /><br />\n\n                    纯函数也是函数式编程的基础，它完全独立于外部状态，这样就就避免了因为共享外部状态而导致的bug。<br />\n                    纯函数非常方便的进行方法级别的测试以及重构，可以让程序具有良好的扩展性及适应性。\n\n                    <Code code={`\nvar arr = [1,2,3,4,5,6];\nvar a = arr.slice(0,2); //[1, 2]\nvar b = arr.slice(0,2); //[1, 2]\n\nvar c = arr.splice(0, 2); //[1, 2]\nvar d = arr.splice(0, 2); //[3, 4]\n\n//数组的slice方法是纯函数，splice不是纯函数，splice会产生副作用。\n\nfunction getCircleArea(r) {\n    return Math.PI * Math.pow(r, 2);\n}\n\n//getCircleArea: 计算圆的面积方法，函数不依赖外部任何变量，\n只依赖半径的入参，在执行过程中也不会有任何副作用产生。`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class CommunicationProps extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react组件间的通信---props</span>\n                </p>\n                <div >\n                    在react项目开发中使用props进行父子组件间数据通信是十分常见的，也是最简单的通信方法。\n                    <br /><br />\n                    <Code code={`\nclass ChildComp extends Component {\n    constructor(props) {\n\n    }\n    render() {\n        const { text, clickCB } = this.props;\n        return (\n            <div onClick={() => clickCB()}>\n                {text}\n            </div>\n        )\n    }\n}\n\nclass FatherComp extends Component {\n    constructor(props) {\n\n    }\n    childClick() {\n        console.log('child clicked!!!');\n    }\n    render() {\n        return (\n            <div>\n                <ChildComp \n                    text=\"hello world\"\n                    clickCB={this.childClick}\n                />\n            </div>\n        )\n    }\n}\n\n`}  />\n                <br />\n                在父组件中将要传递给子组件的数据以属性的形式传给子组件，子组件可以通过this.props来获取。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ContextComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react组件间的通信---context</span>\n                </p>\n                <div className=\"quote\">\n                    官网文档： https://zh-hans.reactjs.org/docs/context.html#gatsby-focus-wrapper\n                    <br />\n                    <span className=\"mark\">Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。</span>\n                    <br /><br />\n                    1、为什么要用context？<br />\n                    在一个典型的 React 应用中，数据是通过 props 属性自上而下（由父及子）进行传递的，但这种做法对于某些类型的属性而言是极其繁琐的（例如：地区偏好，UI 主题），这些属性是应用程序中许多组件都需要的。Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。\n                    <br /><br />\n                    2、什么时候使用context？<br />\n                    Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。\n                    <br /><br />\n                    3、使用context对项目有什么影响？<br />\n                    Context 主要应用场景在于很多不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、context的API</span>\n                </p>\n                <div className=\"quote\">\n                    1. React.createContext<br />\n                    <div className=\"code-desc\">const MyContext = React.createContext(defaultValue);</div>\n                    创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 context 值。\n                    <br />\n                    只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效。\n\n                    <br /><br />\n                    2. Context.Provider<br />\n                    <div className=\"code-desc\">{'<MyContext.Provider value=\"某个值\"></MyContext.Provider>'}</div>\n                    每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。<br /><br />\n                    Provider 接收一个 value 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。<br /><br />\n\n                    当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 shouldComponentUpdate 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。\n\n                    <br /><br />\n                    3. Class.contextType<br />\n                    挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext() 创建的 Context 对象。这能让你使用 this.context 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。\n                    <br />\n\n                    <Code code={`\nclass MyClass extends React.Component {\n    componentDidMount() {\n      let value = this.context;\n      /* 在组件挂载完成后，使用 MyContext 组件的值来执行一些有副作用的操作 */\n    }\n    componentDidUpdate() {\n      let value = this.context;\n      /* ... */\n    }\n    componentWillUnmount() {\n      let value = this.context;\n      /* ... */\n    }\n    render() {\n      let value = this.context;\n      /* 基于 MyContext 组件的值进行渲染 */\n    }\n  }\n  MyClass.contextType = MyContext;`}></Code>\n<br />\n                    <Code code={`\nclass MyClass extends React.Component {\n    static contextType = MyContext;\n    render() {\n      let value = this.context;\n      /* 基于这个值进行渲染工作 */\n    }\n}`} /><br /><br />\n\n                    4. Context.Consumer<br />\n                    这里，React 组件也可以订阅到 context 变更。这能让你在函数式组件中完成订阅 context。\n                    <br /><br />\n                    这需要函数作为子元素（function as a child）这种做法。这个函数接收当前的 context 值，返回一个 React 节点。传递给函数的 value 值等同于往上组件树离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 defaultValue。\n                    <Code code={`\n<MyContext.Consumer>\n    {value => /* 基于 context 值进行渲染*/}\n</MyContext.Consumer>`} /><br /><br />\n                    5. Context.displayName<br />\n                    context 对象接受一个名为 displayName 的 property，类型为字符串。<br />\n                    <Code code={`\nconst MyContext = React.createContext(/* some value */);\nMyContext.displayName = 'MyDisplayName';\n\n<MyContext.Provider> // \"MyDisplayName.Provider\" 在 DevTools 中\n<MyContext.Consumer> // \"MyDisplayName.Consumer\" 在 DevTools 中`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class CommunicationRedux extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react组件间的通信---redux</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、学习redux</span>\n                </p>\n                <div >\n                    redux中文官网： <a href=\"https://www.redux.org.cn/\" target=\"_blank\">https://www.redux.org.cn/</a><br />\n                    <br />\n                    <span className=\"mark\">1. redux三大原则</span>\n                    <div className=\"quote\">\n                      a、单一数据源。 整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。<br /><br />\n                      b、State 是只读的。唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。<br /><br />\n                      c、使用纯函数来执行修改。为了描述 action 如何改变 state tree ，需要编写 reducers。\n                    </div>\n\n                    <span className=\"mark\">2. Action</span>\n                    <div className=\"quote\">\n                      a、Action: Action 是把数据从应用传到 store 的有效载荷。它是 store 数据的唯一来源。一般来说你会通过 store.dispatch() 将 action 传到 store。<br /><br />\n                      b、Action 本质: 是 JavaScript 普通对象<br /><br />\n                      c、对Action的约定：action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作。多数情况下，type 会被定义成字符串常量。当应用规模越来越大时，建议使用单独的模块或文件来存放 action。<br /><br />\n                      d、应该尽量减少在 action 中传递的数据<br /><br />\n                      e、Action 创建函数： 就是生成 action 的方法\n                    </div> \n\n                    <span className=\"mark\">3. Reducer</span>\n                    <div className=\"quote\">\n                      a、Reducers 指定了应用状态的变化如何响应 actions 并发送到 store 的，记住 actions 只是描述了有事情发生了这一事实，并没有描述应用如何更新 state。<br /><br />\n                      b、reducer: 就是一个纯函数，接收旧的 state 和 action，返回新的 state。<br /><br />\n                      c、由于reducer是一个纯函数，所以在reducer中不能：修改传入参数；执行有副作用的操作，如 API 请求和路由跳转；调用非纯函数，如 Date.now() 或 Math.random()。<br /><br />\n                      d、处理多个 action: reducers可以处理多个action\n                    </div>\n\n                    <span className=\"mark\">4. Store</span>\n                    <div className=\"quote\">\n                      a、Store 是把action，reducer联系到一起的对象<br /><br />\n                      b、Store 的职责：<br /><br />\n                          维持应用的 state；<br />\n                          提供 getState() 方法获取 state；<br />\n                          提供 dispatch(action) 方法更新 state；<br />\n                          通过 subscribe(listener) 注册监听器;<br />\n                          通过 subscribe(listener) 返回的函数注销监听器。\n                    </div>\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、API</span>\n                </p>\n                <div>\n                    <span className=\"mark\">1、createStore</span><br />\n                    <div className=\"code-desc\">\n                        createStore(reducer, [preloadedState], enhancer)\n                    </div>\n                    作用： 创建一个 Redux store 来以存放应用中所有的 state。<br /><br />\n                    参数： <br />\n                    reducer (Function): 接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 state 树。<br /><br />\n                    [preloadedState] (any): 初始时的 state。<br /><br />\n                    enhancer (Function): Store enhancer 是一个组合 store creator 的高阶函数，返回一个新的强化过的 store creator。这与 middleware 相似，它也允许你通过复合函数改变 store 接口。<br /><br />\n                    返回值： 保存了应用所有 state 的对象。<br /><br />\n                    <Code code={`\nimport { createStore } from 'redux'\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([action.text])\n    default:\n      return state\n  }\n}\n\nlet store = createStore(todos, ['Use Redux'])\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Read the docs'\n})\n\nconsole.log(store.getState())\n// [ 'Use Redux', 'Read the docs' ]`} /><br /><br />\n\n                        <span className=\"mark\">2、Store</span><br />\n                        Store 就是用来维持应用所有的 state 树 的一个对象。 改变 store 内 state 的惟一途径是对它 dispatch 一个 action。<br /><br />\n                        Store 方法: <br />\n                        getState(), dispatch(action), subscribe(listener), replaceReducer(nextReducer)\n                        <br /><br />\n\n                        getState(): 返回应用当前的 state 树。它与 store 的最后一个 reducer 返回值相同。<br /><br />\n                        dispatch(action): 分发 action。这是触发 state 变化的惟一途径。返回值object： 要 dispatch 的 action。<br /><br />\n                        subscribe(listener)： 添加一个变化监听器。每当 dispatch action 的时候就会执行，state 树中的一部分可能已经变化。你可以在回调函数里调用 getState() 来拿到当前 state。 返回值： 一个可以解绑变化监听器的函数。<br /><br />\n                        replaceReducer(nextReducer)： 替换 store 当前用来计算 state 的 reducer。<br /><br />\n                \n                        <span className=\"mark\">3、combineReducers(reducers)</span><br />\n                        combineReducers 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore 方法。<br /><br />\n                        参数： reducers (Object): 一个对象，它的值（value）对应不同的 reducer 函数，这些 reducer 函数后面会被合并成一个。<br /><br />\n                        返回值： (Function)：一个调用 reducers 对象里所有 reducer 的 reducer，并且构造一个与 reducers 对象结构相同的 state 对象。<br /><br />\n                        \n                        <span className=\"mark\">4、applyMiddleware(...middlewares)</span><br />\n                        使用包含自定义功能的 middleware 来扩展 Redux 是一种推荐的方式。Middleware 可以让你包装 store 的 dispatch 方法来达到你想要的目的。同时， middleware 还拥有“可组合”这一关键特性。多个 middleware 可以被组合到一起使用，形成 middleware 链。其中，每个 middleware 都不需要关心链中它前后的 middleware 的任何信息。<br /><br />\n                        参数： ...middlewares (arguments): 遵循 Redux middleware API 的函数。每个 middleware 接受 Store 的 dispatch 和 getState 函数作为命名参数，并返回一个函数。该函数会被传入 被称为 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next(action)，或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store 的 dispatch 方法作为 next 参数，并借此结束调用链。<br /><br />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、react-redux</span>\n                </p>\n                <div >\n                    react-redux API: <br /><br />\n                    <span className=\"mark\">1. Provider</span>\n                    Provider 组件的属性：store， 使组件层级中的 connect() 方法都能够获得 Redux store。正常情况下，你的根组件应该嵌套在 Provider 中才能使用 connect() 方法。<br /><br />\n                    使用实例：\n                    <Code code={`\nReactDOM.render(\n    <Provider store={store}>\n      <MyRootComponent />\n    </Provider>,\n    document.getElementById('root')\n)\n//和router配合使用\nReactDOM.render(\n    <Provider store={store}>\n      <Router history={history}>\n        <Route path=\"/\" component={App}>\n          <Route path=\"foo\" component={Foo} />\n          <Route path=\"bar\" component={Bar} />\n        </Route>\n      </Router>\n    </Provider>,\n    document.getElementById('root')\n)`} /><br /><br />\n                    <span className=\"mark\">2. connect</span><br />\n                    <div className=\"code-desc\">connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</div>\n                    connect的作用是连接 React 组件与 Redux store。连接操作不会改变原来的组件类。反而返回一个新的已与 Redux store 连接的组件类。<br />\n                    connect是一个高阶组件。<br /><br />\n                    <span className=\"mark\">connect的参数：</span><br />\n                    mapStateToProps： Function， mapStateToProps(state, [ownProps])<br /><br />\n                    如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。<br /><br />\n                    state: 是全局store里的状态，是父组件（provider）传给当前组件的props<br /><br />\n                    ownProps: 是当前组件自己的props，如果组件接受到的props变动的时候会重新调用mapStateToProps函数进行计算。<br /><br />\n                \n                    mapDispatchToProps： Function， mapDispatchToProps(dispatch, [ownProps])<br /><br />\n                    如果mapDispatchToProps是一个对象：那么每个定义在该对象的函数都将被当作 Redux action creator，对象所定义的方法名将作为属性名；每个方法将返回一个新的函数，函数中dispatch方法会将 action creator 的返回值作为参数执行。这些属性会被合并到组件的 props 中。<br /><br />\n                    如果mapDispatchToProps是一个函数：该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起。如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。<br /><br />\n                \n                    mergeProps： Function， mergeProps(stateProps, dispatchProps, ownProps)<br /><br />\n                    如果指定了这个参数，mapStateToProps() 与 mapDispatchToProps() 的执行结果和组件自身的 props 将传入到这个回调函数中。该回调函数返回的对象将作为 props 传递到被包装的组件中。你也许可以用这个回调函数，根据组件的 props 来筛选部分的 state 数据，或者把 props 中的某个特定变量与 action creator 绑定在一起。如果你省略这个参数，默认情况下返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class CommunicationPublishSubscribe extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">react组件间的通信---发布订阅模式</span>\n                </p>\n                <div>\n                    在跨多个组件之间通信如果用props来传递的话，会显得很繁琐，很冗余，中间组件不需要props也被迫要进行传递。\n                    <br /><br />\n                    使用流程： 在子组件中进行订阅，在父组件中进行发布通知让子组件进行更新。\n\n                    <Code code={`\n/**\n * 实现一个简单的发布订阅\n */\nexport default class EventEmitter {\n    constructor () {\n        this.events = {};\n    }\n\n    on (type, cb) {\n        if (!this.events[type]) {\n            this.events[type] = [cb];\n        } else {\n            this.events[type].push(cb);\n        }\n    }\n\n    off (type, cb) {\n        if (!this.events[type]) {\n            return;\n        } else {\n            this.events[type] = this.events[type].filter(fn => fn !== cb);\n        }\n    }\n\n    emit (type, ...args) {\n        if (this.events[type]) {\n            this.events[type].map(fn => fn.apply(this, args));\n        }\n    }\n}\n\n//子组件\nconst eventEmitter = new EventEmitter();\n\nclass ChildComp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: 1,\n        }\n    }\n\n    componentDidMount() {\n        eventEmitter.on('update-state', () => {\n            this.setState({\n                data: this.state.data + 1\n            })\n        })\n    }\n    render() {\n        return <div>{this.state.data}</div>\n    }\n}\n\n//父组件\nconst eventEmitter = new EventEmitter();\n\nclass FatherComp extends Component {\n    clickBtn = () => {\n        eventEmitter.emit('update-state')\n    }\n    render() {\n        return <button onClick={this.clickBtn}>click</button>\n    }\n}\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ContextComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">自己实现redux核心功能</span>\n                </p>\n                <div >\n                    参考文档：<a href=\"https://juejin.im/post/5b29025ee51d4558b64f10bf\" target=\"_blank\">https://juejin.im/post/5b29025ee51d4558b64f10bf</a>\n                    <br /><br />\n                    redux使用的基础场景：<br />\n                    <Code code={`\n//reducer：通过action用来改变state，返回一个新的state\nfunction reducer(state, action) {\n    // ...\n    return state;\n}\n\n//将reducer和store关联起来，只有通过action通知reducer改变state后同步到store，返回一个store对象\nconst store = createStore(reducer);\n\n//订阅store中的state，如果有state发生变化，则会触发监听函数\nstore.subscribe(function() {\n    store.getState();\n});\n\n//通过dispatch发送一个action\nstore.dispatch({\n    type: 'ADD',\n    data: 1\n})`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、实现createStore方法</span>\n                </p>\n                <div>\n                    <Code code={`\nfunction createStore(reducer) {\n    let state = null; //存储全部的状态\n    const events = []; //保存订阅状态变化的回调函数\n    //订阅\n    const subscribe = (fn) => {\n        events.push(fn);\n        //订阅成功后返回一个取消订阅的方法\n        return function () {\n            events = events.filter(itemFn => itemFn !== fn);\n        }\n    }\n    //获取最新的state\n    const getState = () => state;\n\n    const dispatch = (action) => {\n        //通过action执行reducer改变state\n        state = reducer(state, action);\n        //state改变后执行订阅的回调函数\n        events.forEach(fn => fn());\n    }\n    //初始化全局状态\n    dispatch({});\n    return { subscribe, getState, dispatch };\n}`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、实现combineReducers方法</span>\n                </p>\n                <div>\n                combineReducers方法会将所有的reducer合并成一个传给createStore方法。<br />\n                    <Code code={`\nfunction combineReducers(reducers) {\n    return function(state = {}, action) {\n        let newState = {};\n        for (let key in reducers) {\n            newState[key] = reducers[key](state[key], action);\n        }\n        return newState;\n    }\n}\n//使用\nconst rootReducer = combineReducers({\n    userInfoReducer,\n    adminReducer,\n});\ncreatStore(rootReducer);`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、实现bindActionCreators方法</span>\n                </p>\n                <div>\n                bindActionCreators这个方法，这是redux提供的一个辅助方法，能够让我们以方法的形式来调用action。同时，自动dispatch对应的action。它接收2个参数，第一个参数是接收一个action creator，第二个参数接收一个 dispatch 函数，由 Store 实例提供。<br/><br/>\n                <span className=\"mark\">不使用bindActionCreators方法：</span><br/><br/>\n                <Code code={`\n// TodoActions.js\n\nfunction add(text) {\n    return {\n        type: 'ADD',\n        text,\n    }\n}\n\nfunction remove(id) {\n    return {\n        type: 'REMOVE',\n        id,\n    }\n}\n\n//使用\nimport * as TodoActionCreators from './TodoActions';\n//生成action\nlet addReadAction = TodoActionCreators.add('看书');\n// 手动调用dispatch\ndispatch(addReadAction);\n\nlet removeEatAction = TodoActionCreators.remove('看书');\ndispatch(removeEatAction);\n`} /><br />\n                为了简化上述过程， 我们可以使用bindActionCreators方法。<br />\n                <Code code={`\nimport * as TodoActionCreators from './TodoActions';\n\nfunction bindActionCreators(actions, dispatch) {\n    let newActions = {};\n    for (let key in actions) {\n        newActions[key] = function() {\n            dispatch(actions[key].apply(null, arguments));\n        };\n    }\n    return newActions;\n}\n\nconst TodoAction = bindActionCreators(TodoActionCreators, store.dispatch);\nTodoAction.add('看书');\nTodoAction.remove('看书');\n`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">四、实现compose方法</span>\n                </p>\n                <div>\n                compose这个方法，这是一个redux里的辅助方法，其作用是把一系列的函数，组装生成一个新的函数，并且从后到前依次执行，后面函数的执行结果作为前一个函数执行的参数。<br /><br />\n\n                示例：<br />\n                <Code code={`\nfunction add1(str) {\n    return str + 1\n}\n\nfunction add2(str) {\n    return str + 2\n}\n\nfunction add3(str) {\n    return str + 3\n}\n\ncompose(add3(add2(add1('abc')))); //'abc123'`} /><br />\n                    如果使用compose函数会简化上述操作：<br />\n                    <Code code={`\nfunction compose(...funs) {\n    return funs.reduce((preFn, curFn) => {\n        return (..args) {\n            preFn(curFn(...args));\n        }\n    })\n}\n\nconst composeFn = compose(add3, add2, add1);\ncomposeFn('abc'); //'abc123'`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">五、所有代码</span>\n                </p>\n                <div>\n                    <Code code={`\nfunction createStore(reducer) {\n    let state = null;\n    const events = [];\n    const getState = () => state;\n    const dispatch = (action) => {\n        reducer(state, action);\n        events.forEach(fn => fn());\n    }\n    const subscribe = (fn) => {\n        events.push(fn);\n        return function() {\n            events = events.filter(itemFn => itemFn !== fn);\n        }\n    }\n    dispatch({});\n    return {\n        getState,\n        dispatch,\n        subscribe,\n    }\n}\n\nfunction combineReducers(reducers) {\n    return (state, action) => {\n        let newState = {};\n        for (let key in reducers) {\n            newState[key] = reducers[key](state[key], action);\n        }\n        return newState;\n    }\n}\n\nfunction bindActionCreators(actionsFn, dispatch) {\n    let newActions = {};\n    for (let key in actionsFn) {\n        newActions[key] = (...args) => dispatch(actionsFn[key].apply(null, args));\n    }\n    return newActions;\n}\n\nfunction compose(...fns) {\n    return fns.reduce((preFn, curFn) => {\n        return (...args) => {\n            return preFn(curFn(...args));\n        }\n    })\n}\n`} />\n                </div>\n            </div>\n        )\n    }\n}","// https://kutlugsahin.github.io/smooth-dnd-demo/\n\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './index.scss';\nimport { Button } from 'antd';\n\nexport default class Note extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">一些好用的react代码库</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、可拖拽组件：react-smooth-dnd</span>\n                </p>\n                <div className=\"article-desc\">\n                    github: https://github.com/kutlugsahin/react-smooth-dnd<br />\n                    demo: https://kutlugsahin.github.io/smooth-dnd-demo/\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、SVG组件：vivus</span>\n                </p>\n                <div className=\"article-desc\">\n                    github: https://github.com/maxwellito/vivus<br />\n                    demo: http://maxwellito.github.io/vivus/\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class SetState extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0,\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            value: this.state.value + 2\n        })\n        console.log('--- first ---',this.state.value);\n        this.setState({\n            value: this.state.value + 1\n        })\n        console.log('--- second ---', this.state.value);\n\n        setTimeout(() =>  {\n            this.setState({\n                value: this.state.value + 1,\n            })\n            console.log('--- third ---', this.state.value);\n            this.setState({\n                value: this.state.value + 1,\n            })\n            console.log('--- fifth ---', this.state.value);\n        })\n        // ===================================\n        // this.setState({\n        //     value: this.state.value + 1,\n        // });\n        // console.log('---componentDidMount---', this.state.value);\n        // this.setState({\n        //     value: this.state.value + 2,\n        // });\n        // this.setState({\n        //     value: this.state.value + 3,\n        // });\n        // this.setState({\n        //     value: this.state.value + 4,\n        // });\n\n        // document.body.addEventListener('click', () => {\n        //     this.setState({\n        //         value: this.state.value + 1,\n        //     });\n        //     console.log('---addEventListener---', this.state.value);\n        // }, false);\n\n        // setTimeout(() => {\n        //     this.setState({\n        //         value: this.state.value + 1,\n        //     });\n        //     console.log('---setTimeout---', this.state.value);\n        // }, 3000);\n\n        // setInterval(() => {\n        //     this.setState({\n        //         value: this.state.value + 1,\n        //     });\n        //     console.log('---setInterval---', this.state.value);\n        // }, 4000);\n    }\n\n    btnClick() {\n        this.setState({\n            value: this.state.value + 1,\n        });\n        console.log('---合成事件---', this.state.value);\n    }\n\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">setState</span></p>\n                <div className=\"quote\">\n                    1. setState只有在合成事件和钩子函数中是“异步”执行的；<br/><br/>\n                    2. setState在原生事件和setTimeout中是同步执行的；<br/><br/>\n                    3. setState的异步内部并不是由异步代码实现的，其实本身代码合执行的顺序都是同步的；只是因为合成事件和钩子函数的执行在更新之前，导致在合成事件和钩子函数中不能立即拿到更新后的值（可以通过setState的第二个参数callback获取最新值）。<br/><br/>\n                    <button onClick={() => this.btnClick()}>点我</button><br /><br />\n                \n                    <span className=\"mark\">为什么setTimeout中的setState是同步的？</span><br />\n                    这是由于setTimeout是异步代码，根据event loop，先会执行调用栈中同步代码，只到调用栈为空的时候，回去检查事件队列里有没有事件，如果有则拿出来执行。所以setTimeout中的setState是“同步”执行的。<br/><br/>\n                    react的事件机制：react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在jsx中常见的onClick、onChange这些都是合成事件。\n                </div>\n\n                <p className=\"item-title\">react的哪些生命周期中可以setState</p>\n                <div className=\"quote\">\n                    componentDidMount可以<br />\n                    shouldComponentUpdate 和 componentWillUpdate中禁止调用setState，否则会形成一个死循环直至浏览器崩溃<br />\n                    componentDidUpdate中可以，效果和componentDidMount一样<br />\n                    componentWillReceviceProps中可以调用setState\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class CssModules extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className='article-title'><span className=\"textShadow\">CSS Modules</span></p>\n                <div className=\"quote\">\n                    css模块化的解决方案主要有两类：<br />\n                    1. inline style: 这种方案彻底放弃css，使用js或者json来写样式，能给css提供js同样强大的模块化能力。但是缺点也很明显，inline style几乎不能利用css本身的特性，如级联，媒体查询等。<br />\n                    2. CSS Modeules: 依然使用css，但使用js来管理样式依赖。css modules能最大化结合现有css生态和js模块化能力。\n                </div>\n                <h3>1. CSS模块化遇到的问题</h3>\n                <div className=\"quote\">\n                    css模块化重要的是解决了：css样式的导入和导出。<br />\n                    1. 全局污染：css使用全局选择器机制来设置样式，优点是方便重写，缺点是所有的样式都是全局生效，样式可能被错误覆盖。<br />\n                    2. 命名混乱：由于全局污染的问题，为了避免样式冲突，选择器越来越负责，容易形成不同的命名风格，很难统一，样式变多后，命名将更加混乱。<br />\n                    3. 依赖管理不彻底：组件应该相互独立，引入一个组件时，应该只引入它所需的css样式。<br />\n                    4. 无法共享变量：复杂组件要使用js和css来共同处理样式，就会造成有些变量在js和css中冗余，而预编译语言不能提供跨js和css共享的这种能力。<br />\n                    5. 代码压缩不彻底：由于移动端网络的不确定性，现代工程项目对css的压缩要求已经到了变态的程度，很多压缩工具魏莉节省一个字节，会把16px转成1pc。\n                </div>\n\n                <h3>2. CSS Modules模块化方案</h3>\n                <div className=\"quote\">\n                    css modules内部通过icss来解决样式的导入和导出两个问题，分别对应的:import和:export两个新增的伪类。\n                    <Code code={`\n:import(\"path/to/dep.css\") {\n    localAlias: keyFromDep;\n    /* ... */\n}\n\n:export{\n    exportedKey: exportedValue;\n}`} />\n                    1. 启用css Modules<br />\n                    <Code code={`\n// webpack.config.js\ncss?modules&localIdentName=[name]__[local]-[hash:base64:5]`} />\n                    加上上述代码modules即为启用，其中localIdentName是设置生成样式的命名规则。<br />\n                    css modules对css中的class名都做了处理，使用对象来保存原class和混淆后class的对应关系。通过这些简单的处理，css modules实现了以下几点：<br />\n                    a. 所有样式都是局部化的，解决了命名冲突和全局污染问题<br />\n                    b. class名的生成规则配置灵活，可以以此来压缩class名<br />\n                    c. 只需引用组件的js，就能搞定组件所有的js和css<br />\n                    d. 依然是css，学习成本几乎为0<br /><br />\n\n                    2. 样式默认局部<br />\n                    使用了css modules后，就相当于给每个class名外加了:local， 以此来实现样式的局部化。<br />\n                    <Code code={`\n.normal{ color: green; }\n// 等价于\n:local(.normal) { color: green; }\n//定义全局样式\n:global(.btn) {color: red;}\n//定义多个全局样式\n:global{\n    .link { color: green; }\n    .box { color: yellow; }\n} \n`} />\n                    3. 使用composes来组合样式<br />\n                    对于样式复用，css modules提供了唯一的方式来处理---composes组合。<br />\n                    <Code code={`\n// components/button.css\n.base{ /* 所有通用的样式 */}\n.normal{\n    composes: base;\n    // 其他样式\n}\n.disabled{\n    composes: base;\n    // 其他样式\n}\n// 使用\nimport styles from './button.css';\nbuttonEle.outerHTML = '<button class={styles.normal}>submit</button>';\n`} />\n                    composes组合外部文件中的样式：<br />\n                    <Code code={`\n// settings.css\n.primary{ color: red; }\n// components/button.css\n.base{ /* 所有通用的样式 */}\n.primary{\n    composes: base;\n    composes: $primary from './settings.css';\n    // 其他样式\n}`} />\n                对于大多数项目来说，有了composes后，已经不再需要预编译处理器了，但是如果想用的话， 由于composes不是标准的css语法，编译会报错，此时就只能使用预处理器自己的语法来做样式复用了。<br /><br />\n\n                4. class 命名技巧<br />\n                css modules的命名规范是从BFM（block name - element name - modifier name）扩展而来。具体如下：<br />\n                a. Block: 对应模块名，如dialog<br />\n                b. Element: 对应模块中的节点名，如confirm button<br />\n                c. Modifier: 对应节点相关的状态，如disabled，highlight <br /><br />\n\n                5. 实现css与js变量共享<br />\n                使用:export关键字可以将css中的变量输出到js中：<br />\n                <Code code={`\n// config.scss\n$primary-color: red;\n:export {\n    primaryColor: $primary-color;\n}\n\n// app.js\nimport style from 'config.scss';\nconsole.log(style.primaryColor);`} />\n                </div>\n                <h3>3. CSS Modules使用技巧</h3>\n                <div className=\"quote\">\n                    css modules是对现有的css做减法。可遵循如下原则：<br />\n                    a. 不使用选择器，只是用class名来定义样式；<br />\n                    b. 不层叠多个class，只使用一个class把所有样式定义好；<br />\n                    c. 所有样式通过composes组合来实现复用；<br />\n                    d. 不嵌套。\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\nimport BaseNote from './base/index';\nimport LifeCycle from './lifeCycle/index';\nimport PerfState from './perf/index';\nimport SelfComp from './selfComp/index';\n\n\nimport PureFn from './special/pureFn';\nimport PureComp from './special/pureComp';\nimport HOC from './special/hoc';\nimport ControllComp from './special/controlled-comp';\nimport NoControllComp from './special/no-controlled-comp';\n\nimport Props from './communication/props';\nimport Context from './communication/context';\nimport ReduxComp from './communication/redux';\nimport PublishSubscribe from './communication/publishSubscribe';\nimport CustomRedux from './communication/custom-redux';\n\n\nimport Note from './note/index';\nimport SetState from './base/setState';\nimport CssModules from './css/cssModules';\n\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'react',\n        prop: 'react-base',\n        children: [\n          {\n            label: 'react基础',\n            prop: 'react-base',\n            comp: function() {\n              return <BaseNote />;\n            },\n          },\n            {\n              label: 'setState',\n              prop: 'set-state',\n              comp: function() {\n                return <SetState />;\n              },\n            },\n        ]\n    },\n    {\n      label: 'react生命周期',\n      prop: 'react-lifeCycle',\n      children: [\n          {\n            label: '生命周期函数',\n            prop: 'lifeCycle',\n            comp: function() {\n              return <LifeCycle />;\n            },\n          },\n      ]\n    },\n    {\n      label: 'react性能优化',\n      prop: 'react-perf',\n      children: [\n          {\n            label: '性能优化',\n            prop: 'perf',\n            comp: () => <PerfState />,\n          },\n      ]\n    },\n    {\n      label: 'react通信方案',\n      prop: 'react-communication',\n      children: [\n          {\n            label: 'props',\n            prop: 'communication-props',\n            comp: () => <Props />,\n          },\n          {\n            label: 'context',\n            prop: 'communication-context',\n            comp: () => <Context />,\n          },\n          {\n            label: 'publish-subscribe',\n            prop: 'communication-publish-subscribe',\n            comp: () => <PublishSubscribe />,\n          },\n          {\n            label: 'redux',\n            prop: 'communication-redux',\n            comp: () => <ReduxComp />,\n          },\n          {\n            label: '实现redux核心',\n            prop: 'custom-redux',\n            comp: () => <CustomRedux />,\n          },\n      ]\n    },\n    {\n      label: 'react专业术语',\n      prop: 'react-special',\n      children: [\n          {\n            label: '纯函数',\n            prop: 'pure-fn',\n            comp: () => <PureFn />,\n          },\n          {\n            label: '纯组件',\n            prop: 'pure-comp',\n            comp: () => <PureComp />,\n          },\n          {\n            label: '高阶组件',\n            prop: 'hoc',\n            comp: () => <HOC />,\n          },\n          {\n            label: '受控组件',\n            prop: 'controll-comp',\n            comp: () => <ControllComp />,\n          },\n          {\n            label: '非受控组件',\n            prop: 'no-controll-comp',\n            comp: () => <NoControllComp />,\n          },\n      ]\n    },\n    {\n      label: '自定义组件',\n      prop: 'self-comp',\n      children: [\n          {\n            label: '预览大图',\n            prop: 'preview-imgs',\n            comp: () => <SelfComp />,\n          },\n      ]\n    },\n    {\n      label: '好用的react库',\n      prop: 'good-react',\n      children: [\n          {\n            label: '好用的react库',\n            prop: 'react-good-comp',\n            comp: () => <Note />,\n          },\n      ]\n    },\n    {\n      label: 'React-CSS',\n      prop: 'react-css',\n      children: [\n          {\n            label: 'CSS Modules',\n            prop: 'react-css-modules',\n            comp: () => <CssModules />,\n          },\n      ]\n    }\n\n];\n\nexport default function ReactIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\nimport './../../comp/common/style.css';\n\nexport default class ThisComp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">javaScript中this解读</span>\n                </p>\n\n                <p className=\"item-title\">1. 为什么使用this</p>\n\n                <div className=\"quote\">\n                    this提供了一种更加优雅的方式来隐式“传递”一个对象的引用，因此可以将API设计的更加简洁并且易于复用。\n                </div>\n\n                <p className=\"item-title\">2. this绑定</p>\n\n                <div className=\"quote\">\n                    <span className=\"mark\">this是在运行时候进行绑定的，并不是在编写时绑定的，它的上下文取决于函数调用时的各种条件。</span>\n                    <br />\n                    this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\n                    <br />\n                    当一个函数被调用时，会创建一个活动记录（有时候会称为执行上下文）。<br />\n                    这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式，传入的参数等信息，this就是这个记录中的一个属性，会在函数执行的过程中用到。\n                </div>\n\n                <p className=\"item-title\">3. 调用位置</p>\n                <div className=\"quote\">\n                    <span className=\"mark\">调用位置就是函数在代码中被调用的位置（不是申明的位置）</span>\n                    <br /><br />\n                    寻找调用位置就是寻找“函数被调用的位置”，最重要的就是分析调用栈，我们关心的调用位置就是在当前正在执行的函数的前一个调用中。\n                </div>\n                <Code code={`\nfunction a() {\n    //当前的调用栈是： a\n    //当前调用位置是全局作用域\n    console.log('---a---', this); //所以此时this为window\n    b(); // b的调用位置\n}\n\nfunction b() {\n    //当前的调用栈是：a --> b\n    //当前的调用位置是在a中\n    console.log('---b---', this); //所以此时this为window\n    c(); // c的调用位置\n}\n\nfunction c() {\n    //当前的调用栈是：a --> b --> c\n    //当前的调用位置是在b中\n    console.log('---c---', this); //所以此时this为window\n}\n\na(); //a的调用位置\n                `} />\n\n\n                    <p className=\"item-title\">4. this的绑定规则</p>\n                    <div className=\"quote\">\n                        1. 默认绑定： <br />\n                        最常用的函数调用类型：独立函数调用。可以把这条规则看作是无法应用其他规则时的默认规则。\n                    </div>\n                <Code code={`\nvar text = 'hello world';\nfunction a() {\n    console.log('---a---', this, this.text);\n    //this为window\n    //this.text: 'hello world'\n}\n\na();\n//在上面的代码中函数调用时应用了this的默认绑定，因此this会指向全局对象\n                `} />\n                <div className=\"quote\">\n                    分析上述代码：<br />\n                    函数a的调用位置：a是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定，无法使用其他的规则。\n                </div>\n\n                <div className=\"quote\">\n                    <span className=\"mark\">如果使用了严格模式，则不能将全局对象用于默认绑定，因此this会绑定到undefined。</span><br/>\n                    虽然this的绑定规则完全取决于调用位置，但是只有a()运行在非严格模式下，默认绑定才能绑定到全局对象上。\n                </div>\n\n                <Code code={`\nvar text = 'hello';\nfunction a() {\n    'use strict';\n    console.log('---a---', this, this.text);\n    //此时，this为undefined\n    //使用严格模式会影响this的绑定\n}\na(); //报错`} />\n               <div className=\"quote\">\n                    <span className=\"mark\">如果在严格模式下调用a方法，则不会影响this的默认绑定：</span><br/>\n                </div> \n                <Code code={`\nvar text = 'hello';\nfunction a() {\n    console.log('---a---', this, this.text);\n    //this为window\n    //this.text为hello，在严格模式下运行不会影响this的绑定\n}\n(function(){\n    \"use strict\";\n    a(); \n})()`}/>\n                    \n                    <div className=\"quote\">\n                        2. 隐式绑定: <br />\n                        调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含。\n                    </div>\n                    <Code code={`\nvar text = 'hello';\nfunction a() {\n    console.log('---a---', this, this.text);\n}\nvar obj = {\n    text: 'world',\n    a: a,\n};\nobj.a(); //此时this指向obj，this.text为world\n`} />\n                <div className=\"quote\">\n                    上述代码中，a的调用位置会使用obj上下文来引用函数，因此可以说函数被调用的时候obj对象“拥有”或者“包含”函数的引用。\n                    <br /><br />\n                    函数a在被调用的时候，前面确实加上了对obj的引用。当函数引用有上下文对象时，隐式绑定规则会把函数调用中的this绑定到这个上下文对象上。\n                    <br /><br />\n                    <span className=\"mark\">\n                        对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。\n                    </span>\n                </div>\n                <Code code={`\nvar text = 'hello';\nfunction a() {\n    console.log('---a---', this, this.text);\n}\n\nvar obj1 = {\n    text: 'world',\n    b: {\n        text: '你好',\n        a: a\n    }\n};\n\nobj1.b.a();\n//this为obj1.b\n//this.text为'你好'\n//多层级的对象嵌套时只有当前的上面的一层起作用`} />\n\n                <div className=\"quote\">\n                    <span className=\"mark\">隐式绑定存在的问题：隐式丢失</span>\n                    <br />\n                    在某些情况下，隐式绑定会出现丢失的情况，也就是说它会应用默认绑定，从而把this绑定到全局对象或者undefined上（取决于是否为严格模式）。\n                </div>\n                <Code code={`\nvar text = 'hello';\n\nfunction a() {\n    console.log('---a---', this, this.text);\n}\n\nvar obj = {\n    text: 'world',\n    a: a,\n}\n\nvar b = obj.a;\n\nb();\n//this为window\n//this.text为hello`} /> \n                <div className=\"quote\">\n                    虽然b是obj.a的一个引用，实际上，b引用的是a函数本身，因此此时的b()其实是一个不带任何修饰的函数调用，因此使用了默认绑定规则。                    \n                </div>\n                <div className=\"quote\">\n                    另外一种情况就是在传入回调函数的时候：\n                    <Code code={`\nvar text = 'hello';\nfunction a() {\n    console.log('---a---', this, this.text);\n}\n\nfunction doFn(fn) {\n    fn(); //调用位置\n}\n\nvar obj = {\n    text: 'world',\n    a: a,\n};\n\ndoFn(obj.a);\n//this 为window\n//this.text为world`} />\n                这是因为在doFn(obj.a)调用的时候obj.a其实就是一种隐式赋值，和上述例子一样。\n                </div>\n\n\n                <div className=\"quote\">\n                    3. 显式绑定: <br />\n                    通过使用call和apply来实现显式绑定。\n                </div>\n                <Code code={`\nvar text = 'hello';\n\nfunction a() {\n    console.log('---a---', this, this.text);\n}\n\nvar obj = {\n    text: 'world',\n    a: a,\n}\n\nvar b = obj.a;\n\nb.call(obj);\n//this为obj\n//this.text为world `} />\n\n                <div className=\"quote\">\n                    4. new绑定: <br />\n                    在js中，构造函数只是一些使用new操作符被调用的函数。<br />\n\n                    <span className=\"mark\">使用new时执行的操作：</span><br />\n                    1. 创建一个全新的对象；<br />\n                    2. 这个新对象会被执行[[Prototype]]连接；<br />\n                    3. 这个新对象会绑定到函数调用的this；<br />\n                    4. 如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。\n                </div>\n                <Code code={`\nfunction a(text) {\n    this.text = text;\n}\nvar bar = new a('hello');\n\nconsole.log(bar.text);\n//hello`} />\n            <div className=\"quote\">在使用new来调用a方法时，我们会构建一个新对象并把它绑定到a调用的this上。</div>\n            <div className=\"line\" />\n            \n            <div className=\"quote\">\n                规则的优先级: <br />\n                依次是new，显式绑定，隐式绑定，默认绑定\n            </div>\n            <div className=\"quote\">\n                判断this: <br/ >\n                1. 函数是否在new中调用，如果是的话this绑定的是新创建的对象；<br />\n                2. 函数是否通过call、apply显式绑定，如果是的话this绑定的是指定的对象；<br />\n                3. 函数是否在某个上下文对象中调用（隐式绑定），如果是this绑定的是那个上下文对象；<br />\n                4. 如果以上3条都不符合的时候，使用默认绑定。如果在严格模式下就绑定到undefined上，否则绑定到全局对象。\n            </div>\n            <div className=\"quote\">\n                绑定this的例外情况: <br />\n                1. 被忽略的this：\n                <Code code={`\nfunction foo() {\n    console.log(this.a);\n}\nvar a = 2;\nfoo.call(null); // 2\nfoo.call(undefined); //2`} />\n                如果把null，undefined作为this的绑定对象传入call，apply或者bind，这些值会在调用的时候忽略，实际应用是默认绑定规则。\n                <br />\n                <br />\n                2. 间接引用<br />\n                在间接引用时也会使用默认绑定规则， 间接引用最容易在赋值时发生：\n                <Code code={`\nfunction foo() {\n    console.log(this.a);\n}\nvar a = 2;\nvar o = {a: 3, foo: foo};\nvar p = {a: 4};\n\no.foo(); // 3, 隐式绑定\n(p.foo = o.foo)(); // 2\np.foo(); // 4`} />\n                p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo或者o.foo, 所以使用的是默认绑定。<br />\n                调用p.foo()时使用的是隐式绑定。\n            </div>\n\n            <p className=\"item-title\">5. 箭头函数的this</p>\n\n            <div className=\"quote\">\n                箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定this，具体来说，箭头函数会继承外层函数调用的this绑定。\n                <Code code={`\nvar a = 1;\nvar b = 2;\n\nvar c = function() {\n\tconsole.log('test-1:',this.a);\n\tconsole.log('test-2:', a);\n\tconsole.log('test-3:', this.b);\n\tconsole.log('test-4:', b);\n\tconsole.log('test-this-1:', this);\n\n\tvar a = 11;\n\tvar b = 22;\n\n\treturn () => {\n\t\tconsole.log('test-5:', this.a);\n\t\tconsole.log('test-6:', a);\n\t\tconsole.log('test-7:', this.b);\n\t\tconsole.log('test-8:', b);\n\t\tconsole.log('test-this-2:', this);\n\t}\n}\n\nvar d = c();\nd();\n`} />\n                <br />上述代码执行的时候没有对c方法进行this的绑定（显式， 隐式，new），所以会进行默认绑定，this为window。\n                <br />输出的结果为：<br />\n                <Code code={`\n// test-1: 1 ==> this进行了默认绑定，this为window\n// test-2: undefined ==> c函数里的a进行了变量提升，赋值为undefined\n// test-3: 2 ==> this进行了默认绑定，this为window\n// test-4: undefined  ==> c函数里的a进行了变量提升，赋值为undefined\n// test-this-1: window ==> this进行了默认绑定，this为window\n\n//箭头函数执行结果\n\n// test-5: 1 ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为window\n// test-6: 11 ==> 根据作用域链向上查找，箭头函数中没有变量a, 向上一级查找\n// test-7: 2 ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为window\n// test-8: 22 ==> 根据作用域链向上查找，箭头函数中没有变量b, 向上一级查找\n// test-this-2: window ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为window`} />\n\n            <br /><br/>\n            如果调用方式换为如下：\n            <Code code={`\nvar d = c();\nvar obj = {\n    a: 'aaa',\n    b: 'bbb',\n    d: d,\n};\nobj.d();`} />\n            在调用c方法的时候也是进行了this的默认绑定，所以this为window，结果和上面的一致。\n            箭头函数中的this也是为window，因此当前词法作用域的this为window。<br /><br/>\n            如果调用方式换为如下：\n            <Code code={`\nvar d = c();\nvar obj = {\n    a: 'aaa',\n    b: 'bbb',\n    d: function() {\n        d();\n    },\n};\nobj.d();`} />输出结果和上面一致。\n                <br /><br/>\n                如果调用方式换为如下：\n                <Code code={`\nvar obj = {\n    a: 'aaa',\n    b: 'bbb',\n    c: c,\n};\nvar d = obj.c();\nd();\nd.call(null);`} />\n                此时在调用c方法的时候进行了this的隐式绑定，因此this指向obj。箭头函数的this也会指向obj。\n                输出的结果为：\n                <Code code={`\n// test-1: aaa ==> this进行了隐式绑定，this为obj\n// test-2: undefined ==> c函数里的a进行了变量提升，赋值为undefined\n// test-3: bbb ==> this进行了隐式绑定，this为obj\n// test-4: undefined  ==> c函数里的a进行了变量提升，赋值为undefined\n// test-this-1: obj ==> this进行了默认绑定，this为obj\n\n//箭头函数执行结果\n\n// test-5: aaa ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为obj\n// test-6: 11 ==> 根据作用域链向上查找，箭头函数中没有变量a, 向上一级查找\n// test-7: bbb ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为obj\n// test-8: 22 ==> 根据作用域链向上查找，箭头函数中没有变量b, 向上一级查找\n// test-this-2: obj ==> 箭头函数中的this获取的是当前词法作用域中的this，因此为obj`} />\n                <br />\n                上述代码中使用d.call(null)来视图修改this，但是箭头函数是不绑定this的，所以此操作是无效的。\n                <br /><br/>\n                参考资料：《你不知道的JavaScript-上卷》\n            </div>\n\n\n            <p className=\"item-title\">6. 以下方法调用后，分别输出什么？</p>\n                <Code code={`\n// 方法一\nfunction Foo() { \n    console.log(1);\n    return this;\n}\n// 方法二\nFoo.getName = function() {\n    console.log(2);\n    return this;\n}\n// 方法三\nvar getName = function() {\n    console.log(3);\n}\n// 方法四\nfunction getName() {\n    console.log(4);\n}\n\nFoo.getName(); // 2, this = Foo\ngetName(); // 3\nFoo().getName(); // 1 this = window  3\ngetName(); // 3\nnew Foo.getName(); // 2 this为Foo.getName示例\nFoo.getName().getName(); // 2 this = Foo 2\n`} ></Code>\n                <div className=\"quote\">\n                    分别输出的结果是：<br />\n                    Foo.getName() : 调用方法二，输入2， 此时this为Foo对象，因为this进行了显式绑定<br /><br />\n                    getName(): 调用方法三，首先因为进行了函数申明提升（优先级高），后面方法三getName又进行了变量提升，导致getName被方法三覆盖， 所以输出3<br /><br />\n                    Foo().getName()： 首先执行方法一Foo(), 输出1， 返回的this为window， 所以在调用window.getName(),即调用方法三，输出3<br /><br />\n                    getName(): 调用方法三，首先因为进行了函数申明提升（优先级高），后面方法三getName又进行了变量提升，导致getName被方法三覆盖， 所以输出3<br /><br />\n                    new Foo.getName(): 调用方法二，输出2， 返回的this为Foo.getName的实例<br /><br />\n                    Foo.getName().getName()：首先调用方法二，输出2， 返回的this为Foo，所以再次调用Foo.getName()输出2\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\n\n\n\nexport default class BlockScope extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">块级作用域解析</span>\n                </p>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">javaScript中的块作用域</span>\n                </p>\n                <div className=\"quote\">\n                    具有块作用域的代码块、属性有：<br />\n                    1. with<br />\n                    2. try/catch语句<br />\n                    3. let<br />\n                    4. const\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、with</span>\n                </p>\n                <div className=\"quote\">\n                    用with从对象中创建出来的作用域仅仅在with声明中有效：<br />\n                    <Code code={`\nwith(window.location) {\n    console.log(href);\n    console.log(host);\n    console.log(origin);\n}\nconsole.log(href); //报错`} />\n                    在with作用域的外部是访问不到with内部的变量\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、try/catch</span>\n                </p>\n                <div className=\"quote\">\n                    在try/catch语句中的catch分句会创建一个块作用域，其中声明的变量只能在catch内部有效。\n                    <br /><br />\n                    <Code code={`\ntry {\n    undefined(); //执行一个非法操作来强制制造一个异常\n} catch (err) {\n    console.log(err);\n}\nconsole.log(err); //报错`} />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、let</span>\n                </p>\n                <div className=\"quote\">\n                    let关键字可以将变量绑定到所在的任意作用域中。换句话说就是，let为其声明的变量隐式的劫持了所在的快作用域。\n                    用let将变量加在一个已经存在的块作用域上的行为是隐式的。\n                    <br /><br />\n                    使用let进行的声明不会在块级作用域中进行提升。声明的代码被运行之前，声明并不“存在”。\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">四、const</span>\n                </p>\n                <div className=\"quote\">\n                    在es6中除了let外，还引入了const，同样可以用来创建块作用域变量，但是用const声明的变量的值是一个常量。\n                    声明之后任何试图修改值的操作都会引起错误。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ObjShili extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">对象实例化过程及方法</span></p>\n                <div className=\"article-desc\">\n                    对象的实例化方法主要有：<br />\n                        <span className=\"text-placeholder\"></span>工厂模式<br />\n                        <span className=\"text-placeholder\"></span>构造函数模式<br />\n                        <span className=\"text-placeholder\"></span>原型链模式<br />\n                        <span className=\"text-placeholder\"></span>构造函数模式和原型链模式结合--混合模式<br />\n\n                </div>\n                <p className=\"item-title\"><span className=\"textShadow\">一、工厂模式</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction obj1(name,age) {\n    let obj = {};\n    obj.name = name;\n    obj.age = age;\n    obj.sayName = function() {\n        return obj.name;\n    }\n    return obj;\n}\nvar person1 = obj1('xixi', 18);\n`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、构造函数模式</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction obj2(name, age) {\n    this.name = name;\n    this.age = age;\n    this.sayName = function() {\n        return name;\n    }\n}\nvar person2 = new obj2('xixi', 18);\n`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、原型链模式</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction obj3() {}\n\nobj3.prototype.name = 'xixi';\nobj3.prototype.age = 18;\nobj3.prototype.sayName = function() {\n    return this.name;\n}\n\nvar person3 = new obj3();\n`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、混合模式</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction obj4(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nobj4.prototype.sayName = function() {\n    return this.name;\n}\n\nvar person4 = new obj4('xixi', 18);`} />\n                </div>\n                \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ObjExtend extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">对象继承方法</span></p>\n                <div className=\"quote\">\n                    对象的实例化方法主要有：<br />\n                        <span className=\"text-placeholder\"></span>原型继承<br />\n                        <span className=\"text-placeholder\"></span>构造函数继承<br />\n                        <span className=\"text-placeholder\"></span>组合式继承（原型继承 + 构造函数继承）<br />\n                        <span className=\"text-placeholder\"></span>寄生式组合继承<br />\n                        参考文章： https://juejin.im/post/5e8b261ae51d4546c0382ab4\n                </div>\n\n                <p className=\"item-title\">一、原型继承</p>\n                <Code code={`\n// 父类\nfunction Person() {\n    this.name = ['xixi'];\n}\nPerson.prototype.getName = function() {\n    return this.name;\n}\n// 子类\nfunction Child() {}\n// 子类通过原型继承父类\nChild.prototype = new Person();\nChild.prototype.constructor = Child;\n// 实例化子类1\nvar child1 = new Child();\nchild1.name; // ['xixi'];\nchild1.getName(); //['xixi'];\n\n// 实例化子类2\nvar child2 = new Child();\nchild2.name; // ['xixi'];\nchild2.getName(); //['xixi'];\n//修改属性\nchild1.name[0] = 'xiaoming';\n// 会影响其他子类的属性\nchild2.name; // ['xiaoming'];\n`} />           \n                <div className=\"quote\">\n                    <span className=\"mark\">原型继承缺点：</span><br />\n                    <span className=\"text-placeholder\"></span>1. 某个实例修改父类中的引用类型的属性后会影响到其他的所有的子类<br />\n                    <span className=\"text-placeholder\"></span>2. 无法向父类传参\n                </div>\n\n                <p className=\"item-title\">二、构造函数继承</p>\n                <Code code={`\nfunction Parent(name) {\n    this.name = name;\n}\nParent.prototype.age = 18;\nParent.prototype.getName = function() {\n    return this.name;\n}\n// 子类\nfunction Child(name) {\n    //使用父类的构造函数实现继承\n    Parent.call(this, name);\n}\n\nvar child1 = new Child('xixi');\nchild1.name; //xixi\nchild1.age; //undefined\nchild1.getName(); // 报错\n\n`} />\n                <div className=\"quote\">\n                    <span className=\"mark\">构造函数继承的缺点：</span><br />\n                    1. 子类无法继承父类原型链上的属性和方法\n                </div>\n\n                <p className=\"item-title\">三、组合式继承</p>\n                <Code code={`\nfunction Parent(name) {\n    this.name = name;\n}\nParent.prototype.age = 18;\nParent.prototype.getName = function() {\n    return this.name;\n}\n\n//子类\nfunction Child(name) {\n    //使用父类的构造函数继承\n    Parent.call(this, name);\n}\n// 使用父类的原型继承\nChild.prototype = new Parent();\n\nvar child1 = new Child('xixi');\nchild1.name; //xixi\nchild1.age; //18\nchild1.getName(); //xixi\n`} />\n                <div className=\"quote\">\n                    <span className=\"mark\">组合式继承的缺点：</span><br />\n                    1. 每次创建子类实例的时候都执行了两次构造函数（new Parent() 和 Parent.call()）,这并不影响父类的继承，但是子类创建实例时，原型中会保存两份一样的属性和方法，这不是很优雅\n                </div>\n\n                <p className=\"item-title\">四、寄生式组合继承</p>\n                <Code code={`\nfunction Parent(name) {\n    this.name = name;\n}\nParent.prototype.getName = function() {\n    return this.name;\n}\nfunction Child(name) {\n    Parent.call(this, name);\n}\n\n//但这种方式存在一个问题，由于子类原型和父类原型指向同一个对象，\n//我们对子类原型的操作会影响到父类原型，例如给Child.prototype增加一个getName()方法，\n//那么会导致Parent.prototype也增加或被覆盖一个getName()方法，为了解决这个问题，\n//我们给Parent.prototype做一个浅拷贝\n\n// Child.prototype = Parent.prototype;\n\n//做浅拷贝\nChild.prototype = Object.create(Parent.prototype);\n\nChild.prototype.constructor = Child;\n\nvar child = new Child('xiaoming');\n\nchild.name; //'xiaoming'\nchild.getName(); //'xiaoming'`} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class EventLoop extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">event Loop</span></p>\n                <div className=\"article-desc\">\n                    参考文档： https://juejin.im/post/5b63b4cb6fb9a04fb4017f5a<br />\n                    http://www.ruanyifeng.com/blog/2014/10/event-loop.html<br />\n                    https://juejin.im/post/59e85eebf265da430d571f89\n                </div>\n                <div className=\"article-desc\">\n                    <Code code={`\nconsole.log('start')\nnew Promise((resolve, reject) => {\n  console.log('promise3')\n    setTimeout(() => {\n        resolve('111')\n        resolve('222')\n        reject()\n    }, 1000)\n})\n.then((data1) => {\n    console.log('res1', data1)\n}, (data2) => {\n    console.log('res2', data2)\n})\n.then((data3) => {\n    console.log('re3', data3)\n})\nconsole.log('end')\n\n// 输出结果依次是\nstart\n\npromise3\n\nend\n\nres1  111\n\nres2 这个不会执行\n\nres3 undefined`} />\n                    promise中有多个resolve（reject）方法的时候，只执行第一个，因为执行第一个后状态已经发生改变了（状态凝固），所以后面的resolve（reject）都不会执行，也不会被覆盖。\n                </div>\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class CopyMode extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">浅拷贝 & 深拷贝</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、浅拷贝</span>\n                </p>\n                <div className=\"quote\">\n                    实现浅拷贝的方法🤔<br />\n                    1. 使用for...in循环<br />\n                    2. 使用Object.assign<br />\n                    3. 直接使用=赋值<br />\n                </div>\n                <div className=\"quote\">\n                    <span className=\"mark\">1. 使用for...in循环</span><br />\n                    <Code code={`\n// 只复制第一层的浅拷贝\nfunction copy(obj1) {\n    var obj2 = Array.isArray(obj1) ? [] : {};\n    for (let key in obj1) {\n        obj2[key] = obj1[key];\n    }\n    return obj2;\n}\nvar obj1 = {\n    a: 1,\n    b: {\n        c: 2\n    }\n}\nvar obj2 = copy(obj1);\nobj2.a = 3;\nobj1.a; // 3\n\nobj2.b.c = 4;\nobj1.b.c; //4\n`} /><br /><br />\n                    <span className=\"mark\">2. 使用Object.assign</span><br />\n                    <Code code={`\nconst obj1 = {a: {b: 1},c: 2};\nconst obj2 = Object.assign({}, obj1);\n\nobj1.a.b = 2;\nobj2.a.b; // 2\n\nobj1.c = 888;\nobj2.c; // 2\n`} /><br /><br />\n                    <span className=\"mark\">3.直接使用=赋值</span><br />\n                    <Code code={`\nconst obj1 = {a: {b: 1},c: 2};\nconst obj2 = obj1;\n\nobj1.c = 333;\nobj2.c; //333\n\nobj1.a.b = 444;\nobj2.a.b; //444\n`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、深拷贝</span>\n                </p>\n                <div className=\"quote\">\n                    实现深拷贝的方法🤔<br />\n                    1. 使用循环+递归<br />\n                    2. 使用JSON方法<br />\n                    3. 使用Reflect法<br />\n                    4. 数组使用slice和concat<br />\n                </div>\n                <div className=\"quote\">\n                    <span className=\"mark\">1. 使用循环+递归</span><br />\n                    <Code code={`\nfunction deepCopy(obj) {\n    let newObj = Array.isArray(obj) ? [] : {};\n    if (obj && typeof obj === 'object') {\n        for (let key in obj) {\n            if (Object.hasOwnProperty(key)) {\n                if (obj[key] && typeof obj[key] === 'object') {\n                    deepCopy(obj[key]);\n                } else {\n                    newObj[key] = obj[key];\n                }\n            }\n        }\n    }\n    return newObj;\n}`} /><br /><br />\n                    <span className=\"mark\">2. 使用JSON方法</span><br />\n                    使用JSON.stringify的缺点是：对象中的属性值为undefined和方法的属性会丢失。<br />\n                    <Code code={`\nfunction deepCopy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nvar obj = {\n    a: 1,\n    b: null,\n    c: undefined,\n    d: function() {\n        console.log(1111);\n    }\n}\nvar obj1 = deepCopy(obj);\nobj1 = {\n    a: 1,\n    b: null\n}\n`} /><br /><br />\n                </div>\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class DiffArrowFn extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">箭头函数和普通函数之间的区别</span>\n                </p>\n                <div className=\"quote\">\n                    1. 箭头函数是匿名函数，不能作为构造函数，不能使用new<br />\n                    2. 箭头函数不绑定arguments，取而代之的用rest参数...解决<br />\n                    3. 箭头函数不绑定this，会自动捕获其所在上下文的this值，作为自己的this值<br />\n                    4. 箭头函数没有原型属性\n                </div>\n                    <Code code={`\nlet Aaa = () => {\n    console.log('hello world');\n}\nnew Aaa(); // 报错，Aaa is not a constructor\n\nlet b = () => {\n    console.log(arguments);\n}\n// 报错，arguments is not defined\n\nlet a = () => {\n    return 1;\n}\nconsole.log(a.prototype); // undefined\n`} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\n\nexport default class Ajax extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">ajax请求过程</span>\n                </p>\n\n                <p className=\"item-title\">ajax请求过程</p>\n                <div className=\"quote\">\n                    创建XMLHttpRequest对象；<br />\n                    创建一个新的http请求，并指定该http请求的方法，URL，及验证信息；<br />\n                    设置响应http请求状态变化的函数；<br />\n                    发送http请求；<br />\n                    获取异步调用返回的数据；<br />\n                    使用js和DOM实现局部刷新\n                </div>\n                <p className=\"item-title\">ajax使用</p>\n                <Code code={`\nvar xhr;\nif (window.XMLHttpRequest) {\n    xhr = new XMLHttpRequest();\n} else {\n    xhr = new ActiveXObject('Microsoft.XMLHTTP');\n}\n// get请求：\nxhr.open(\"get\", url, async);\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4) {\n        var text = xhr.reponseText;\n        var xml = xhr.responseXML;\n    }\n}\nxhr.send();\n\n// post请求：\nxhr.open(\"post\", url, true);\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 && xhr.state == 200) {\n        var text = xhr.reponseText;\n        var xml = xhr.responseXML;\n    }\n}\nxhr.send('id=1')`} />\n\n                <p className=\"item-title\">readyState状态码</p>\n                <div className=\"quote\">\n                    0: XMLHttpRequest对象创建完成，但没有调用open方法；<br />\n                    1: 初始化，XMLHttpRequest没有调用send方法；<br />\n                    2: XMLHttpRequest开始发送数据给服务器；<br />\n                    3: 正在获取服务器返回的数据；<br />\n                    4: 获取数据完毕，可以通过XMLHttpRequest获得服务器返回的所有数据。\n                </div>\n\n                <p className=\"item-title\">使用Promise封装ajax</p>\n                <div className=\"quote\">\n                    返回一个新的Promise实例<br />\n                    创建HMLHttpRequest异步对象<br />\n                    调用open方法，打开url，与服务器建立链接（发送前的一些处理）<br />\n                    监听Ajax状态信息<br />\n                    如果xhr.readyState == 4（表示服务器响应完成，可以获取使用服务器的响应了）<br />\n                    xhr.status == 200，返回resolve状态<br />\n                    xhr.status == 404，返回reject状态<br />\n                    xhr.readyState !== 4，把请求主体的信息基于send发送给服务器\n                </div>\n                <Code code={`\nfunction ajax(url, method) {\n    return new Promise((resolve, reject) => {\n        let xhr;\n        if (window.XMLHttpRequest) {\n            xhr = new window.XMLHttpRequest();\n        } else {\n            xhr = new ActiveXObject('Mircosoft.XMLHTTP');\n        }\n        xhr.open(url, method, true);\n        xhr.onreadystatechange = function() {\n            if (xhr.readystate == 4) {\n                if (xhr.state == 200) {\n                    resolve(xhr.responseText);\n                } else if (xhr.state == 404){\n                    reject(new Error('404'));\n                }\n            } else {\n                reject('xxxx');\n            }\n        }\n        xhr.send();\n    })\n}`} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\n\nexport default class CookieSession extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">cookie & session</span>\n                </p>\n\n                <p className=\"item-title\">1. cookie出现的原因</p>\n                <div className=\"quote\">\n                    参考文档： https://www.juejin.im/post/6844903858615877639<br />\n                    因为http协议是无状态的，服务器不知道用户上一次做了什么，验证阻碍了交互式web应用程序的实现。<br />\n                    因此cookie是用来绕开http无状态性的额外手段之一。\n                </div>\n                <p className=\"item-title\">2. session出现的原因</p>\n                <div className=\"quote\">\n                    cookie带来了安全问题，它可以被任意的修改和伪造<br />\n                </div>\n\n                <p className=\"item-title\">3. cookie和session的使用</p>\n                <div className=\"quote\">\n                    cookie：<br />\n                    1. 服务器通过Response-Header 的 Set-Cookie给客户端一串字符串<br />\n                    2. 客户端每次访问相同域名的网页时,带上这串字符串，服务器可以通过这串字符串去读取客户端的信息<br />\n                    3. 客户端要在一段时间内保存这个Cookie<br />\n                    4. Cookie默认在用户关闭页面后就会失效，但是后台代码可以任意设置Cookie的过期时间<br /><br />\n\n                    Session：<br />\n                    1. 将SessionId通过Cookie发给客户端<br />\n                    2. 客户端访问服务器时，服务器读取SessionId<br />\n                    3. 服务器有一块内存保存了所有的Session<br />\n                    4. 通过SessionId可以得到对应用户的隐私信息<br />\n                    5. 这块内存就是服务器上的所有session<br /><br />\n\n                    Session与Cookie的联系与区别：<br />\n                    1. Session是依赖于Cookie实现的<br />\n                    2. Cookie存储在客户端，Session则存储在服务器上\n                </div>\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class Prototype extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">原型 & 原型链</span>\n                </p>\n                <h3>相关面试题</h3>\n                <Code code={`\nfunction Foo() {\n    Foo.a = function() {\n        console.log(1);\n    }\n    this.a = function() {\n        console.log(2);\n    }\n}\n\nFoo.prototype.a = function () {\n    console.log(3);\n}\n\nFoo.a = function() {\n    console.log(4);\n}    \n\n// 1. 正常调用\nFoo.a(); // 4\nlet obj = new Foo();\nobj.a(); // 2\nFoo.a(); // 1\n\n// 2. Foo中返回{}\nfunction Foo() {\n    Foo.a = function() {\n        console.log(1);\n    }\n    this.a = function() {\n        console.log(2);\n    }\n    return {};\n}\n\nFoo.a(); // 4\nlet obj = new Foo(); // {}\nobj.a(); // Error报错\nFoo.a(); // 1\n\n\n// 3. Foo中返回[]\nfunction Foo() {\n    Foo.a = function() {\n        console.log(1);\n    }\n    this.a = function() {\n        console.log(2);\n    }\n    return [];\n}\nFoo.a(); // 4\nlet obj = new Foo(); // []\nobj.a(); // Error报错\nFoo.a(); // 1\n\n// 原型链关系\nobj.__proto__ === Foo.prototype;\nFoo.prototype.__proto__ === Object.prototype;\nObject.prototype.__proto__ === null;\n`} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\n\n\n\nexport default class EventEmitterFn extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">自定义--发布订阅模式</span>\n                </p>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">代码</span>\n                </p>\n\n                <Code code={`\n/**\n * 实现一个简单版的发布订阅模式的emit\n */\n\nclass EventEmitter {\n    constructor() {\n        this.events = {};\n    }\n    //订阅事件\n    //绑定事件，可以绑定多个同类型的事件，用数组保存cb，按照绑定的先后顺序依次执行\n    on(type, cb) {\n        if (!this.events[type]) {\n            this.events[type] = [cb];\n        } else {\n            this.events[type].push(cb);\n        }\n    }\n    //解除订阅\n    //解绑事件\n    off(type, cb) {\n        if (!this.events[type]) {\n            return;\n        }\n        this.events[type] = this.events[type].filter(item => {\n            return item !== cb;\n        });\n    }\n\n    //单次订阅\n    //绑定单次事件\n    one(type, cb) {\n        function fn() {\n            cb && cb();\n            this.off(type, fn);\n        }\n        this.on(type, fn);\n    }\n\n    //发布\n    //触发事件\n    emit(type, ...params) {\n        this.events[type] && this.events[type].map(fn => fn.apply(this, params));\n    }\n}\n\nexport default EventEmitter;\n                `} />\n            </div>\n        )\n    }\n}","/**\n * 实现图片点亮功能\n * 模拟：https://mp.weixin.qq.com/s/jkUmXL7RYCgN_LLrDJgwcg\n */\n\nexport default class LightImage {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        //设置样式\n        const style = document.createElement('style');\n        style.type = 'text/css';\n        const gray_css = 'img.img-gray{filter: grayscale(1);}';\n        const light_css = `img.img-light{animation-duration: 2.6s;animation-fill-mode: both;animation-name: imageLight;}`;\n        const animation = `@keyframes imageLight {from {filter: grayscale(1);}to {filter: grayscale(0);}}`;  \n        style.innerText = gray_css + light_css + animation;\n        document.getElementsByTagName('head')[0].appendChild(style);\n        \n        const allImages = document.querySelectorAll('img');\n        if (allImages) {\n            const allImagesList = Array.prototype.slice.call(allImages);\n            if (allImagesList && allImagesList.length > 0) {\n                allImagesList.map(item => {\n                    //设置成灰色\n                    item.classList.add('img-gray');\n\n                    //点击变亮\n                    item.addEventListener('click', function(e) {\n                        if (e.target.nodeName === 'IMG') {\n                            e.target.classList.remove('img-gray');\n                            e.target.classList.add('img-light');\n                        }\n                    }, false);\n                });\n            }\n        }\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\nimport LightImage from './../../../component/LightImage';\n\n\nexport default class LightImageFn extends Component {\n    constructor(props) {\n        super(props);\n       \n    }\n\n    componentDidMount() {\n        new LightImage();\n    }\n\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">点亮图片</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    点击图片, 将会点亮图片<br />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939135&di=cb3dee315e0f312aab4e2fae136abca5&imgtype=0&src=http%3A%2F%2Fp0.ifengimg.com%2Fpmop%2F2018%2F0809%2FD5AD6058C6F7F813F01E0AF06364286B93F53E27_size21_w600_h399.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939136&di=84d3db1eaf300c7da975f9b77c4aeed7&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20161019%2F38dae34b3f264fd39ce0de0d9ae613b7_th.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939134&di=7e4cb10cf71cd9fc5653d21ada0824db&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201403%2F20%2F20140320235526_QWwya.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593958939134&di=2eb3ae79c4e7d3fe858173d0e9d346cb&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201612%2F05%2F20161205101430_QjPwv.thumb.700_0.jpeg\" />\n                    <img className=\"article-img preview-img\" alt=\"\" src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594202302213&di=9b7676b88364df814275b304690a3f4d&imgtype=0&src=http%3A%2F%2Fimg.pconline.com.cn%2Fimages%2Fupload%2Fupc%2Ftx%2Fitbbs%2F1901%2F05%2Fc1%2F126971444_1546641805999_mthumb.jpg\" />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">代码</span>\n                </p>\n\n                <Code code={`\n/**\n * 实现图片点亮功能\n * 模拟：https://mp.weixin.qq.com/s/jkUmXL7RYCgN_LLrDJgwcg\n */\n\nclass LightImage {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        //设置样式\n        const style = document.createElement('style');\n        style.type = 'text/css';\n        const gray_css = 'img.img-gray{filter: grayscale(1);}';\n        const light_css = 'img.img-light{animation-duration: 2.6s;animation-fill-mode: both;animation-name: imageLight;}';\n        const animation = '@keyframes imageLight {from {filter: grayscale(1);}to {filter: grayscale(0);}}';  \n        style.innerText = gray_css + light_css + animation;\n        document.getElementsByTagName('head')[0].appendChild(style);\n        \n        const allImages = document.querySelectorAll('img');\n        if (allImages) {\n            const allImagesList = Array.prototype.slice.call(allImages);\n            if (allImagesList && allImagesList.length > 0) {\n                allImagesList.map(item => {\n                    //设置成灰色\n                    item.classList.add('img-gray');\n\n                    //点击变亮\n                    item.addEventListener('click', function(e) {\n                        if (e.target.nodeName === 'IMG') {\n                            e.target.classList.remove('img-gray');\n                            e.target.classList.add('img-light');\n                        }\n                    }, false);\n                });\n            }\n        }\n    }\n}\n                `} />\n            </div>\n        )\n    }\n}","// https://www.imooc.com/article/277705?block_id=tuijian_wz\n\n\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Memoization extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">js中的memoization技术</span>\n                </p>\n                <div className=\"article-desc\">\n                </div>\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class Currying extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">函数柯力化</span>\n                </p>\n\n                <h3>1. 概念</h3>\n                <div className=\"quote\">\n                柯里化，Currying，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。\n                </div>\n                <Code code={`\n// 普通函数\nfunction add(x, y) {\n    return x + y;\n}\nadd(1, 2); // 3\n\n// 函数柯力化\nfunction curryingAdd(x) {\n    return function(y) {\n        return x + y;\n    }\n}\ncurryingAdd(1)(2); // 3\n`} />\n                <h3>2. 函数柯力化的好处</h3>\n                <div className=\"quote\">\n                    1. 参数的复用<br />\n                    2. 延迟执行<br />\n                    3. 实现bind\n                </div>\n                <Code code={`\n// 参数的复用\nvar a = curringAdd(1);\na(2);\na(3);\n\n// 延迟执行\ncurringAdd(1)(2);\n\n// 实现bind\nFunction.prototype.myBind = function(content) {\n    const self = this;\n    const args = Array.prototype.slice.call(arguments, 1);\n    return function() {\n        return self.apply(content, args);\n    }\n}`} />\n                <h3>3. 函数柯力化抽象封装</h3>\n                <Code code={`\nfunction currying(fn, ...args) {\n    return function() {\n        var params = args.concat(Array.from(arguments));\n        var length = fn.length;\n        if (length == params.length) {\n            return fn(...params);\n        } else {\n            return currying(fn, ...params);\n        }\n    }\n}\nfunction test(a,b,c, d) {\n    return a+b+c+d;\n}\nvar fn = currying(test);\nconsole.log(fn(1)(2)(3)(4));`} />\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ThrottleAndDebounce extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">节流和防抖</span>\n                </p>\n\n                <div className=\"quote\">\n                    节流和防抖的区别？<br />\n                    假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的情况会每隔一定时间（参数wait）调用函数。\n                </div>\n\n                <h3>1. 节流</h3>\n                <div className=\"quote\">\n                    基本思想： 某些代码不可以在没有间断的情况下连续重复执行。<br />\n                    第一次调用函数创建一个定时器，在指定的时间间隔后执行代码；<br />\n                    第二次调用该函数的时候，它会清除前一次的定时器并创建一个新的。<br /><br />\n\n                    目的：按照设置的时间间隔执行。只要代码是周期性执行的，都应该使用节流。<br />\n\n                    使用场景：\n\n                </div>\n\n                <Code code={`\nfunction throttle(fn, wait) {\n    let timeid;\n    if (timeid) {\n        clearTimeout(timeid);\n    }\n    const self = this;\n    timeid = setTimeout(function() {\n        fn.apply(self, arguments);\n    }, wait);\n}\n\nfunction throttle(fn, wait) {\n    let timeid;\n    return function() {\n        if (timeid) {\n            clearTimeout(timeid);\n        }\n        const self = this;\n        timeid = setTimeout(function() {\n            fn.apply(self, arguments);\n        }, wait);\n    }\n}\n`} />\n                <h3>2. 防抖</h3>\n                <div className=\"quote\">\n                    指连续触发事件但是在n秒中只执行一次函数\n                </div>\n                <Code code={`\nfunction debounce(fn, wait) {\n    let timeid;\n    if (!timeid) {\n        timeid = setTimeout(() => {\n            fn.apply(this, arguments);\n        }, wait);\n    }\n}\n\nfunction debounce(fn, wait) {\n    let timeid;\n    return function() {\n        if (!timeid) {\n            timeid = setTimeout(() => {\n                fn.apply(this, arguments);\n            }, wait);\n        }\n    }\n}`} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class MatchMedia extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">window.matchMeida</span>\n                </p>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">window.matchMeida</span>\n                </p>\n                <div className=\"article-desc\">\n                    MDN文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia\" target=\"_blank\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia</a><br />\n                    菜鸟文档：<a href=\"https://www.runoob.com/jsref/met-win-matchmedia.html\" target=\"_blank\">https://www.runoob.com/jsref/met-win-matchmedia.html</a>\n                    实例代码：<br /><br />\n                    <Code code={`\nconst checkMediaQuery = () => {\n    const type = window.matchMedia(\"(min-width: 1025px)\").matches ? 'desktop' : 'mobile';\n    console.log('---type---', type);\n};\n\nwindow.addEventListener('resize', checkMediaQuery);`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class AboutQueue extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现一个类：链式调用，执行事件，流程控制</span></p>\n                <div className=\"article-desc\">\n                    问题描述： 设计一个类，实现以下能力：<br />\n                    <Code code={`\nnew Queue('start the queue').task('a').restFirst(1).rest(3).task('b'); \n\n// 立即输出：start the queue\n// 1秒后输出： do a\n// 3秒后输入： do b`}/>\n                \n                <Code code={`\nfunction Queue(str) {\n    console.log(str);\n    this.eventQueue = [];\n    this.valueQueue = [];\n}\n\nQueue.prototype.getItem = function(type) {\n    if (type === 'event') {\n        return this.eventQueue.shift();\n    } else {\n        return this.valueQueue.shift();\n    }\n}\n\nQueue.prototype.push = function(value, type) {\n    if (type === 'event') {\n        this.eventQueue.push(value);\n    } else {\n        this.valueQueue.push(value);\n    }\n}\n\nQueue.prototype.task = function(value) {\n    if (this.valueQueue.indexOf(value) == -1) {\n        this.push(value, 'value');\n    }\n    const fn = this.getItem('event');\n    fn && typeof fn === 'function' && fn(value);\n    return this;\n}\n\nQueue.prototype.rest = function(time) {\n    const fn = (value) => {\n        setTimeout(() => {\n            console.log('do ' + value);\n        }, time * 1000);\n    };\n    this.push(fn, 'event');\n    return this;\n}\n\nQueue.prototype.restFirst = function(time) {\n    const fn = (value) => {\n        setTimeout(() => {\n            console.log('do ' + value);\n        }, time * 1000);\n    };\n    this.push(fn, 'event');\n    this.task(this.getItem('value'));\n    return this;\n}`} />\n            </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class AboutTree extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">判断一棵树是否对称</span></p>\n                <div className=\"article-desc\">\n                    先实现一个二叉查找树，然后进行判断是否为对称树。<br />\n                    <Code code={`\nfunction Node(data, left, right) {\n    this.data = data;\n    this.left = left;\n    this.right = right;\n}\n\n/**\n * 二叉树： 每个节点的子节点不允许超过两个\n * 二叉查找树：是一种特殊的二叉树，相对较小的值保存在左节点中，较大的值保存在右节点中\n */\nfunction BST() {\n    this.root = null;\n    this.insert = insert;\n    this.isSymmetry = isSymmetry;\n    this.inOrder = inOrder;\n    this.preOrder = preOrder;\n    this.postOrder = postOrder;\n    this.getMin = getMin;\n    this.getMax = getMax;\n    this.find = find;\n}\n\nfunction insert(data) {\n    var node = new Node(data, null, null);\n    if (this.root === null) {\n        this.root = node;\n    } else {\n        var current = this.root;\n        var parent = null;\n        while(true) {\n            parent = current;\n            if (data < current.data) {\n                current = current.left;\n                if (current == null) {\n                    parent.left = node;\n                    break;\n                }\n            } else {\n                current = current.right;\n                if (current == null) {\n                    parent.right = node;\n                    break;\n                }\n            }\n        }\n    }\n}\n\nfunction isSymmetry() {\n    var root = this.root;\n    if (root == null) {\n        return true;\n    }\n    return compare(root.left, root.right);\n}\n\nfunction compare(left,right) {\n    if (left == null && right == null) {\n        return true;\n    }\n    if (left == null || right == null) {\n        return false;\n    }\n    if (left.data !== right.data) {\n        return false;\n    }\n    return compare(left.left, left.right) && compare(right.left, right.right);\n}\n// 中序遍历\n// 左子树 ---> 根节点 ---> 右子树\n\nfunction inOrder(node) {\n    if (node != null) {\n        inOrder(node.left);\n        console.log(node);\n        inOrder(node.right);\n    }\n}\n\n// 前序遍历\n// 根节点 ---> 左子树 ---> 右子树\nfunction preOrder(node) {\n    if (node != null) {\n        console.log(node);\n        preOrder(node.left);\n        preOrder(node.right);\n    }\n}\n\n// 后序遍历\n// 左子树 ---> 右子树 ---> 根节点\nfunction postOrder(node) {\n    if (node != null) {\n        postOrder(node.left);\n        postOrder(node.right);\n        console.log(node);\n    }\n}\n\n\n// 获取最小值\n// 最小值总是在左子节点上，只需要遍历左子树，直到找到最后一个节点\n\nfunction getMin() {\n    var currentRoot = this.root;\n    while(currentRoot.left != null) {\n        currentRoot = currentRoot.left;\n    }\n    return currentRoot.data;\n}\n\n// 获取最大值\n// 最大值总是在右子节点上，只需要遍历右子树，直到找到最后一个节点\nfunction getMax() {\n    var currentRoot = this.root;\n    while(currentRoot.right != null) {\n        currentRoot = currentRoot.right;\n    }\n    return currentRoot.data;\n}\n\n// 查找指定的值\n// 需要比较该值和当前节点的值的大小，小于则遍历左子树，大于则遍历右子树\nfunction find(data) {\n    var currentRoot = this.root;\n    while(currentRoot != null) {\n        if (currentRoot.data == data) {\n            return currentRoot;\n        } else if (currentRoot.data > data) {\n            currentRoot = currentRoot.left;\n        } else {\n            currentRoot = currentRoot.right;\n        }\n    }\n    return null;\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Myfetch extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现一个带并发数限制的fetch请求函数</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nfunction myFetch(urls, max, callback) {\n    let pending_count = 0;\n    const allUrls = [...ulrs];\n    \n    async function _fetch(url) {\n        if (!url) {\n            return;\n        }\n        pending_count++;\n        await fetch(url);\n        pending_count--;\n        _fetch(allUrls.shift());\n        if (!pending_count) {\n            callback && callback();\n        }\n    }\n    while(pending_count < max) {\n        _fetch(allUrls.shift());\n    }\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyMap extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现Map</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nArray.prototype.myMap = function(fn, context) {\n\tvar arr = this;\n\tcontext = context || window;\n\tvar result = [];\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tresult.push(fn.call(context, arr[i], i, arr));\n\t}\n\treturn result;\n}`} />\n\n                用reduce实现map: <br />\n                <Code code={`\nArray.prototype.myMap = function(fn, context) {\n    return this.reduce((prev, item, index, arr) => {\n            prev.push(fn.call(context, item, index, arr));\n            return prev;\n    }, []);\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyMap extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现forEach</span></p>\n                <div className=\"article-desc\">\n                    forEach没有返回值<br />\n                    <Code code={`\nArray.prototype.myForEach = function(fn, context) {\n\tvar arr = this;\n\tcontext = context || window;\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tfn.call(context, arr[i], i, arr);\n\t}\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyNew extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">实现new</span></p>\n                <div className=\"quote\">\n                    new的定义：new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。\n                </div>\n                javascript高级程序设计中对new命令符操作过程的解释:\n                <div className=\"quote\">\n                    1. 创建一个新对象；var obj = {}; <br />\n                    2. 将构造函数的作用域赋值给新对象（因此this就指向了这个新对象）； obj.__proto__ = Fn.prototype;<br />\n                    3. 执行构造函数中的代码（为这个新对象添加属性）；Fn.call(obj, '其他参数');<br />\n                    4. 返回该新对象。return obj; || return {};\n                </div>\n                通过new命令后，实例与构造函数的关系：<a target=\"_blank\" href=\"https://juejin.im/post/6844904079747989517\">参考文档</a>\n                <div className=\"quote\">\n                    1. new操作符实例化了一个对象；<br />\n                    2. 这个对象可以访问构造函数的属性；<br />\n                    3. 这个对象可以访问构造函数原型上的属性； <br />\n                    4. 对象的__proto__属性指向了构造函数的原型；\n                </div>\n                    <Code code={`\n/*\n* 实现思路\n*\t1. 创建新对象并继承原型\n*\t2. 执行构造函数并绑定this\n*\t3. 返回新对象\n*/\n\nfunction myNew() {\n\t//获取构造函数\n\tconst Func = Array.from(arguments).shift();\n\t//创建一个新对象，并继承原型\n\tconst obj = Object.create(Func.prototype);\n\t//执行构造函数，并将this指向新建的对象\n\tconst result = Func.apply(obj, Array.from(arguments).slice(1));\n\t//构造函数的执行结果如果为对象就直接返回该对象\n\tif (result instanceof Object) {\n\t\treturn result;\n\t}\n\t//否则返回空对象\n\treturn {};\n}\n\nfunction myNew1() {\n    let obj = {};\n    let Fn = [].shift.apply(arguments);\n    obj.__proto__ = Fn.prototype;\n    let res = Fn.apply(obj, [].slice.apply(arguments));\n    return typeof res === 'object' ? res : obj;\n}\n`} />\n\n                <div className=\"quote\">\n                    步骤1：创建一个Func的实例对象（实例.__proto__ = 类.prototype）<br />\n                    步骤2：把Func 当做普通函数执行，并改变this指向<br />\n                    步骤3：分析函数的返回值\n                </div>\n                <Code code={`\nfunction myNew(Func, ...args) {\n    let obj = {};\n    obj.__proto__ = Func.prototype;\n    let res = Func.call(obj, ...args);// 把Func当做普通函数执行，并改变this指向\n    if (typeof res === 'object' || typeof res === 'function') {\n        return res;\n    }\n    return obj;\n\n}`} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyApply extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现apply</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nFunction.prototype.newApply = function(thisArg, args) {\n    // 声明一个独有的Symbol属性, 防止fn覆盖已有属性\n    const fn = Symbol('fn');\n    // 若没有传入this, 默认绑定window对象\n    thisArg = thisArg || window;\n    // this指向调用call的对象,即我们要改变this指向的函数\n    thisArg[fn] = this;\n    // 执行当前函数（此处说明一下：虽然apply()接收的是一个数组，但在调用原函数时，依然要展开参数数组。可以对照原生apply()，原函数接收到展开的参数数组）\n    const result = thisArg[fn](...args);\n    // 删除我们声明的fn属性\n    delete thisArg[fn];\n    // 返回函数执行结果              \n    return result;            \n}\n\n//测试\nconst obj = {\n\tname: 'hello world'\n};\n\nfunction foo() {\n\tconsole.log(this.name);\n}\n\nfoo.newApply(obj, [])     // hello world\n\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyCall extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现call</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\nFunction.prototype.newCall = function(context, ...args) {\n\t//防止原有的属性被覆盖,生成唯一的变量名\n    const fn = Symbol('fn');\n    context = context || window;\n    //将this保存到要调用call的对象\n    context[fn] = this;\n    // 执行当前函数\n    const result = context[fn](...args);\n    //删除fn属性\n    delete context[fn];\n    return result;\n}\n\n//测试\nconst obj = {\n\tname: 'hello world'\n}\nfunction foo() {\n\tconsole.log(this.name);\n}\nfoo.newCall(obj)     // hello world`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyBind extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现bind</span></p>\n                <div className=\"article-desc\">\n                    MDN: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind<br />\n                    <Code code={`\n/**\n *bind() 方法创建一个新的函数，在 bind() 被调用时，\n *\t这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。\n *\t语法: function.bind(thisArg, arg1, arg2, ...)\n *\n *\n */\n \n /**\n *要注意的点\n *\t1. bind()除了this还接收其他参数，bind()返回的函数也接收参数，这两部分的参数都要传给返回的函数\n *\t2. new会改变this指向：如果bind绑定后的函数被new了，那么this指向会发生改变，指向当前函数的实例\n *\t3. 没有保留原函数在原型链上的属性和方法\n */\n \n Function.prototype.newBind = function(context, ...args) {\n     var self = this\n     // new优先级\n     var _bind = function () {\n         //判断this是不是self的实例，意思是this是不是new出来的\n         self.apply(this instanceof self ? this : context, args.concat(Array.from(arguments)));\n     }\n     // 继承原型上的属性和方法\n     _bind.prototype = Object.create(self.prototype);\n     return _bind;\n }\n \n //测试\n const obj = { name: 'hello world' };\n function foo() {\n     console.log(this.name);\n }\n \n foo.newBind(obj)();    //hello world`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyLet extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现let</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n//let写法，let具有块级作用域\n\nfor (let i = 0; i < 5; i++) {\n    console.log(i);\n}\nconsole.log(i);  // Uncaught ReferenceError: i is not defined\n\n//用es5中的var模拟实现let功能：使用自执行函数的函数作用域模拟块级作用域\n(function() {\n    for (var i = 0; i < 5; i++) {\n        console.log(i);\n    }\n})();\nconsole.log(i);  // Uncaught ReferenceError: i is not defined\n\n\n//es5中的var没有块级作用域\nfor (var i = 0; i < 5; i++) {\n    console.log(i);\n}\nconsole.log(i); // 5`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyLet extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现let</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n/**\n * 用es5实现const的功能\n * @param {*} prop 属性名\n * @param {*} value 属性值\n * 不能够完全实现和const一致的功能，只能通过以下的方式模拟const的功能\n * 将自定义const实现成一个方法，然后将该属性挂在window对象下，\n * 通过Object.defineProperty方法对属性进行拦截处理，从而达到效果\n */\nvar _const = function(prop, value) {\n    window[prop] = value;\n    Object.defineProperty(window, prop, {\n        // 当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。\n        configurable: false,\n        // 当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。\n        enumerable: false,\n        get: function() {\n            return value;\n        },\n        set: function() {\n            throw new TypeError('Assignment to constant variable.');\n        },\n    });\n}\n\n_const('a', 10);\nconsole.log(a); // 10\na = 10; // Uncaught TypeError: Assignment to constant variable.\n\n\n/**\n * 用es6中的Proxy来对对象进行拦截处理\n */\nvar _const = new Proxy({}, {\n    get: function(target, prop) {\n        return target[prop];\n    },\n    set: function(target, prop, value) {\n        if (!target[prop]) {\n            target[prop] = value;\n        } else {\n            throw new TypeError('Assignment to constant variable.');\n        }\n    }\n});\n\n_const.age = 18; \n_const.age = 18; // Uncaught TypeError: Assignment to constant variable.\n_const.age = 1; // Uncaught TypeError: Assignment to constant variable.\nconsole.log(_const.age);  // 18\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyLet extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">实现instanceof</span></p>\n                <div className=\"quote\">\n\t\t\t\t\t1. 取得实例对象的原型链；<br />\n\t\t\t\t\t2. 取得构造函数的原型；<br />\n\t\t\t\t\t3. 判断实例对象的原型链是否指向构造函数的原型；<br />\n\t\t\t\t\t4. 如果不是，取得实例对象的原型链的原型链，继续循环判断，只到实例对象的原型链指向null；\n\t\t\t\t</div>\n\t\t\t\t<Code code={`\n// obj1 是不是 obj2的实例\nfunction myInstanceof(obj1, obj2) {\n\tlet left = obj1.__proto__;\n\tlet right = obj2.prototype;\n\twhile(true) {\n\t\tif (left === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (left !== right) {\n\t\t\tleft = left.__proto__;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\nfunction myInstanceof(obj1, obj2) {\n\tlet left = obj1.__proto__;\n\tlet right = obj2.prototype;\n\tif (left === null) {\n\t\treturn false\n\t}\n\tif (left === right ) {\n\t\treturn true;\n\t} else {\n\t\t// left = left.__proto__;\n\t\tmyInstanceof(left, obj2);\n\t}\n}\n// 优化版\n// Object.getPrototypeOf ( )：用来获取某个实例对象的原型\nfunction myInstanceof(instanObj, classFn) {\n\tlet prototype = classFn.prototype;\n\tlet proto = instanObj.__proto__;\n\twhile(true) {\n\t\tif (proto === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (proto === prototype) {\n\t\t\treturn true;\n\t\t}\n\t\tproto = proto.__proto__;\n\t}\n}\n`} />\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyPromise extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">实现promise</span></p>\n                \n\t\t\t\t<div className=\"quote\">\n\t\t\t\t\t参考文档： <br />\n\t\t\t\t\thttps://juejin.im/post/5e3b9ae26fb9a07ca714a5cc<br />\n\t\t\t\t\thttps://juejin.im/post/6856213486633304078<br />\n\t\t\t\t\thttps://juejin.im/post/6850037281206566919<br />\n\t\t\t\t\t<a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MzU5NDM5MDg1Mw==&mid=2247484225&idx=1&sn=b1d26191a41b9a3961f6798d1218fd79&chksm=fe00b96bc977307d2eab27dbd25bf6d27194d7fcdd9d9515822639b0206ad6ca1f946a0de7a9&token=1408690735&lang=zh_CN#rd\">promise面试题汇总</a>\n\t\t\t\t\t<br />\n\t\t\t\t\t<a target=\"_blank\" href=\"https://promisesaplus.com/\">Promise/A+ 规范</a><br /><br />\n\t\t\t\t</div>\n\n\t\t\t\t<h3>promise简介</h3>\n\t\t\t\t<div className=\"quote\">\n\t\t\t\t\t1、Promise出现的原因以及为我们解决了什么问题<br />\n\t\t\t\t\t在传统的异步编程中，如果异步之间存在依赖关系，就需要通过层层嵌套回调的方式满足这种依赖，如果嵌套层数过多，可读性和可以维护性都会变得很差，产生所谓的“回调地狱”，而 Promise 将嵌套调用改为链式调用，增加了可阅读性和可维护性。也就是说，Promise 解决的是异步编码风格的问题。\n\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t<h3>实现promise的整体流程</h3>\n\t\t\t\t<div className=\"quote\">\n\t\t\t\t\t1、定义整体结构<br />\n\t\t\t\t\t2、实现promise构造函数<br />\n\t\t\t\t\t3、实现then方法<br />\n\t\t\t\t\t4、实现catch方法<br />\n\t\t\t\t\t5、实现Promise.resolve<br />\n\t\t\t\t\t6、实现Promise.reject<br />\n\t\t\t\t\t7、实现Promise.all<br />\n\t\t\t\t\t8、实现Promise.race<br />\n\t\t\t\t</div>\n\n\t\t\t\t<h3>Promise 的基本特征</h3>\n\t\t\t\t<div className=\"quote\">\n\t\t\t\t\t1. promise 有三个状态：pending，fulfilled，or rejected；「规范 Promise/A+ 2.1」<br />\n\t\t\t\t\t2. new promise时， 需要传递一个executor()执行器，执行器立即执行；<br />\n\t\t\t\t\t3. executor接受两个参数，分别是resolve和reject；<br />\n\t\t\t\t\t4. promise  的默认状态是 pending；<br />\n\t\t\t\t\t5. promise 有一个value保存成功状态的值，可以是undefined/thenable/promise；「规范 Promise/A+ 1.3」<br />\n\t\t\t\t\t6. promise 有一个reason保存失败状态的值；「规范 Promise/A+ 1.5」<br />\n\t\t\t\t\t7. promise 只能从pending到rejected, 或者从pending到fulfilled，状态一旦确认，就不会再改变；<br />\n\t\t\t\t\t8. promise 必须有一个then方法，then 接收两个参数，分别是 promise 成功的回调 onFulfilled, 和 promise 失败的回调 onRejected；「规范 Promise/A+ 2.2」<br />\n\t\t\t\t\t9. 如果调用 then 时，promise 已经成功，则执行onFulfilled，参数是promise的value；<br />\n\t\t\t\t\t10. 如果调用 then 时，promise 已经失败，那么执行onRejected, 参数是promise的reason；<br />\n\t\t\t\t\t11. 如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调onRejected；<br /><br />\n\n\t\t\t\t\t1. then 的参数 onFulfilled 和 onRejected 可以缺省，如果 onFulfilled 或者 onRejected不是函数，将其忽略，且依旧可以在下面的 then 中获取到之前返回的值；「规范 Promise/A+ 2.2.1、2.2.1.1、2.2.1.2」<br />\n\t\t\t\t\t2. promise 可以 then 多次，每次执行完 promise.then 方法后返回的都是一个“新的promise\"；「规范 Promise/A+ 2.2.7」<br />\n\t\t\t\t\t3. 如果 then 的返回值 x 是一个普通值，那么就会把这个结果作为参数，传递给下一个 then 的成功的回调中；<br />\n\t\t\t\t\t4. 如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.2.7.2」<br />\n\t\t\t\t\t5. 如果 then 的返回值 x 是一个 promise，那么会等这个 promise 执行完，promise 如果成功，就走下一个 then 的成功；如果失败，就走下一个 then 的失败；如果抛出异常，就走下一个 then 的失败；「规范 Promise/A+ 2.2.7.3、2.2.7.4」<br />\n\t\t\t\t\t6. 如果 then 的返回值 x 和 promise 是同一个引用对象，造成循环引用，则抛出异常，把异常传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.3.1」<br />\n\t\t\t\t\t7. 如果 then 的返回值 x 是一个 promise，且 x 同时调用 resolve 函数和 reject 函数，则第一次调用优先，其他所有调用被忽略；「规范 Promise/A+ 2.3.3.3.3」\n\n\t\t\t\t</div>\n\n\t\t\t\t<h3>1、定义整体结构</h3>\n\t\t\t\t<Code code={`\n// 三种状态\t\t\t\t\t\nconst Pending = 'PENDING';\nconst Resolved = 'RESOLVED';\nconst Rejected = 'REJECTED';\n\n// 是一个Promise的整体结构\nclass Promise {\n\tconstructor(executor) {\n\t\tthis.staus = Pending;\n\t}\n\t// Promise原型对象的then方法，指定成功、失败的回调，返回一个新的promise对象\n\tthen(onResolved, onRejected) {\n\n\t}\n\t// Promise原型对象的catch方法，指定一个失败的回调函数，返回一个新的promise对象\n\tcatch(onRejected) {\n\n\t}\n    // finally 表示不是最终的意思，而是无论如何都会执行的意思。\n    // 如果返回一个 promise 会等待这个 promise 也执行完毕。如果返回的是成功的 promise，会采用上一次的结果；如果返回的是失败的 promise，会用这个失败的结果，传到 catch 中。\n\n\tfinally(callback) {\n\n\t}\n\n\t// Promise的resolve方法，返回一个指定结果的promise对象\n\tstatic resolve(value) {\n\n\t}\n\t// Promise的reject方法，返回一个指定reason的失败状态的promise对象\n\tstatic reject(value) {\n\n\t}\n\t// Promise的all方法，返回一个promise对象，只有当所有promise都成功的时候才返回\n\tstatic all(value) {\n\n\t}\n\t// Promise的race方法，返回一个promise对象，状态由第一个完成的promise决定\n\tstatic race(value) {\n\n\t}\n}`} />\n\t\t\t\t<h3>2、实现promise构造函数</h3>\n\t\t\t\tpromise构造函数接受一个函数，而且这个函数会立即被执行，该函数有两个入参，分别是成功的回调和失败的回调<br />\n\t\t\t\t<Code code={`\nclass Promise {\n\tconstructor(executor) {\n\t\tthis.staus = Pending;\n\t\tthis.value = undefined;\n\t\tthis.season = undefined;\n\t\tthis.callbacks = [];\n\n\t\tlet resolveFn = function(value) {\n\t\t\tif (this.status === Pending) {\n\t\t\t\tthis.status = Resolved;\n\t\t\t\tthis.value = value;\n\n\t\t\t\tif (this.callbacks.length > 0) {\n\t\t\t\t\tthis.callbacks.forEach(item => {\n\t\t\t\t\t\titem.resolve(value);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet rejectedFn = function(reason) {\n\t\t\tif (this.status === Pending) {\n\t\t\t\tthis.reason = reason;\n\t\t\t\tthis.status = Resolved;\n\n\t\t\t\tif (this.callbacks.length > 0) {\n\t\t\t\t\tthis.callbacks.forEach(item => {\n\t\t\t\t\t\titem.reject(reason);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\t// 立即执行\n\t\t\texecutor(resolveFn, rejectedFn);\n\t\t} catch (e) {\n\t\t\t// 如果执行器保存则使用try catch捕获错误信息后让rejectedFn执行\n\t\t\trejectedFn(e);\n\t\t}\n\t}\n\n}`} />\n\t\t\t\t<h3>3、实现then</h3>\n\t\t\t\t<Code code={`\n// then方法执行完成后返回一个新的promise对象\nthen(onResolved, onRejected) {\n\tconst self = this;\n\t// then传入的参数如果不是函数的话，会发生值的穿透，即参数不为函数的then是无效的，不会执行，将会保存上一个value\n\tonResolved = typeof onResolved === 'function' ? onResolved : value => value;\n\tonRejected = typeof onRejected === 'function' ? onRejected : reason => {throw reason};\n\n\treturn new Promise((resolve, reject) => {\n\t\t// 如果当前的状态为Pending时需要将回调保存起来，当状态发生改变的时候再执行\n\t\tif (this.status === Pending) {\n\t\t\tthis.callbacks({\n\t\t\t\tresolve: () => { handle(onResolved) },\n\t\t\t\treject: () => { handle(onRejected) },\n\t\t\t});\n\t\t}\n\t\t// 如果当前状态为Resolved，则不需要将回调保存起来，是异步执行\n\t\tif (this.status === Resolved) {\n\t\t\tsetTimeout(() => {\n\t\t\t\thandle(onResolved);\n\t\t\t}, 0);\n\t\t}\n\t\t// 同Resolved状态\n\t\tif (this.status === Rejected) {\n\t\t\tsetTimeout(() => {\n\t\t\t\thandle(onRejected);\n\t\t\t}, 0);\n\t\t}\n\n\t\tfunction handle(callback) {\n\t\t\ttry {\n\t\t\t\tconst result = callback(self.value);\n\t\t\t\t// then返回的不一定为promise对象\n\t\t\t\tif (result instanceof Promise) {\n\t\t\t\t\t// 如果回调函数返回的是promise对象，return的promise的结果就是这个promise的结果\n\t\t\t\t\tresult.then(value => resolve(self.value), reason => reject(self.reason));\n\t\t\t\t} else {\n\t\t\t\t\t// 如果回调函数返回的不是promise对象，return的promise的状态是resolved，value是就是返回值\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// 如果执行onResolved的时候报错，则返回promise的状态为rejected\n\t\t\t\treject(e);\n\t\t\t}\n\t\t}\n\t});\n}\n`} />\n\n\t\t\t\t<h3>4、实现catch方法</h3>\n\t\t\t\tcatch方法的作用和then的第二个回调函数一样，可以借助then方法实现。<br />\n\t\t\t\t<Code code={`\ncatch(onRejected) {\n\treturn this.then(null, onRejected);\n}`} />\n\n\t\t\t\t<h3>5、实现Promise.resolve</h3>\n\t\t\t\tPromise.resolve方法可以接受三种值：非promise、成功状态的promise、失败状态的promise<br />\n\t\t\t\t例子：<br />\n\t\t\t\t<div className=\"code-desc\">\n\t\t\t\t\tPromise.resolve(1);<br />\n\t\t\t\t\tPromise.resolve(Promise.resolve(1));<br />\n\t\t\t\t\tPromise.resolve(Promise.reject(1));<br />\n\t\t\t\t</div>\n\t\t\t\t<Code code={`\nstatic resolve(value) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (value instanceof Promise) {\n\t\t\tvalue.then((value) => {\n\t\t\t\tresolve(value);\n\t\t\t}, (reason) => {\n\t\t\t\treject(reason)\n\t\t\t});\n\t\t} else {\n\t\t\tresolve(value);\n\t\t}\n\t});\n}`} />\n\n\t\t\t\t<h3>6、实现Promise.reject</h3>\n\t\t\t\t<Code code={`\nstatic reject(reason) {\n\treturn new Promise((resolve, reject) => {\n\t\treject(reason);\n\t});\n}`} />\n\n\t\t\t\t<h3>7、实现Promise.all</h3>\n\t\t\t\tPromise.all会返回一个promise，这个promise的状态由遍历每个promise产生的结果决定；<br />\n\t\t\t\t因此有两种情况： 第一是遍历到有一个promise是reject状态，则直接返回的promise为rejected；<br />\n\t\t\t\t第二是所有的的状态值都为resolved，则返回的状态为resolved，还要每个promise产生的值传递下去<br />\n\t\t\t\t传入Promise.all的数组中的项目不一定是promise对象，要把不是promise的包装成promise对象。\n\t\t\t\t<Code code={`\nstatic all(promises) {\n\tconst values = new Array(promises.length);\n\tvar resolvedCount = 0;\n\treturn new Promise((resolve, reject) => {\n\t\t// 遍历所有的promise，获取每个promise的结果\n\t\tpromises.forEach((item, index) => {\n\t\t\t// 有些可能不是promise对象，都包装成promise\n\t\t\tPromise.resolve(item).then((value) => {\n\t\t\t\tvalues[index] = value;\n\t\t\t\tresolvedCount++;\n\t\t\t\t\n\t\t\t\t// 所有的成功执行完成\n\t\t\t\tif (resolvedCount === promises.length) {\n\t\t\t\t\tresolve(values);\n\t\t\t\t}\n\t\t\t}, reason => {\n\t\t\t\t// 只要有一个失败，return 的promise的状态就为rejected\n\t\t\t\treject(reason);\n\t\t\t});\n\t\t})\n\t});\n}`} />\n\t\t\t\t<h3>8、实现Promise.race</h3>\n\t\t\t\tPromise.race方法的状态是由第一个完成的promise来决定的。<br />\n\t\t\t\t<Code code={`\nstatic race(promises) {\n\treturn new Promise((resolve, reject) => {\n\t\tpromises.forEach(item => {\n\t\t\tPromise.resolve(item).then(value => {\n\t\t\t\tresolve(value);\n\t\t\t}, reason => {\n\t\t\t\treject(reason);\n\t\t\t});\n\t\t})\n\t});\n}`} />\n\n\t\t\t\t<h3>9、实现实例的finally方法</h3>\n\t\t\t\tfinally 表示不是最终的意思，而是无论如何都会执行的意思。<br />\n\t\t\t\t如果返回一个 promise 会等待这个 promise 也执行完毕。如果返回的是成功的 promise，会采用上一次的结果；如果返回的是失败的 promise，会用这个失败的结果，传到 catch 中。<br />\n\t\t\t\t<Code code={`\nfinally(callback) {\n\treturn this.then(res => {\n\t\treturn Promise.resolve(callback()).then(() => res);\n\t}, err => {\n\t\treturn Promise.resolve(callback()).then(() => { throw err; });\n\t});\n}\t\t\t\t\t\n`} />\n\t\t\t\t<h3>10、promise相关题目</h3>\n\t\t\t\t<Code code={`\nasync function async1() {\n\tconsole.log(1);\n\tawait async2();\n\tconsole.log(2);\n}\n\nasync function async2() {\n\tconsole.log(3);\n}\n\nconsole.log(4);\n\nsetTimeout(function() {\n\tconsole.log(5);\n\tPromise.resolve().then(function() {\n\t\tconsole.log(6);\n\t})\n}, 0);\n\nsetTimeout(function() {\n\tconsole.log(7);\n\tPromise.resolve().then(function() {\n\t\tconsole.log(8);\n\t});\n}, 0);\n\nasync1();\n\nnew Promise(function(resolve) {\n\tconsole.log(9);\n\tresolve();\n}).then(function() {\n\tconsole.log(10);\n});\n\nconsole.log(11);\n\n// 输出结果为： 4, 1, 3, 9, 11, 2, 10, 5,6,7,8(自己第一次做答案： 4 1 9 11 10 3 2 5 6 7 8)\n将async1函数里的await去掉： 4, 1,3,2,9,11, 10, 5,6,7,8(自己第一次做答案： 4 1 3 2 9 11 10 5 6 7 8) `} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyCache extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现一个有缓存功能的函数</span></p>\n                <div className=\"article-desc\">\n                    实现一个缓存函数，如果要计算的参数之前已经计算过，那就拿缓存的值，如果没有重新计算。\n                    <Code code={`\nfunction add() {\n    const args = Array.from(arguments);\n    return args.reduce((preV, curV) => {\n        return preV + curV;\n    });\n}\nfunction memorize(fn) {\n    let cache = {};\n    return function() {\n        console.time('---计算耗时---');\n        const args = Array.from(arguments);\n        const key = JSON.stringify(args);\n        if (!cache[key]) {\n            const res = fn.apply(null, args);\n            cache[key] = res;\n            console.timeEnd('---计算耗时---');\n            return res;\n        } else {\n            console.timeEnd('---计算耗时---');\n            return cache[key];\n        }\n    }\n}\n\nconst adder = memorize(add);\nadder(1,2,3);\n\n\n//用Map实现\nfunction memorize(fn) {\n    let cache = new Map();\n    return function() {\n        console.time('---计算耗时---');\n        const args = Array.from(arguments);\n        const key = JSON.stringify(args);\n        if (!cache.has(key)) {\n            const res = fn.apply(null, args);\n            cache.set(key, res);\n            console.timeEnd('---计算耗时---');\n            return res;\n        } else {\n            console.timeEnd('---计算耗时---');\n            return cache.get(key);\n        }\n    }\n}\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MySetInterval extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">用setTimeout实现setInterval</span></p>\n                <div className=\"article-desc\">\n                    为什么要用setTimeout代替setInterval？ 参考文档： https://juejin.im/post/6844903825862557710<br />\n                    <Code code={`\nfunction mySetInterval(cb, time) {\n    var thisFn = arguments.callee;\n    var fn = function() {\n        cb();\n        thisFn.timeid = setTimeout(function() {\n            if (thisFn.timeid) {\n                clearTimeout(thisFn.timeid);\n            }\n            fn();\n        }, time);\n    }\n    thisFn.timeid = setTimeout(function() {\n        fn();\n    }, time);\n    return thisFn.timeid;\n}\n\nfunction myClearInterval() {\n    clearTimeout(mySetInterval.timeid);\n}`} />              \n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MySelf extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">自己实现各种方法</span></p>\n                <div className=\"article-desc\">\n                    1. 实现console.log方法：<br />\n                    <Code code={`\nfunction log() {\n    console.log(console, arguments);\n}`} />              \n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Light extends Component {\n    constructor(props) {\n        super(props);\n\n        function red(time) {\n            console.log('%c红灯亮 ' + time + 's', 'padding: 6px; background: red; font-size: 10px; color: white;border-radius: 4px;');\n        }\n        \n        function yellow(time) {\n            console.log('%c黄灯亮 ' + time + 's', 'padding: 6px; background: yellow; font-size: 10px; color: red;border-radius: 4px;');\n        }\n        \n        function green(time) {\n            console.log('%c绿灯亮 ' + time + 's', 'padding: 6px; background: green; font-size: 10px; color: white;border-radius: 4px;');\n        }\n        \n        function executor(cb, count) {\n            let time = 0;\n            return new Promise(resolve => {\n                let timeid = setInterval(() => {\n                    cb(count - time);\n                    time++;\n                    if (time === count) {\n                        clearInterval(timeid);\n                        resolve();\n                    }\n                }, 1000);\n            });\n        }\n        \n        function step() {\n            Promise.resolve().then(() => {\n                return executor(red, 6);\n            }).then(() => {\n                return executor(yellow, 3);\n            }).then(() => {\n                return executor(green, 15);\n            }).then(() => {\n                step();\n            });\n        }\n\n        async function step() {\n            await executor(red, 6); \n            await executor(yellow, 3); \n            await executor(green, 15);\n            step();\n        }\n        \n        step();\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现红绿灯🚥</span></p>\n                <div className=\"article-desc\">\n\t\t\t\t\t实现红绿灯交替亮灯变化<br />\n\t\t\t\t\t\n                    实现技术： Promise，setInterval<br />\n                    <Code code={`\nfunction red(time) {\n    console.log('%c红灯亮 ' + time + 's', 'padding: 6px; background: red; font-size: 10px; color: white;border-radius: 4px;');\n}\n\nfunction yellow(time) {\n    console.log('%c黄灯亮 ' + time + 's', 'padding: 6px; background: yellow; font-size: 10px; color: red;border-radius: 4px;');\n}\n\nfunction green(time) {\n    console.log('%c绿灯亮 ' + time + 's', 'padding: 6px; background: green; font-size: 10px; color: white;border-radius: 4px;');\n}\n\nfunction executor(cb, count) {\n    let time = 0;\n    return new Promise(resolve => {\n        let timeid = setInterval(() => {\n            cb(count - time);\n            time++;\n            if (time === count) {\n                clearInterval(timeid);\n                resolve();\n            }\n        }, 1000);\n    });\n}\n\nfunction step() {\n    Promise.resolve().then(() => {\n        return executor(red, 3);\n    }).then(() => {\n        return executor(yellow, 1);\n    }).then(() => {\n        return executor(green, 10);\n    }).then(() => {\n        step();\n    });\n}\n// 或者\n// async function step() {\n//     await executor(red, 6); \n//     await executor(yellow, 3); \n//     await executor(green, 15);\n//     step();\n// }\n\nstep();\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\n\nexport default class MyClone extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">实现浅拷贝 & 深拷贝</span>\n                </p>\n\n                <p className=\"item-title\">1. 实现浅拷贝</p>\n                <div className=\"quote\">\n                只拷贝对象或数组的第一层内容\n                </div>\n                <Code code={`\nfunction shellClone(target) {\n    if (typeof target === 'object' && target != null) {\n        const res = Array.isArray(target) ? [] : {};\n        for (let key in target) {\n            if (target.hasOwnProperty(key)) {\n                res[key] = target[key];\n            }\n        }\n        return res;\n    } else {\n        return target;\n    }\n}`} />\n                <p className=\"item-title\">2. 实现深拷贝</p>\n                <div className=\"quote\">层层拷贝对象或数组的每一层内容</div>\n                <Code code={`\nfunction deepClone(target) {\n    if (target === null) {\n        return target;\n    }\n    if (typeof target !== 'object') {\n        return target;\n    }\n    let res = Array.isArray(target) ? [] : {};\n    for (let key in target) {\n        if (target.hasOwnProperty(key) && typeof target[key] !== 'object') {\n            res[key] = target[key];\n        } else {\n            res[key] = deepClone(target[key]);\n        }\n    }\n    return res;\n}`} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyFlat extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">实现数组扁平化Flat</span></p>\n                <div className=\"quote\">\n\t\t\t\t\t1. 循环数组里的每一个元素<br />\n\t\t\t\t\t2. 判断该元素是否为数组<br />\n\t\t\t\t\t3. 是数组的话，继续循环遍历这个元素——数组<br />\n\t\t\t\t\t4. 不是数组的话，把元素添加到新的数组中\n\t\t\t\t</div>\n                <Code code={`\n// es5\nArray.prototype.myFlat = function() {\n    const _this = this;\n    let res = [];\n    let cycle = function(arr) {\n        arr.forEach(item => {\n            if (Array.isArray(item)) {\n                cycle(item);\n            } else {\n                res.push(item);\n            }\n        })\n    }\n    cycle(_this);\n    return res;\n}\n\n// reduce\nfunction myFlat(arr) {\n    return arr.reduce((pre, cur) => {\n        return pre.concat(Array.isArray(cur) ? myFlat(cur) : cur);\n    }, []);\n}\n\n// 指定展开的层数\nfunction flat (arr, count = 0) {\n    var res = [], newcount = 0;\n    function flatFn(arr) {\n        arr.forEach((item, index) => {\n            if (Array.isArray(item)) {\n                if (newcount < count) {\n                    newcount++;\n                    flatFn(item);\n                } else {\n                    res.push(item);\n                }\n            } else {\n                res.push(item);\n                if (index == arr.length - 1) {\n                    newcount = 0;\n                }\n            }\n        })\n    }\n    flatFn(arr);\n    return res;\n}\n`} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyReduce extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">实现数组reduce方法</span></p>\n                <div className=\"quote\">\n                初始值不传时的特殊处理：会默认使用数组中的第一个元素<br />\n                函数的返回结果会作为下一次循环的prev<br />\n                回调函数一共接受四个参数: 1. prev：上一次调用回调时返回的值; 2. 正在处理的元素; 3. 正在处理的元素的索引; 4. 正在遍历的集合对象\n                </div>\n                <Code code={`\nArray.prototype.myReduce = function(fn, prev) {\n    for (let i = 0; i < this.length; i++) {\n        if (typeof prev === 'undefined') {\n            prev = fn(this[i],this[i+1], i+1, this);\n            ++i;\n        } else {\n            prev = fn(prev, this[i], i, this); \n        }\n    }\n    return prev;\n}\n\n`} />\n               \n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class DataType extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">数据类型</span>\n                </p>\n                <div className=\"\">\n                    思考🤔<br />\n                    1. typeof null为什么为'object'？<br />\n                    这是因为，不同的对象在底层都表示为二进制，在Js中二进制的前三位都为0的话会被判断为object类型，而null的二进制表示全为0，自然前三位也是0，所以执行typeof时候会返回object。<br /><br />\n                    2. 让一个对象不可扩展？<br />\n                    使用Object.preventExtensions方法可以让目标对象不可扩展，但是是可以修改原有的属性值。<br />\n                    <Code code={`\nvar obj = {a: 1};\nObject.preventExtensions(obj);\n\nobj.b = 2;\nobj.b; // undefined， 在严格模式下将会抛出TypeError错误\n\nobj.a = 2;\nobj.a; // 2\n\ndelete obj.a; //true\nobj.a; // undefined`} /><br />\n\n                    3. 让一个对象不可扩展，不可删除属性，可修改属性值？<br />\n                    使用对象的Object.seal方法会创建一个密封对象，这个方法实际上是调用了对象的Object.preventExtensions方法，然后对现有属性标记为configurable: false.<br />\n                    <Code code={`\nvar obj = {a: 1};\nObject.seal(obj);\n\nobj.b = 2;\nobj.b; // undefined\n\nobj.a = 2;\nobj.a; // 2\n\ndelete obj.a; //false\nobj.a; // 2`} />\n\n                    4. 让一个对象不可扩展，不可删除属性，不可修改属性？<br />\n                    使用对象的Object.freeze方法会创建一个冻结对象，这个方法实际上是先调用对象的Object.seal方法进行密封，然后把所有属性的标记为wirtable:false,这样就会无法修改值。<br />\n                    <Code code={`\n// 实现一个对象的深度冻结方法\nfunction deepFreeze(obj) {\n    Object.freeze(obj);\n    for(let key in obj) {\n        if (obj.hasOwnProperty(key) && typeof obj[key] === 'object') {\n              deepFreeze(obj[key]);  \n        }\n    }\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ObjectNote extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">Object</span>\n                </p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、属性描述符</span></p>\n                <div className=\"article-desc\">\n                    在创建对象时，对象的属性会使用对象属性描述符的默认值，我们可以通过使用Object.defineProperty方法来添加一个新属性或者修改一个已有属性并对特性进行设置。<br />\n\n                    <Code code={`\nvar obj = {};\nObject.defineProperty(obj, 'a', {\n    value: 2,           // 对象obj属性a的值\n    writable: true,     // 属性a可写，默认true\n    configurable: true, // 属性a可配置（可以使用delete），默认true\n    enumerable: true,   // 属性a可以枚举，默认true\n})`} />\n                    可以通过Object.getOwnPropertyDescriptor方法来获取对象属性的属性描述符：<br />\n                    <Code code={`\nObject.getOwnPropertyDescriptor(obj, 'a');\n得到：\n{\n    value: 2,\n    writable: true,\n    configurable: true,\n    enumerable: true,\n}\n`} />\n                    各个属性的解读：<br/>\n                    1. writable: 决定是否可以修改属性的值，如果为false，修改属性值会静默失败，在严格模式下会报TypeError错。<br/><br/>\n                    2. configurable: 只要属性是可以配置的，就可以使用defineProperty方法来修改属性描述符，不管是不是严格模式，如果去修改一个configurage为false的描述符，都会报错，把configurable修改成false是单向的，无法撤销。<br/><br/>\n                    3. enumerable: 该属性控制的是属性是否会出现在对象的属性枚举中，比如说for...in循环。\n                </div>\n                \n\n                <p className=\"item-title\"><span className=\"textShadow\">二、不变性</span></p>\n                <div className=\"article-desc\">\n                    有时候我们希望对象或者对象的属性是不可变的。<br/>\n                    1. 禁止扩展：Object.preventExtensions(), 该方法可以让目标对象不可扩展，但是是可以修改原有的属性值<br/>\n                    <Code code={`\nvar obj = {a: 1};\nObject.preventExtensions(obj);\n\nobj.b = 2;\nobj.b; // undefined， 在严格模式下将会抛出TypeError错误\n\nobj.a = 2;\nobj.a; // 2\n\ndelete obj.a; //true\nobj.a; // undefined`} /><br />\n                    2. 密封：Object.seal(), 该方法可以让对象不可扩展，不可删除属性，但可以修改属性值<br />\n                    该方法实际上是调用了Object.preventExtensions方法，然后把所有的属性标记为configurable：false实现<br />\n                    <Code code={`\nvar obj = {a: 1};\nObject.seal(obj);\n\nobj.b = 2;\nobj.b; // undefined\n\nobj.a = 2;\nobj.a; // 2\n\ndelete obj.a; //false\nobj.a; // 2`} />\n                    3. 冻结：Object.freeze(), 该方法可以让对象不可扩展，不可删除属性值，不可修改属性值<br />\n                    该方法实际上是调用了Object.seal，然后把所有的属性标记为writable：false实现<br />\n                    <Code code={`\nvar obj = {a: 1};\nObject.freeze(obj);\n\nobj.b = 2;\nobj.b; // undefined\n\nobj.a = 2;\nobj.a; // 1\n\ndelete obj.a; //false\n`} />\n                    4. 深度冻结对象：让该对象的属性值也为对象的也调用Object.freeze方法，从而达到深度冻结对象。<br />\n                    <Code code={`\n// 实现一个对象的深度冻结方法\nfunction deepFreeze(obj) {\n    Object.freeze(obj);\n    for(let key in obj) {\n        if (obj.hasOwnProperty(key) && typeof obj[key] === 'object') {\n              deepFreeze(obj[key]);  \n        }\n    }\n}`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、存在性</span></p>\n                <div className=\"article-desc\">\n                    如何区分一个对象的属性值为undefined是本来存储的就是undefined还是因为在对象中不存在该属性所以返回的undefined？<br /><br />\n                    1. in 操作符： in会检查属性是否在对象及其原型链中<br />\n                    2. hasOwnProperty方法： 该方法会检查属性是否存在当前的对象中，不会检查原型链<br />\n                    <Code code={`\nvar obj = {a: 1}\n\n\"a\" in obj; // true\n\"b\" in obj; // false\n\nobj.hasOwnProperty('a'); //true\nobj.hasOwnProperty('b'); //false`} /><br/>\n                    <span className=\"mark\">对象的枚举</span><br/>\n                    1. for...in： 在for...in循环中，只能枚举到enumerable为true的属性,包括原型链<br/>\n                    2. propertyIsEnumerable(): 该方法会检查改定的属性名是否直接存在于对象中（而不是原型链上）并且满足enumerable为true <br/>\n                    3. getOwnPropertyNames(): 返回一个数组，包含所有属性，无论它们是否可以枚举，只查找的是对象本身的属性<br/>\n                    4. Object.keys(): 返回一个数组，包含所有可以枚举的属性，只查找的是对象本身的属性<br/>\n                    <Code code={`\nvar obj = {a: 1};\nObject.defineProperty(obj, 'b', {\n    value: 2,\n    configurable: true,\n    writable: true,\n    enumerable: false,\n});\n\nfor(let key in obj) {\n    console.log(key); // a\n}\nobj.propertyIsEnumerable('a'); //true\nobj.propertyIsEnumerable('b'); //false\n\nObject.getOwnpropertyNames(obj); // ['a', 'b']\nObject.keys(obj); // ['a']`} /><br />\n                    <span className=\"mark\">遍历</span><br/>\n                    for...in可以用来遍历属性，但是如何遍历属性的值呢？<br />\n                    在数组中可以通过for...of来循环遍历值: <br />\n                    <Code code={`\nvar arr = [1,2,3,4];\nfor(let value of arr) {\n    console.log(value); // 1,2,3,4\n}`} />\n                    for...of循环首先会向北访问的对象请求一个迭代器对象，然后通过调用迭代器对象的next()方法来遍历所有返回值。<br />\n                    数组有内置的@@iterator，因此for...of可以直接应用在数组上<br />\n                    <Code code={`\nvar arr = [1,2,3,4];\nvar it = arr[Symbol.iterator]();\n\nit.next(); // {value: 1, done: false}\nit.next(); // {value: 2, done: false}\nit.next(); // {value: 3, done: false}\nit.next(); // {value: 4, done: false}\nit.next(); // {done: true}\n`} />\n                    按照数组的原理，给对象实现遍历的功能：<br />\n                    <Code code={`\nvar obj = {a: 2, b: 3};\nObject.defineProperty(obj, Symbol.iterator, {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: function() {\n        var o = this;\n        var index = 0;\n        var key = Object.keys(obj);\n        return {\n            next: function() {\n                return {\n                    value: o[key[index++]],\n                    done: (index > keys.length),\n                }\n            }\n        }\n    }\n})\n\n//手动遍历\nvar it = obj[Symbol.iterator]();\nit.next(); // {value: 2, done: false}\nit.next(); // {value: 3, done: false}\nit.next(); // {value: undefined, done: true}\n\n//用for...of遍历\nfor (let v of obj) {\n    console.log(v); // 2  3\n}`}/>\n                </div>\n\n                \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyObjectCreate extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">实现Object.create方法</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n/*\n* 实现思路\n*\t1. Object.create()会创建一个新对象并把它关联到我们指定的对象，\n        这样我们就可以充分发挥[[prototype]]机制的威力。\n*\t2. Object.create(null)会创建一个拥有空[[prototype]]链接的对象，\n        这个对象无法进行委托，由于这个对象没有原型链，所以instanceof操作符无法进行判断，因此总是返回false。\n*/\n\nfunction myCreate(target) {\n    function F() {}\n    F.prototype = target;\n    return new F();\n}\n`} />\n                </div>\n                <p className=\"item-title\"><span className=\"textShadow\">Object.create</span></p>\n                <div className=\"article-desc\">\n                    用法： Object.create(proto,[propertiesObject])<br/>\n                    proto: 新创建对象的原型对象<br/>\n                    propertiesObject:可选。要添加到新对象的可枚举（新添加的属性是其自身的属性，而不是其原型链上的属性）的属性。<br/>\n                    Object.create(null)返回一个纯粹的空对象，没有Object原型链上的属性和方法。<br/>\n                    <Code code={`\nvar obj = {a: 1};\nvar newObj = Object.create(obj, {\n    b: {\n        configurable: true,\n        writable: true,\n        enumerable: true,\n        value: 2\n    },\n    c: {\n        configurable: false,\n        writable: false,\n        enumerable: false,\n        value: 3\n    }\n})`} />\n                </div>\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class CompilerNote extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">编译原理</span>\n                </p>\n                <p className=\"item-title\">一、分词/词法分析（Tokenizing/Lexing）</p>\n                <div className=\"quote\">\n                    在词法分析阶段，会将由字符组成的字符串分解成有意义的代码块，这些代码块被称为词法单元（token）。<br />\n                    var a = 2; 这段程序会被分解成为词法单元：var、a、=、2、;。\n                </div>\n\n                <p className=\"item-title\">二、解析/语法分析（Parsing)</p>\n                <div className=\"quote\">\n                    语法分析过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树”（AST）。<br />\n                    var a = 2 生成的抽象语法树如下：(生成AST的网址：<a href=\"https://astexplorer.net/\" target=\"_blank\">https://astexplorer.net/</a>)<br />\n                    <Code code={`\n{\n    \"type\": \"Program\",\n    \"start\": 0,\n    \"end\": 10,\n    \"body\": [\n      {\n        \"type\": \"VariableDeclaration\",\n        \"start\": 0,\n        \"end\": 10,\n        \"declarations\": [\n          {\n            \"type\": \"VariableDeclarator\",\n            \"start\": 4,\n            \"end\": 9,\n            \"id\": {\n              \"type\": \"Identifier\",\n              \"start\": 4,\n              \"end\": 5,\n              \"name\": \"a\"\n            },\n            \"init\": {\n              \"type\": \"Literal\",\n              \"start\": 8,\n              \"end\": 9,\n              \"value\": 2,\n              \"raw\": \"2\"\n            }\n          }\n        ],\n        \"kind\": \"var\"\n      }\n    ],\n    \"sourceType\": \"module\"\n  }`} />\n                </div>\n\n                <p className=\"item-title\">三、代码生成</p>\n                <div className=\"quote\">\n                    将AST转换为可执行的代码的过程被称为代码生成。<br />\n                    js代码大部分情况下编译发生在代码执行前的几微秒钟。\n                </div>\n\n                <p className=\"item-title\">四、过程</p>\n                <div className=\"quote\">\n                    1. 引擎： 从头到尾负责整个js程序的编译及执行过程<br />\n                    2. 编译器：负责语法分析及代码生成工作<br />\n                    3. 作用域：负责收集并维护所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。<br /><br />\n\n                    var a = 2; 编译器处理过程：<br />\n                    第一步：遇到var a，编译器会询问当前作用域中是否已经有一个该名称的变量，如果是，编译器会忽略该声明，继续进行编译；否则它会在当前作用域的集合中声明一个新的变量，并命名为a；<br /><br />\n                    第二步：接下来编译器会为引擎生成运行时的代码，这些代码被用来处理a = 2的赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫做a的变量，如果有就使用这个变量，否则会继续查找。<br /><br />\n                </div>\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class ScopeNote extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">词法作用域</span>\n                </p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、属性描述符</span></p>\n                <div className=\"article-desc\">\n                    \n                </div>\n                \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class MyAsyncAwait extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">async/await</span>\n                </p>\n                <div className=\"article-desc\">\n                    <h2>1. async/await简介</h2>\n                    <div className=\"quote\">\n                        async是Generator函数的语法糖。<br /><br />\n                        async函数自带执行器，async函数的执行和普通函数一样，只要一行。<br /><br />\n                        更好的语义：async和await，比起星号和yield，语义更清楚。async表示函数里有异步操作，await表示紧跟在后面的表达式要等待结果。<br /><br />\n                        更广的适用性：async函数的await命令后面，可以是Promise对象和原始类型的值（数值，字符串，布尔值，这时候会自动转成立即resolved的Promise对象）。<br /><br />\n                        返回值是Promise：async函数的返回值是promise对象，可以使用then方法进行下一步操作。<br /><br />\n                        async函数完全可以看做是多个异步操作，包装成一个promise对象， await命令就是内部then命令的语法糖。\n                    </div>\n\n                    <h2>2. 基本用法</h2>\n                    <div className=\"quote\">\n                        async函数返回一个Promise对象，可以使用then方法添加回调函数，当函数执行的时候，一旦遇到await就先返回，等到异步操作完成，在接着执行函数体后面的语句。<br /><br />\n                    </div>\n                    <Code code={`\nfunction timeout(ms) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    });\n}\n  \nasync function asyncPrint(value, ms) {\n    await timeout(ms);\n    console.log(value);\n}\n  \nasyncPrint('hello world', 5000);`} />\n\n                    <h2>3. 语法</h2>\n                    <div className=\"quote\">\n                        1. async函数内部return语句返回的值，会成为then方法回调函数的参数。<br /><br />\n                        2. async函数内部抛出错误，会导致返回的promise对象变为reject装填，抛出的错误对象会被catch方法回调函数接收到。<br /><br />\n                        3. Promise对象的状态变化，async函数返回的Promise对象，必须等到内部所有的await命令后面的Promise对象执行完，才会发生状态的改变，除非遇到return语句或者抛出错误，也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。\n                    </div>\n\n                    <Code code={`\nasync function fn() {\n    return 'hello world';\n}\nfn().then(res => {\n    console.log(res); // 'hello world'\n});\n\n// 出错\nasync function fn() {\n    throw new Error('error');\n}\nfn().then(\n    res => {},\n    err => { console.log(err) } // error\n);`} />\n                    <h2>4. await命令</h2>\n                    <div className=\"quote\">\n                        1. 正常情况下，await命令后面是一个Promise对象，返回该对象的结果，如果不是promise对象，就直接返回对应的值。<br /><br />\n                        2. 另外一种情况，await命令后面是一个thenable对象（即定义了then方法的对象），那么await会将其等同于Promise对象。<br /><br />\n                        3. await命令后面的Promise对象如果变为reject状态，则reject的参数会被catch方法回调函数接受到。<br /><br />\n                        4. 任何一个await语句后面的Promise对象变为reject状态，那么整个async函数都会中断执行。<br /><br />\n                    </div>\n                    <Code code={`\nasync function fn() {\n    // return 123;\n    // 等同于\n    return await 123;\n}\nfn().then(res => {\n    console.log(res); // 123\n})\n\nclass Sleep {\n    constructor(timeout) {\n        this.timeout = timeout;\n    }\n    then(resolve, reject) {\n        const ts = +new Date();\n        setTimeout(() => {\n            resolve(+new Date() - ts);\n        }, this.timeout);\n    }\n}\n\nasync function fn() {\n    const sleep = await new Sleep(1000);\n    console.log(sleep);\n}\nfn();\n//===============\nasync function fn() {\n    await Promise.reject('出错了');\n}\n\nfn().then(res => console.log(res)).catch(err => console.log(err)); //出错了 `} />\n\n                    <h2>5. 使用注意点</h2>\n                    <div className=\"quote\">\n                        1. await命令后面的promise对象，运行结果可能是rejected，所以最好把await命令放在try...catch中。<br /><br />\n                        2. 多个await命令后面的异步操作，如果不存在继发的关系，最好让它们同时触发。<br /><br />\n                        3. await命令只能用在async函数中，如果用在普通函数中会报错。<br /><br />\n                        4. async函数可以保留运行堆栈。\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MySet extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">Set</span>\n                </p>\n\n                <p className=\"item-title\"><span className=\"textShadow\">一、Set是什么</span></p>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">Set的概念及特性：</span><br />\n                    Set是一种新的数据结构。类似于数组，但是每个项目是唯一的不可重复。<br />\n                    Set是一个构造函数，用来生成Set数据结构。<br />\n                    Set可以接受一个数组作为参数，用来初始化。<br />\n                    向Set中加入值的时候不会发生类型转换，1和\"1\"是两个不同的值。<br />\n                    Set内部判断两个值是否相等是用===来比较的。<br />\n                    特例：Set认为NaN等于NaN，因此在Set中只能加入一个NaN。<br />\n                    在Set中两个“空对象”是不相等的。<br />\n                    Array.from()方法可以将Set结构转为数组。<br />\n\n                    <Code code={`\nconst set = new Set([1,2,3]);\n[...set]; // [1,2,3]\nset.size; // 3\n\nset.add(NaN);\nset.add(NaN);\nset.size; // 4\nset.add({});\nset.add({});\nset.size; // 6\nArray.from(set);  // [1,2,3, NaN, {}, {}]\n`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、Set实例的属性及方法</span></p>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">Set结构的实例属性：</span><br /><br />\n                    --- Set.prototype.constructor: 构造函数，默认是Set函数<br /><br />\n                    --- Set.prototype.size: 返回Set实例的成员的个数<br /><br />\n                    --- Set.prototype.size: 返回Set实例的成员的个数<br /><br />\n\n                    <span className=\"mark\">Set结构的实例方法---操作方法</span><br /><br />\n                    --- Set.prototype.add(value): 添加一个值，返回Set结构本身<br /><br />\n                    --- Set.prototype.delete(value): 删除某个值，返回一个布尔值，表示删除是否成功<br /><br />\n                    --- Set.prototype.has(value): 返回一个布尔值，表示该值是否为Set的成员<br /><br />\n                    --- Set.prototype.clear(): 清除所有成员，没有返回值<br /><br />\n\n                    <Code code={`\nvar set = new Set();\nset.add(1);\nset.size; // 1\nset.delete(1);\nset.size; // 0\nset.add(1);\nset.has(1); // true\nset.clear();`} />\n\n                    <span className=\"mark\">Set结构的实例方法---遍历方法</span><br /><br />\n                    --- Set.prototype.keys(): 返回键名的遍历器，返回一个键名组成的遍历器，含有next方法<br /><br />\n                    --- Set.prototype.values(): 返回键值的遍历器，返回一个键值名组成的遍历器，含有next方法<br /><br />\n                    --- Set.prototype.entries(): 返回键值对的遍历器，返回一个键值对组成的遍历器，含有next方法<br /><br />\n                    --- Set.prototype.forEach(): 使用回调函数遍历每个成员(和数组的forEach方法类似), forEach方法还可以有第二个参数，表示绑定处理函数内部的this对象。<br /><br />\n                    <span className=\"mark\">Set的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</span><br />\n                    由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。<br />\n                    <Code code={`\nvar set = new Set([1,2,3,4,5]);\nvar keys = set.keys();\nkeys.next(); // {value: 1, done: false}\n......\nfor (let key of keys()) {\n    console.log(key); // 1,2,3,4,5\n}\n\nvar values = set.values();\nvalues.next(); // {value: 1, done: false}\n......\nfor (let value of values) {\n    console.log(value); // 1,2,3,4,5\n}\n\nfor(let item of set.entries()) {\n    console.log(item); // [1,1] [2,2] [3,3] [4,4] [5,5]\n}\n\n// Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值.\n// 回调函数的含义依次为： 键值、键名、集合本身\nset.forEach((value, key, _set) {\n    console.log(value, key);\n});\n// 1 1\n// 2 2\n// 3 3\n// 4 4\n// 5 5\n`} />\n                    <span className=\"mark\">Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。<br/>\n                    这意味着，可以省略values方法，直接用for...of循环遍历 Set。</span><br/>\n                    <div className=\"code-desc\">Set.prototype[Symbol.iterator] === Set.prototype.values</div>\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、Set应用</span></p>\n                <div className=\"article-desc\">\n                    1. 数组去重: <br />\n                    <Code code={`\nvar set = new Set([1,2,3,2,1]);\nvar arr = [...set]; // 1,2,3`} />\n                    2. 数组的map和filter可以间接使用Set结构: <br />\n                    <Code code={`\nvar set = new Set([1,2,3].map(item => item * 2))\nvar set = new Set([1,2,3].filter(item => item > 1))`} />\n                    3. 实现并集: <br/>\n                    <Code code={`\nvar set1 = new Set([1,2,3]);\nvar set2 = new Set([4,5,6]);\nvar union = new Set([...set1, ...set2]);\n// 包含1，2，3，4，5，6的set结构 set { 1, 2, 3, 4, 5, 6 }`} />\n                    4. 实现交集：<br />\n                    <Code code={`\nvar set1 = new Set([1,2,3,4]);\nvar set2 = new Set([2,3,5]);\nvar intersect = new Set([...set1].filter(item => set2.has(item)))\n// intersect为包含2，3的set结构 set {2, 3}`} />\n                    5. 实现差集：<br />\n                    <Code code={`\nvar set1 = new Set([1,2,3]);\nvar set2 = new Set([4, 3, 2]);\n//set1相对于set2的差集：\nvar diff = new Set([...set1].filter(item => !set2.has(item));\n// set { 1 }`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\nexport default class MyClass extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">Class</span>\n                </p>\n                <div className=\"article-desc\">\n                    <h2>1. 对class类的简介和使用说明</h2>\n                    <div className=\"quote\">\n                        class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br /><br />\n                        类的数据类型是函数，类本身就指向构造函数。<br /><br />\n                        使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。<br /><br />\n                        构造函数的prototype属性，在 ES6 的“class类”上面继续存在。<br /><br />\n                        类的所有方法都定义在类的prototype属性上面。类的实例上面调用方法，其实就是调用原型上的方法。<br /><br />\n                        由于类的方法定义在prototype对象上，所以类的新方法可以添加在prototype对象上。Object.assign方法可以方便地一次向类添加多个方法。<br /><br />\n                        类的内部所有定义的方法，都是不可枚举的（non-enumerable）。这一点与 ES5 的行为不一致。<br />\n                    </div>\n                    <Code code={`\nclass Hello {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    sayHello() {\n        console.log('--- hello ---');\n    }\n}\n// 使用\nconst hello = new Hello(1, 2);\ntypeof Hello; // function\n\nHello === Hello.prototype.constructor; // true\nObject.keys(Hello.prototype); // []\nObject.assign(Hello.prototype, {\n    add() {},\n    toString() {},\n});`} />    \n                    <h2>2. constructor方法</h2>\n                    <div className=\"quote\">\n                        constructor方法是类的默认方法，通过new命令生成实例的时候，自动调用contructor方法。一个类必须有contructor方法，如果没有显示定义，一个空的contructor方法会被添加。<br /><br />\n                        constructor方法默认返回实例对象（this）。也可以返回另一个对象。<br /><br />\n                        类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。\n                    </div>\n\n                    <h2>3. 实例</h2>\n                    <div className=\"quote\">\n                        使用new命令生成类的实例，如果忘记加上new，像函数那样调用Class，将会报错。<br /><br />\n                        与 ES5 一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。<br /><br />\n                        与 ES5 一样，类的所有实例共享一个原型对象。<br /><br />\n                        可以通过实例的__proto__属性为“类”添加方法。(不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。)\n                    </div>\n                    <Code code={`\nclass Hello {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    add() {\n        return this.x + this.y;\n    }\n}\n\nconst h1 = new Hello(1,2);\nconst h2 = new Hello(2,3);\n\nh1.hasOwnProperty(x); // true\nh1.hasOwnProperty(add); // false\nh1.__proto__.hasOwnProperty('add');  // true\nh1.__proto__ === h2.__proto__; // true\n\nh1.__proto__.getValue = function() {return this.x * this.y;}\nh1.getValue(); // 2\nh2.getValue(); // 6`} />\n                </div>\n\n                <h2>4. 注意点</h2>\n                <div className=\"quote\">\n                    1. 严格模式: 类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。<br /><br />\n                    2. 不存在提升: 类不存在变量提升（hoist），这一点与 ES5 完全不同。(这种规定的原因与下文要提到的继承有关，必须保证子类在父类之后定义。)<br /><br />\n                </div>\n\n                <h2>5. 静态方法</h2>\n                <div className=\"quote\">\n                    类相当于实例的原型，所有在类中定义的方法，都会被实例继承。<br /><br />\n                    如果在一个方法前加static关键字，表示该方法不会被实例继承，而是直接通过类来调用，这种方法称为静态方法。<br /><br />\n                    如果静态方法包含this关键字，这个this指的是类，而不是实例。<br /><br />\n                    静态方法可以和非静态方法重名。<br /><br />\n                    父类的静态方法可以被子类继承。<br /><br />\n                    静态方法也可以从super对象上调用。\n                </div>\n                <Code code={`\nclass Hello {\n    static sayHello() {\n        console.log('hello world');\n        const value = this.getValue();\n        console.log(value);\n    }\n    sayHello() {\n        console.log('say hello');\n    }\n\n    getValue() {\n        return 123;\n    }\n    static getValue() {\n        return 456;\n    }\n    static getName() {\n        return 'Hello';\n    }\n}\n\nconst h1 = new Hello();\nh1.getName(); // 报错，实例没有getName方法\nHello.getName(); // 'Hello', 静态方法只能由类调用\nHello.sayHello(); // hello world , 456`} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MyModule extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">module</span>\n                </p>\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MyProxy extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">Proxy</span>\n                </p>\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MyInterator extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">interator</span>\n                </p>\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MyGenerator extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">generator</span>\n                </p>\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MyWeakSet extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">WeakSet</span>\n                </p>\n\n                <p className=\"item-title\"><span className=\"textShadow\">一、WeakSet</span></p>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">WeakSet的概念及特性：</span><br />\n                    WeakSet 和 Set相似，也是不重合的值的集合。<br />\n                    WeakSet与Set的区别是： <br /><br />\n                    1. WeakSet的成员只能是对象，不能是其他类型的值。<br />\n                    2. WeakSet中的对象都是弱引用，即垃圾回收机制不考虑WeakSet对该对象的引用，如果说其他对象都不在引用该对象，那么垃圾回收机制会自动回收该对象所占的内存，不考虑该对象还存在WeakSet中。<br /><br />\n                    WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。<br /><br />\n                    3. WeakSet不可遍历： 由于WeakSet里的成员是弱引用，WeakSet 的成员是不适合引用的，因为它会随时消失。另外，由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet 不可遍历。<br /><br />\n                </div> \n\n                <p className=\"item-title\"><span className=\"textShadow\">二、WeakSet语法及使用</span></p>\n                <div className=\"article-desc\">\n                    WeakSet是一个构造函数，通过使用new创建WeakSet数据结构。<br /><br />\n                    作为构造函数，WeakSet接受一个数组或者类数组（数组的成员只能是对象）为参数，该数组的每一项会自动成为WeakSet的成员。<br />\n                    <Code code={`\nvar ws = new WeakSet();\nvar ws1 = new WeakSet([{}]);`} />\n\n                    <span className=\"mark\">WeakSet实例方法：</span><br />\n                    --- WeakSet.prototype.add(value): 向WeakSet实例中添加一个新成员<br /><br />\n                    --- WeakSet.prototype.delete(value): 删除WeakSet实例中指定的一个成员<br /><br />\n                    --- WeakSet.prototype.has(value): 返回一个布尔值，表示某个值是否在WeakSet实例中<br /><br />\n                    <Code code={`\nvar ws = new WeakSet();\nvar obj = {};\nws.add(obj);\nws.has(obj); // true\nws.delete(obj);\nws.has(obj); // false`} />\n                    <span className=\"mark\">WeakSet 没有size属性，没有forEach方法，没有办法遍历它的成员。</span><br />\n                    WeakSet 不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。<br />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MyMap extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">Map</span>\n                </p>\n\n                <p className=\"item-title\"><span className=\"textShadow\">一、Map概念及特性</span></p>\n                <div className=\"article-desc\">\n                    0. Map是一个构造函数，通过new命令生成Map的实例。<br /><br />\n                    1. Map结构类似于Object，也是键值对的集合，但是键的范围不限于字符串，各种类型的值都可以做为键。<br /><br />\n                    2. Map结构提供的是一种“值-值”的对应，也是一种更完善的hash结构实现。<br /><br />\n                    3. Map结构的参数：任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作Map构造函数的参数。<br /><br />\n                    4. 可以使用Set 对象和 Map 对象，当作Map构造函数的参数，生成了新的 Map 对象。<br /><br />\n                    5. 如果对同一个键多次赋值，后面的值将覆盖前面的值。<br /><br />\n                    6. 读取一个未知的键，则返回undefined。<br /><br />\n                    7. 只有对同一个对象的引用，Map 结构才将其视为同一个键。<br /><br />\n                    8. 同样的值的两个实例，在 Map 结构中被视为两个键。<br /><br />\n                    9. Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。<br /><br />\n                    10. Map解决了同名属性碰撞（clash）的问题。<br /><br />\n                    11. Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如0和-0就是一个键，布尔值true和字符串true则是两个不同的键。<br /><br />\n                    12. undefined和null也是两个不同的键。<br /><br />\n                    13. 虽然NaN不严格相等于自身，但 Map 将其视为同一个键。<br /><br />\n                    <Code code={`\nvar map = new Map();\nvar obj = {a: 1};\n// 使用对象作为键\nmap.set(obj, 'hello');\nmap.get(obj); // 'hello'\n\nvar map1 = new Map([\n    [name: 'xixi'],\n    [age: 18],\n]);\n\nmap1.size; // 2\nmap1.get('name'); // 'xixi'\nmap1.get('age'); // 18\nmap1.has('name'); // true\n\n// map结构接收数组为参数的时候，其实执行的是如下操作：\n[[name: 'xixi'], [age: 18]].forEach([key, value]) => map1.set(key, value);\n\n//具有Iterator接口、且每个成员都是一个双元素的数组的数据结构都可以当作参数\nvar set = new Set([[a: 1], [b: 2]]);\nvar m = new Map(set);\nm.get('a'); // 1\nm.get('b'); // 2\n\n//同一个键多次赋值，后面的会覆盖前面的\nm.set('aa', 12);\nm.set('aa', 34);\nm.get('aa'); // 34\n\n// 获取不存在的键，返回undefined\nm.get('helloworld'); // undefined\n\n// 对同一个对象的引用，Map视为同一个键，因此set的数组和get的数组键名是两个引用\nm.set([1], 111);\nm.get([1]); // undefined\n\nvar arr = [1, 2];\nm.set(arr, 'arr');\nm.get(arr); // 'arr'\n\n// -0 === 0\nm.set(-0, 'zero');\nm.get(0); // 'zero'\n\nm.set(undefined, 'i am undefined');\nm.get(undefined); // 'i am undefined'\n\nm.set(null, 'i am null');\nm.get(null); // 'i am null'\n\nm.set(NaN, 'i am NaN');\nm.get(NaN); // 'i am NaN'\nm.set(NaN, '2222');\nm.get(NaN); // '2222'\n`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、Map实例的属性和方法</span></p>\n                <div className=\"article-desc\">\n                    1. size属性： size属性返回Map结构的成员总数<br /><br />\n                    2. 操作方法：<br />\n                    --- Map.prototype.set(key, value): 该方法设置键名为key，值为value，返回这个Map结构；如果键名存在则覆盖，否则新建。<br /><br />\n                    --- Map.prototype.get(key): 该方法读取键名为key的值，如果找不到key，则返回undefined。<br /><br />\n                    --- Map.prototype.has(key): has方法返回一个布尔值，表示key是否在当前的Map结构中。<br /><br />\n                    --- Map.prototype.delete(key): delete方法为删除键key，删除成功返回true， 否则返回false。<br /><br />\n                    --- Map.prototype.clear(): 清除所有成员，没有返回值。\n\n                    <Code code={`\nvar m = new Map();\nvar obj = {a: 1};\nm.set(obj, 111);\nm.size; // 1\nm.get(obj); // 111\nm.has(obj); // true\nm.delete(obj); // true\nm.size; // 0 \nm.set(obj, 111);\nm.clear(); \nm.size; // 0                   \n`} />\n                    3. 遍历方法：<br />\n                    --- Map.prototype.keys(): 返回键名的遍历器<br /><br />\n                    --- Map.prototype.values(): 返回键值的遍历器<br /><br />\n                    --- Map.prototype.entries(): 返回所有成员的遍历器<br /><br />\n                    --- Map.prototype.forEach(): 遍历Map所有成员,forEach方法还可以接受第二个参数，用来绑定this。<br />\n\n                    Map 的遍历顺序就是插入顺序。\n                    <Code code={`\nvar map = new Map([\n    [name: 'xixi'],\n    [age: 18],\n]);\nfor(let key of map.keys()) {\n    console.log(key); // name age\n}\n\nfor(let value of map.values()) {\n    console.log(value); // 'xixi' 18\n}\n\nfor(let [key, value] of map.entries()) {\n    console.log(key, value); \n}\n// 'name' 'xixi'\n// 'age' 18\n\nmap.forEach((value, key, _map) => {\n    console.log(value, key);\n})\n// 'name' 'xixi'\n// 'age' 18`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、Map与其他数据结构互相转换</span></p>\n                <div className=\"article-desc\">\n                    1. Map转数组：使用扩展运算符<br />\n                    <Code code={`\nvar map = new Map([\n    ['name', 'xixi'],\n    ['age', 18]\n]);\nvar arr = [...map]; //[['name', 'xixi'], ['age', 18]] `} />\n                    2. 数组转Map：数组作为Map的入参<br />\n                    <Code code={`\nvar arr = [['name', 'xixi'], ['age', 18]];\nvar map = new Map(arr);`} />\n                    3. Map转为对象：如果所有 Map 的键都是字符串，它可以无损地转为对象<br />\n                    <Code code={`\nvar map = new Map();\nmap.set('yes', true);\nmap.set('no', false);\n\nfunction mapToObj(map) {\n    const obj = Object.create(null);\n    for(let [key, value] of map) {\n        obj[key] = value;\n    }\n    return obj;\n}\n\nvar obj = mapToObj(map);\n{yes: true, no: false}`} />\n                    4. 对象转Map: 可以使用对象的Object.entries()方法<br />\n                    <Code code={`\nvar obj = {a: 1, b: 2};\nvar map = new Map(Object.entries(obj));\n\n// 或者自己实现一个转换函数\nfunction obj2Map(obj) {\n    const map = new Map();\n    for(let key of Object.keys(obj)) {\n        map.set(key, obj[key]);\n    }\n    return map;\n}\n`} />           \n                    5. Map转JSON：分为两种情况：Map的键名都为字符串型 和 Map的键名有非字符串型<br/>\n                    <Code code={`\n//Map的键名都为字符串型: 先将Map转为Object，然后再转为JSON\nlet map = new Map().set('yes', true).set('no', false);;\nfunction map2JSON(map) {\n    return JSON.stringify(mapToObj(map));\n} \nmap2JSON(map); // '{\"yes\": true, \"no\": false}'\n\n// Map的键名有非字符串型\nlet map = new Map().set(true, 7).set({foo: 3}, ['abc']);\nfunction map2ArrayJSON(map) {\n    return JSON.stringify([...map])\n}\nmap2ArrayJSON(myMap); // '[[true, 7], [{\"foo\": 3}, [\"abc\"]]]'\n`} />\n                    6. JSON转Map：分为两种情况，所有键名都是字符串 和 整个JSON就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。<br/>\n                    <Code code={`\n//所有键名都是字符串\nfunction jsonToStrMap(jsonStr) {\n    return obj2Map(JSON.parse(jsonStr));\n}\njsonToStrMap('{\"yes\": true, \"no\": false}')\n\n// 第二种情况\nfunction jsonToMap(jsonStr) {\n    return new Map(JSON.parse(jsonStr));\n}\njsonToMap('[[true,7],[{\"foo\":3},[\"abc\"]]]')\n`} />\n                </div>\n                <h3>相关面试题</h3>\n                <Code code={`\nvar a = {}, b = '123', c = 123;\na[b] = 'b'; a[c] = 'c';\nconsole.log(a[b]); // 'c'\n\nvar a = {}, b = Symbol('123'), c = Symbol('123');\na[b] = 'b'; a[c] = 'c';\nconsole.log(a[b]); // 'b'\n\nvar a = {}, b = {key: '123'}, c = {key: 456};\na[b] = 'b'; a[c] = 'c';\nconsole.log(a[b]); // 'c'\n\n\nvar a = new Map(), b = '123', c = 123;\na.set(b, 'b'); a.set(c, 'c');\nconsole.log(a.get(b)); // 'b'`} />\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class MyQuote extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">js弱引用和强引用</span>\n                </p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、弱引用</span></p>\n                <div className=\"article-desc\">\n                    参考文章： <a href=\"https://juejin.im/post/6854573215549751310\" target=\"_blank\">https://juejin.im/post/6854573215549751310</a><br/>\n                    一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，并因此可能在任何时刻被回收。<br />\n                    在JS中，WeakMap 和 WeakSet 给我们提供了弱引用的能力。\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、强引用</span></p>\n                <div className=\"article-desc\">\n                    如果我们持有对一个对象的引用，那么这个对象就不会被垃圾回收。这里的引用，指的是强引用。<br />\n                </div>\n                \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MyWeakMap extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">WeakMap</span>\n                </p>\n\n                <p className=\"item-title\"><span className=\"textShadow\">一、WeakMap</span></p>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">WeakMap的概念及特性：</span><br />\n                    WeakMap 和 Map相似，也是用于生成键值对的集合。<br />\n                    WeakMap与Map的区别是： <br /><br />\n\n                    1. WeakMap只接受对象做键名（null除外），不接受其他类型的值作为键名；<br /><br />\n                    2. WeakMap键名所指向的对象，不计入垃圾回收机制。<br /><br />\n                    WeakMap它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。<br />\n                    注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。<br />\n                </div> \n\n                <p className=\"item-title\"><span className=\"textShadow\">二、WeakMap语法及用法</span></p>\n                <div className=\"article-desc\">\n                    WeakMap没有遍历方法： keys(), values(), entries() 以及没有size属性。<br />\n                    因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。<br />\n                    WeakMap也没有clear方法。<br /><br />\n\n                    WeakMap只支持的方法有： set, get, has, delete <br />\n\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\n\n\nexport default class MySymbol extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">Symbol</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、Symbol要解决的问题</span>\n                </p>\n                <div className=\"article-desc\">\n                    ES5 的对象属性名都是字符串，这容易造成属性名的冲突。Symbol就是这样一种机制，能保证每个属性的名字都是独一无二的，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。<br /><br />\n                    <span className=\"mark\">ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</span>\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、生成Symbol</span>\n                </p>\n                <div className=\"article-desc\">\n                    Symbol 值通过Symbol函数生成。<br />\n                    <Code code={`\nconst s = Symbol();\ntypeof s; // 'symbol'`} /><br />\n                    <span className=\"mark\">\n                    注意，Symbol函数前不能使用new命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。\n                    </span><br /><br />\n                    Symbol可以接受一个字符串类型的值作为入参，用来描述生成的Symbol实例，主要是为了在控制台或者转为字符串时好区分。<br />\n                    <Code code={`\nconst s1 = Symbol('hello');\nconst s2 = Symbol('world');\n\nconsole.log(s1); // Symbol('hello')\nconsole.log(s2); // Symbol('world')\n\ns1.toString(); //\"Symbol('hello')\"\ns2.toString(); //\"Symbol('world')\"`} /><br />\n                    如果Symbol的入参是一个对象，就会调用该对象的toString方法，将toString的返回值转为字符串作为Symbol的入参，然后生成一个Symbol值。<br />\n                    <Code code={`\nvar obj = {\n    toString() {\n        return 'abc';\n    }\n}\nconst s1 = Symbol(obj);\nconsole.log(s1); // Symbol('abc')`} /><br />\n\n                    使用Symbol的一些注意事项：<br />\n                    <span className=\"text-placeholder\" />1. 两个没有入参的Symbol生成的实例不想等；<br />\n                    <span className=\"text-placeholder\" />2. 两个有相同入参的Symbol生成的实例不想等；<br />\n                    <span className=\"text-placeholder\" />3. Symbol生成的实例不能与其他类型进行运算，否则会报错；<br />\n                    <span className=\"text-placeholder\" />4. Symbol生成的实例可以显式的转成字符串，通过调用：toString；<br />\n                    <span className=\"text-placeholder\" />5. Symbol生成的实例可以转为布尔值。<br />\n                    <Code code={`\nconst s1 = Symbol();\nconst s2 = Symbol();\n\ns1 === s2; // false\n\nconst s3 = Symbol('aaa');\nconst s4 = Symbol('bbb');\n\ns3 === s4 // false\n\ns1 + 'hello' + s2; //报错\ns1.toString(); // 'Symbol()'\nBoolean(s1); //true`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、Symbol.prototype.description</span>\n                </p>\n                <div className=\"article-desc\">\n                    在创建Symbol的时候可以添加一个描述，这个属性可以通过实例的description属性来获取：\n                    <br />\n                    <Code code={`\nconst s1 = Symbol('hello');\ns1.description; // 'hello'`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">四、作为属性名的Symbol</span>\n                </p>\n                <div className=\"article-desc\">\n                    由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。<br />\n                    这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。<br /><br />\n                    <span className=\"mark\">注意，Symbol 值作为对象属性名时，不能用点运算符。</span><br />\n                    原因是： 因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个 Symbol 值。<br />\n                    <Code code={`\nconst s1 = Symbol('ss');\nvar obj = {\n    [s1]: 'sss',\n};\nobj[s1]; // 'sss'`} />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">五、属性名的遍历</span>\n                </p>\n                <div className=\"article-desc\">\n                    Symbol 作为属性名，遍历对象的时候，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。<br />\n                    但是，它也不是私有属性，有一个Object.getOwnPropertySymbols()方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。<br />\n                    <Code code={`\nconst a = Symbol('a');\nconst b = Symbol('b');\n\nvar obj = {};\nobj[a] = 'hello';\nobj[b] = 'wrold';\n\nconst symbolKeys = Object.getOwnPropertySymbols(obj);\nconsole.log(symbolKeys); // [Symbol('a'), Symbol('b')]`} /><br />\n                    作用： 由于以 Symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。<br /><br />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">六、Symbol.for()，Symbol.keyFor()</span>\n                </p>\n                <div className=\"article-desc\">\n                    <span className=\"mark\">1. Symbol.for()</span><br/><br/>\n                    我们希望重新使用同一个 Symbol 值，Symbol.for()方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值，并将其注册到全局。<br /><br />\n                    <Code code={`\nlet s1 = Symbol.for('aaa');\nlet s2 = Symbol.for('aaa');\n\ns1 === s2; // true\n\nlet s3 = Symbol('aaa');\nlet s4 = Symbol('aaa');\n\ns3 === s4; // false`} /><br/>\n                    Symbol.for()与Symbol()这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(\"cat\")30 次，每次都会返回同一个 Symbol 值，但是调用Symbol(\"cat\")30 次，会返回 30 个不同的 Symbol 值。\n                    <br/><br/>\n                    <span className=\"mark\">2. Symbol.keyFor()</span><br/><br/>\n                    Symbol.keyFor()方法返回一个已登记的 Symbol 类型值的key。<br/>\n                    <Code code={`\nlet s1 = Symbol.for('aaa');\nSymbol.keyFor(s1); // 'aaa'\n\nlet s2 = Symbol('bbb');\nSymbol.keyFor(s2); // undefined`} /><br />\n                    <span className=\"mark\">注意，Symbol.for()为 Symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。</span>\n                </div>\n\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class CompMode extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">组件设计原则</span></p>\n                <div className=\"quote\">\n                    一个组件的复杂度，主要来源就是自身的状态；即组件自身需要维护多少个不依赖于外部输入的状态。<br />\n                    组件开发过程中，将数据和UI进行解耦是最重要的工作。<br /><br />\n\n                    想要开发一个更加完善的组件，需要符合以下原则：<br />\n                    1. 单一职责：只实现一个职责，并且只有一个改变状态的理由。<br />\n                    2. 通用性：组件开发要服务于业务，为了更好地复用，又要从业务中抽离。<br />\n                    3. 封装：优秀的组件应该隐藏内部细节和实现意义，并通过props来控制行为和输出。<br />\n                    4. 组合：具有多个功能的组件，应该转换成多个小组件。<br />\n                    5. 可测试<br />\n                    6. 富有意义：有意义的函数、变量命名，可以让代码具有良好的可读性。<br />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MyJsonp extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">实现JSONP</span></p>\n                <div className=\"quote\">\n                    创建script标签<br />\n                    设置script标签的src属性，以问号传递参数，设置好回调函数callback名称<br />\n                    插入到html文本中<br />\n                    调用回调函数，res参数就是获取的数据\n                </div>\n                <Code code={`\nlet script = document.createElement('script');\nscript.src = 'http://www.xxx.com/useinfo?callback=callback';\ndocument.body.appendChild(script);\nfunction callback(res) {\n    console.log(res);\n}\n`} />\n               \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class MySleep extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">实现sleep</span></p>\n                <div className=\"quote\">\n                某个时间过后，就去执行某个函数，基于Promise封装异步任务\n                </div>\n                <Code code={`\nfunction step(fn ,wait) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            fn();\n            resolve();\n        }, wait);\n    })\n}\n\nasync function sleep() {\n    await step(() => console.log('--- step1 ---'), 1000);\n    await step(() => console.log('--- step2 ---'), 1000);\n    await step(() => console.log('--- step3 ---'), 1000);\n    await step(() => console.log('--- step4 ---'), 1000);\n}\n\nsleep();\n`} />\n               \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../comp/Code';\n// import './../../comp/common/style.css';\n\n\nexport default class JsBridge extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">JsBridge原理</span>\n                </p>\n\n                <p className=\"item-title\">ajax请求过程</p>\n                <div className=\"quote\">\n                    参考文档： https://blog.csdn.net/yuzhengfei7/article/details/93468914\n                </div>\n                <p className=\"item-title\">ajax使用</p>\n                <Code code={`\nvar xhr;\nif (window.XMLHttpRequest) {\n    xhr = new XMLHttpRequest();\n} else {\n    xhr = new ActiveXObject('Microsoft.XMLHTTP');\n}\n// get请求：\nxhr.open(\"get\", url, async);\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4) {\n        var text = xhr.reponseText;\n        var xml = xhr.responseXML;\n    }\n}\nxhr.send();\n\n// post请求：\nxhr.open(\"post\", url, true);\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 && xhr.state == 200) {\n        var text = xhr.reponseText;\n        var xml = xhr.responseXML;\n    }\n}\nxhr.send('id=1')`} />\n\n                <p className=\"item-title\">readyState状态码</p>\n                <div className=\"quote\">\n                    0: XMLHttpRequest对象创建完成，但没有调用open方法；<br />\n                    1: 初始化，XMLHttpRequest没有调用send方法；<br />\n                    2: XMLHttpRequest开始发送数据给服务器；<br />\n                    3: 正在获取服务器返回的数据；<br />\n                    4: 获取数据完毕，可以通过XMLHttpRequest获得服务器返回的所有数据。\n                </div>\n\n                <p className=\"item-title\">使用Promise封装ajax</p>\n                <div className=\"quote\">\n                    返回一个新的Promise实例<br />\n                    创建HMLHttpRequest异步对象<br />\n                    调用open方法，打开url，与服务器建立链接（发送前的一些处理）<br />\n                    监听Ajax状态信息<br />\n                    如果xhr.readyState == 4（表示服务器响应完成，可以获取使用服务器的响应了）<br />\n                    xhr.status == 200，返回resolve状态<br />\n                    xhr.status == 404，返回reject状态<br />\n                    xhr.readyState !== 4，把请求主体的信息基于send发送给服务器\n                </div>\n                <Code code={`\nfunction ajax(url, method) {\n    return new Promise((resolve, reject) => {\n        let xhr;\n        if (window.XMLHttpRequest) {\n            xhr = new window.XMLHttpRequest();\n        } else {\n            xhr = new ActiveXObject('Mircosoft.XMLHTTP');\n        }\n        xhr.open(url, method, true);\n        xhr.onreadystatechange = function() {\n            if (xhr.readystate == 4) {\n                if (xhr.state == 200) {\n                    resolve(xhr.responseText);\n                } else if (xhr.state == 404){\n                    reject(new Error('404'));\n                }\n            } else {\n                reject('xxxx');\n            }\n        }\n        xhr.send();\n    })\n}`} />\n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class Router extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">前端路由</span>\n                </p>\n                <div className=\"quote\">\n                    在 Web SPA 中，前端路由描述的 URL 与 UI 之间的单向映射关系，即 URL 变化引起 UI 页面的更新（无需刷新页面）.<br /><br />\n                    要解决的核心问题：<br />\n                    1. 如何检测 URL 是否变化？<br />\n                    2. 如何改变 URL 却不引起页面刷新？<br /><br />\n\n                    解决问题的办法：<br />\n                    1. 在hash方式中，可以通过hashchange事件监听url的变化，可以触发hashchange事件的方式有：<br />\n                    a. 通过浏览器前进后退改变url<br />\n                    b. 通过标签改变url<br />\n                    c. 通过window.location改变url<br />\n                    hash是url中#及后面的部分，改变url中的hash部分不会引起页面刷新<br /><br />\n\n                    2. 在history方式中，可以通过popstate事件监听url的变化，可通过调用pushState和replaceState两种方法，改变url而不引起页面刷新。<br />\n                    可以触发popstate事件的方式有：<br />\n                    a. 浏览器前进或后退<br />\n                    通过pushState和replaceState或标签改变url并不会触发popstate事件，因此需要手动拦截。<br />\n                    参考资料： <a href=\"https://www.juejin.im/post/6844904056754798600\" target=\"_blank\">前端路由</a>\n                </div>\n                <h3>一、hash方式</h3>\n                <Code code={`\n// html\n// 定义路由\n<ul>\n    <li><a href=\"#/home\">home</a></li>\n    <li><a href=\"#/about\">about</a></li>\n</ul>\n\n// 渲染路由对应的UI\n<div id=\"routeView\"></div>\n\n// js\nfunction getRouterView() {\n    return document.querySelector('#routeView');\n}\nfunction onHashChange() {\n    switch(window.location.hash) {\n        case '':\n        case '#/home':\n            getRouterView().innerHTML = 'home';\n            break;\n        case '#/about':\n            getRouterView().innerHTML = 'about';\n            break;\n        default:\n            break;\n    }\n}\n// 页面加载完成不会触发hashchange事件，这里主动触发一次hashchange事件\nwindow.addEventListener('DOMContentLoaded', () => {\n    onHashChange();\n});\n// 监听路由变化\nwindow.addEventListener('hashchange', onHashChange);\n`} />\n\n                <h3>二、history方式</h3>\n                <Code code={`\n// html\n// 定义路由\n<ul>\n    <li><a href=\"/home\">home</a></li>\n    <li><a href=\"/about\">about</a></li>\n</ul>\n\n// 渲染路由对应的UI\n<div id=\"routeView\"></div>\n\n// js\nfunction getRouterView() {\n    return document.querySelector('#routeView');\n}\nfunction onPopState() {\n    switch(window.location.pathname) {\n        case '/':\n        case '/home':\n            getRouterView().innerHTML = 'home';\n            break;\n        case '/about':\n            getRouterView().innerHTML = 'about';\n            break;\n        default:\n            break;\n    }\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    onPopState();\n    // 拦截a标签的点击事件默认行为，点击时使用pushstate修改url并手动更新ui，从而实现点击链接更新url和ui的效果。\n    const links = document.querySelectorAll('a[href]');\n    links.forEach(el => {\n        el.addEventListener('click', function(e) {\n            e.preventDefault();\n            // 手动拦截\n            window.history.pushState(null, '', el.getAttribute('href'));\n            onPopState();\n        })\n    })\n});\n\n// 监听路由变化\nwindow.addEventListener('popstate', onPopState);\n`} />\n                \n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class Git extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">git</span>\n                </p>\n                <div className=\"quote\">\n                    git学习手册：<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">git</a><br/>\n                </div>\n                <h3> 1. 常用命令</h3>\n                <div className=\"quote\"></div>\n\n                <h3> 2. 常见问题</h3>\n                <div className=\"quote\">\n                    rebase 和 merge的区别？ <a href=\"https://www.cnblogs.com/xueweihan/p/5743327.html\" target=\"_blank\">参考</a><br /><br />\n                    merge和rebase都是用来合并分支的.<br />\n                    git log的区别： merge命令不会保留merge的分支的commit.<br />\n                    处理冲突： 使用merge合并分支，解决完冲突，执行git add和git commit，会产生一个commitid。使用rebase合并分支，解决完冲突，执行git add和git rebase --continue 不会产生commitid。<br />\n                    git pull: git pull做了两个操作分别是“获取”和“合并”， 默认是merge， git pull --rebase就是以rebase的方式合并。<br />\n                </div>\n                <div className=\"quote\">\n                    如何解决冲突？\n                </div>\n                \n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class Vim extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">vim</span>\n                </p>\n                <div className=\"quote\">\n                </div>\n                \n                \n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class Linux extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">linux</span>\n                </p>\n                <div className=\"quote\">\n                </div>\n                \n                \n            </div>\n        )\n    }\n}","//浅拷贝 & 深拷贝\n\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class Photoshop extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">photoshop</span>\n                </p>\n                <div className=\"quote\">\n                </div>\n                \n                \n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\n\nimport ThisNote from './base/this';\nimport BlockScope from './base/blockScope';\nimport ObjShili from './base/obj';\nimport ObjExtend from './base/extend';\nimport EventLoop from './base/eventLoop';\nimport CopyNote from './base/copy';\nimport DiffArrowFn from './base/diffArrowFn';\nimport Ajax from './base/ajax';\nimport CookieSession from './base/cookie&session';\nimport Prototype from './base/prototype';\n\nimport EventEmitterFn from './HeightLevelFn/EventEmitter';\nimport LightImage from './HeightLevelFn/LightImage';\nimport Memoization from './HeightLevelFn/memoization';\nimport Currying from './HeightLevelFn/currying';\nimport ThrottleAndDebounce from './HeightLevelFn/throttle&debounce';\n\n\n\nimport MatchMedia from './lessCommon/matchMedia';\n\nimport AboutQueue from './mianshi/aboutQueue';\nimport AboutTree from './mianshi/aboutTree';\nimport Myfetch from './mianshi/myFetch';\nimport MyMap from './mianshi/myMap';\nimport MyForEach from './mianshi/myForEach';\nimport MyNew from './mianshi/myNew';\nimport MyApply from './mianshi/myApply';\nimport MyCall from './mianshi/myCall';\nimport MyBind from './mianshi/myBind';\nimport MyLet from './mianshi/myLet';\nimport MyConst from './mianshi/myConst';\nimport MyInstanceof from './mianshi/myInstanceof';\nimport MyPromise from './mianshi/myPromise';\nimport MyCache from './mianshi/myCache';\nimport MySetInterval from './mianshi/mySetInterval';\nimport MySelfNote from './mianshi/mySelf';\nimport Light from './mianshi/light';\nimport MyClone from './mianshi/myClone';\nimport MyFlat from './mianshi/myFlat';\nimport MyReduce from './mianshi/myReduce';\n\nimport DataType from './base/dataType';\nimport ObjectNote from './base/object';\nimport MyObjectCreate from './mianshi/myObjectCreate';\nimport CompilerNote from './base/compiler';\nimport ScopeNote from './base/scope';\nimport MyAsyncAwait from './es6/await';\nimport MySet from './es6/set';\nimport MyClass from './es6/class';\nimport MyModule from './es6/module';\nimport MyProxy from './es6/proxy';\nimport MyInterator from './es6/interator';\nimport MyGenerator from './es6/generator';\nimport MyWeakSet from './es6/weakSet';\nimport MyMapType from './es6/map';\nimport MyQuote from './base/quote';\nimport MyWeakMap from './es6/weakMap';\nimport MySymbol from './es6/symbol';\n\nimport CompMode from './mode/compMode';\nimport MyJsonp from './mianshi/myJsonp';\nimport MySleep from './mianshi/mySleep';\n\nimport JsBridge from './mobile/jsBridge';\nimport Router from './base/router';\nimport Git from './tool/git';\nimport Vim from './tool/vim';\nimport Linux from './tool/linux';\nimport Photoshop from './tool/photoshop';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'js基础',\n        prop: 'js-base',\n        children: [\n            {\n                label: '编译原理',\n                prop: 'compiler-note',\n                comp: function() {\n                    return <CompilerNote />;\n                },\n            },\n            {\n                label: '词法作用域',\n                prop: 'scope-note',\n                comp: function() {\n                    return <ScopeNote />;\n                },\n            },\n            {\n                label: '数据类型',\n                prop: 'data-type',\n                comp: function() {\n                    return <DataType />;\n                },\n            },\n            {\n              label: 'this',\n              prop: 'this',\n              comp: function() {\n                  return <ThisNote />;\n              },\n            },\n            {\n                label: '块作用域',\n                prop: 'block-scope',\n                comp: function() {\n                    return <BlockScope />;\n                },\n            },\n            {\n                label: '浅拷贝 & 深拷贝',\n                prop: 'copy-mode',\n                comp: function() {\n                    return <CopyNote />;\n                },\n            },\n            {\n                label: '对象实例化方法',\n                prop: 'obj-shili',\n                comp: function() {\n                    return <ObjShili />;\n                },\n            },\n            {\n                label: '对象继承方法',\n                prop: 'obj-extend',\n                comp: function() {\n                    return <ObjExtend />;\n                },\n            },\n            {\n                label: 'ajax',\n                prop: 'js-ajax',\n                comp: function() {\n                    return <Ajax />;\n                },\n            },\n            {\n                label: 'event loop',\n                prop: 'event-loop',\n                comp: function() {\n                    return <EventLoop />;\n                },\n            },\n            {\n                label: 'Object',\n                prop: 'js-Object',\n                comp: () => <ObjectNote />\n            },\n            {\n                label: '弱引用&强引用',\n                prop: 'js-quote',\n                comp: () => <MyQuote />\n            },\n            {\n                label: '箭头函数&普通函数区别',\n                prop: 'js-diffArrowFn',\n                comp: () => <DiffArrowFn />\n            },{\n                label: 'cookie & session',\n                prop: 'js-cookie-session',\n                comp: () => <CookieSession />\n            },{\n                label: '原型 & 原型链',\n                prop: 'js-prototype',\n                comp: () => <Prototype />\n            },\n            {\n                label: '前端路由',\n                prop: 'js-router',\n                comp: () => <Router />\n            },\n        ]\n    },\n    {\n        label: '高级方法',\n        prop: 'height-level-fn',\n        children: [\n            {\n              label: '发布订阅模式',\n              prop: 'event-emit-fn',\n              comp: function() {\n                  return <EventEmitterFn />;\n              },\n            },\n            {\n                label: '点亮图片',\n                prop: 'light-image-fn',\n                comp: function() {\n                    return <LightImage />;\n                },\n            },\n            {\n                label: 'memoization技术',\n                prop: 'memoization',\n                comp: function() {\n                    return <Memoization />;\n                },\n            },{\n                label: '函数柯力化',\n                prop: 'js-currying',\n                comp: () => <Currying />\n            },{\n                label: '节流&防抖',\n                prop: 'js-throttle&debounce',\n                comp: () => <ThrottleAndDebounce />\n            }\n        ]\n    },\n    {\n        label: 'es6',\n        prop: 'es6',\n        children: [\n            {\n              label: 'symbol',\n              prop: 'es6-symbol',\n              comp: function() {\n                  return <MySymbol />;\n              },\n            },\n            {\n                label: 'promise',\n                prop: 'es6-promise',\n                comp: function() {\n                    return <MyPromise />;\n                },\n            },\n            {\n                label: 'await',\n                prop: 'es6-await',\n                comp: function() {\n                    return <MyAsyncAwait />;\n                },\n            },\n            {\n                label: 'Set',\n                prop: 'es6-set',\n                comp: function() {\n                    return <MySet />;\n                },\n            },\n            {\n                label: 'WeakSet',\n                prop: 'es6-weakSet',\n                comp: function() {\n                    return <MyWeakSet />;\n                },\n            },\n            {\n                label: 'Map',\n                prop: 'es6-map',\n                comp: function() {\n                    return <MyMapType />;\n                },\n            },\n            {\n                label: 'WeakMap',\n                prop: 'es6-weakmap',\n                comp: function() {\n                    return <MyWeakMap />;\n                },\n            },\n            {\n                label: 'class',\n                prop: 'es6-class',\n                comp: function() {\n                    return <MyClass />;\n                },\n            },\n            {\n                label: 'module',\n                prop: 'es6-module',\n                comp: function() {\n                    return <MyModule />;\n                },\n            },\n            {\n                label: 'proxy',\n                prop: 'es6-proxy',\n                comp: function() {\n                    return <MyProxy />;\n                },\n            },\n            {\n                label: 'interator',\n                prop: 'es6-interator',\n                comp: function() {\n                    return <MyInterator />;\n                },\n            },\n            {\n                label: 'generator',\n                prop: 'es6-generator',\n                comp: function() {\n                    return <MyGenerator />;\n                },\n            },\n        ]\n    },\n    {\n        label: '不常用知识点',\n        prop: 'less-common',\n        children: [\n            {\n              label: 'window.matchMedia',\n              prop: 'matchMedia',\n              comp: function() {\n                  return <MatchMedia />;\n              },\n            },\n        ]\n    },{\n        label: '经典题目',\n        prop: 'mianshi',\n        children: [\n            {\n              label: '实现一个类：链式调用，事件执行，流程控制',\n              prop: 'mianshi-1',\n              comp: function() {\n                  return <AboutQueue />;\n              },\n            },\n            {\n                label: '判断树是否对称',\n                prop: 'mianshi-2',\n                comp: function() {\n                    return <AboutTree />;\n                },\n            },\n            {\n                label: 'fetch实现控制并发请求数',\n                prop: 'mianshi-3',\n                comp: function() {\n                    return <Myfetch />;\n                },\n            },\n            {\n                label: '实现map',\n                prop: 'mianshi-4',\n                comp: function() {\n                    return <MyMap />;\n                },\n            },\n            {\n                label: '实现forEach',\n                prop: 'mianshi-5',\n                comp: function() {\n                    return <MyForEach />;\n                },\n            },{\n                label: '实现new',\n                prop: 'mianshi-6',\n                comp: function() {\n                    return <MyNew />;\n                },\n            },{\n                label: '实现apply',\n                prop: 'mianshi-7',\n                comp: function() {\n                    return <MyApply />;\n                },\n            },{\n                label: '实现call',\n                prop: 'mianshi-8',\n                comp: function() {\n                    return <MyCall />;\n                },\n            },{\n                label: '实现bind',\n                prop: 'mianshi-9',\n                comp: function() {\n                    return <MyBind />;\n                },\n            },{\n                label: '实现let',\n                prop: 'mianshi-10',\n                comp: function() {\n                    return <MyLet />;\n                },\n            },{\n                label: '实现const',\n                prop: 'mianshi-11',\n                comp: function() {\n                    return <MyConst />;\n                },\n            },{\n                label: '实现instanceof',\n                prop: 'mianshi-12',\n                comp: function() {\n                    return <MyInstanceof />;\n                },\n            },{\n                label: '实现promise',\n                prop: 'mianshi-13',\n                comp: function() {\n                    return <MyPromise />;\n                },\n            },{\n                label: '实现缓存函数',\n                prop: 'mianshi-14',\n                comp: function() {\n                    return <MyCache />;\n                },\n            },{\n                label: '实现Object.create',\n                prop: 'mianshi-15',\n                comp: function() {\n                    return <MyObjectCreate />;\n                },\n            }, \n            {\n                label: '实现setInterval',\n                prop: 'mianshi-16',\n                comp: function() {\n                    return <MySetInterval />;\n                },\n            }, \n            {\n                label: '其他的方法的实现',\n                prop: 'mianshi-17',\n                comp: function() {\n                    return <MySelfNote />;\n                },\n            },\n            {\n                label: '实现红绿灯',\n                prop: 'light',\n                comp: function() {\n                    return <Light />;\n                },\n            }, \n            {\n                label: '实现浅拷贝&深拷贝',\n                prop: 'myclone',\n                comp: function() {\n                    return <MyClone />;\n                },\n            }, \n            {\n                label: '实现数组扁平化Flat',\n                prop: 'myFlat',\n                comp: function() {\n                    return <MyFlat />;\n                },\n            }, \n            {\n                label: '实现JSONP',\n                prop: 'my-jsonp',\n                comp: function() {\n                    return <MyJsonp />;\n                },\n            }, \n            {\n                label: '实现sleep',\n                prop: 'my-sleep',\n                comp: function() {\n                    return <MySleep />;\n                },\n            }, \n            {\n                label: '实现reduce',\n                prop: 'my-reduce',\n                comp: function() {\n                    return <MyReduce />;\n                },\n            }\n\n        ]\n    },\n    {\n        label: '模式',\n        prop: 'modes',\n        children: [\n            {\n              label: '组件设计原则',\n              prop: 'comp-mode',\n              comp: function() {\n                  return <CompMode />;\n              },\n            },\n        ]\n    },\n    {\n        label: '移动端',\n        prop: 'mobile-article',\n        children: [\n            {\n              label: 'jsBridge',\n              prop: 'mobile-jsBridge',\n              comp: function() {\n                  return <JsBridge />;\n              },\n            },\n        ]\n    },\n    {\n        label: '常用工具',\n        prop: 'js-tool',\n        children: [\n            {\n              label: 'git',\n              prop: 'tool-git',\n              comp: function() {\n                  return <Git />;\n              },\n            },\n            {\n                label: 'vim',\n                prop: 'tool-vim',\n                comp: function() {\n                    return <Vim />;\n                },\n            },\n            {\n                label: 'linux',\n                prop: 'tool-linux',\n                comp: function() {\n                    return <Linux />;\n                },\n            },\n            {\n                label: 'photoshop',\n                prop: 'tool-photoshop',\n                comp: function() {\n                    return <Photoshop />;\n                },\n            },\n        ]\n    },\n];\n\n\nexport default function JsIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\nimport Code from '../../../comp/Code';\n\nexport default class H5Page extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">h5新特性</span></p>\n                <div className=\"quote\">\n                    参考文档： https://juejin.im/post/6844903878857588750<br />\n                    https://juejin.im/post/6844903919710126087<br />\n                </div>\n\n                <p className=\"item-title\">一、h5新增语义化标签</p>\n                <div className=\"quote\">\n                    列举一些具有代表性和经常用的标签：<br /><br />\n                    1. header: 标记定义一个页面或一个区域的头部<br />\n                    2. nav: 标记定义导航链接<br />\n                    3. section: 标记定义一个区域<br />\n                    4. aside: 标记定义页面内容部分的侧边栏<br />\n                    5. article: 标记定义一篇文章<br />\n                    6. footer: 标记定义一个页面或一个区域的底部<br />\n                </div>\n\n                <p className=\"item-title\">二、语义化的作用</p>\n                <div className=\"quote\">\n                    1. 为了在没有css的情况下，页面也能呈现出很好地内容结构、代码结构；<br /><br />\n                    2. 有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；<br /><br />\n                    3. 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；<br /><br />\n                    4. 便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。<br />\n                </div>\n\n                <p className=\"item-title\">三、html书写规范</p>\n                <div className=\"quote\">\n                    1. 尽可能少的使用无语义的标签div和span；<br /><br />\n                    2. 在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；<br /><br />\n                    3. 不要使用纯样式标签，如：b、font、u等，改用css设置<br /><br />\n                    4. 使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；<br /><br />\n                    5. 表单域要用fieldset标签包起来，并用legend标签说明表单的用途；<br /><br />\n                    6. 每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来.<br /><br />\n                </div>\n\n                <p className=\"item-title\">四、input新增的type 和 属性</p>\n                <div className=\"quote\">\n                    <span className=\"mark\">新增的type如下：</span><br/><br/>\n\n                    email<br />\n                    url<br />\n                    number<br />\n                    range<br />\n                    Date picker<br />\n                    Date —— 选取日、月、年<br />\n                    Month —— 选取月、年<br />\n                    Week —— 选取周和年<br />\n                    Time —— 选取时间（小时和分钟）<br />\n                    Datetime —— 选取时间、日、月、年（UTC 时间）<br />\n                    Datetime-local —— 选取时间、日、月、年（本地时间）<br /><br/>\n\n                    <span className=\"mark\">新增的属性如下：</span><br/><br/>\n                    autocomplete： 自动完成，适用于form标签，以及以下类型的input标签：text, search, url, telephone, email, password, datepickers, range, color。<br/><br/>\n                    autofocus：自动地获得焦点<br /><br />\n                    multiple：可选择多个值，适用于input中type为email和file用法<br /><br />\n                    placeholder：提示文字，适用于input中type为：text, search, url, telephone, email, password<br /><br />\n                    required：规定不能为空，适用于以下类型的input标签：text, search, url, telephone, email, password, date pickers, number, checkbox, radio, file<br/>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../../comp/Code';\n\nexport default class Canvas extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">canvas</span></p>\n                \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../../comp/Code';\n\nexport default class Meta extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">meta标签简介</span></p>\n                <div className=\"article-desc\">\n                    <h3>1. meta标签简述</h3>\n                    <div className=\"quote\">\n                        meta常用于定义页面的说明，关键字，最后修改日期，和其它的元数据。这些元数据将服务于浏览器（如何布局或重载页面），搜索引擎和其它网络服务。<br />\n                        META标签分两大部分：HTTP标题信息(http-equiv)和页面描述信息(name)。\n                    </div>\n\n                    <h3>2. http-equiv</h3>\n                    <div className=\"quote\">\n                        类似于HTTP的头部协议，它回应给浏览器一些有用的信息，以帮助正确和精确地显示网页内容。<br /><br />\n                        ● 设置页面编码 charset: UTF-8是世界性通用编码，也完美的支持中文编码<br />\n                        ● 设置页面刷新时间 refresh: 让网页多长时间自动刷新，或者多长时间后让网页自动链接到其他网页，单位：秒, 不添加URL就本地刷新<br />\n                        ● 设置网页缓存时间 expires: 设置网页在缓存时间过期时间，一旦网页过期，就需要在服务器上重新加载。必须使用GMT的时间格式（格林尼治标准时间），或者直接设为0，数字表示多少时间后过期。<br />\n                        ● 禁止页面缓存 pragma（cach模式）: 禁止浏览器从本地的缓存中调阅页面的内容。网页不保存在缓存中，每次访问都刷新页面，访问者无法脱机浏览。<br />\n                        ● Set-Cookie (cookie设定): 浏览器访问某个页面时会将它存在缓存中，下次再次访问时就可从缓存中读取，以提高速度。当你希望访问者每次都刷新你广告的图标，或每次都刷新你的计数器，就要禁用缓存了。通常HTML文件没有必要禁用缓存，对于ASP等页面，就可以使用禁用缓存，因为每次看到的页面都是在服务器动态生成的，缓存就失去意义。如果网页过期，那么存盘的cookie将被删除。注意：必须使用GMT的时间格式。 <br />\n                        ● Window-target (显示窗口的设定): 强制页面在当前窗口以独立页面显示。这个属性是用来防止别人在框架里调用你的页面。<br />\n                        ● X-UA-Compatible: 这是个是IE8的专用标记,用来指定IE8浏览器去模拟某个特定版本的IE浏览器的渲染方式（比如人见人烦的IE6），以此来解决部分兼容问题\n                    </div>\n                    <Code code={`\n// 设置charset：\n<meta charset=\"UTF-8\">\n\n// 设置refresh\n<meta http-equiv=\"refresh\" content=\"3;url=https://www.baidu.com\">\n\n// 设置expires\n<meta http-equiv=expires content=Thu,15 Apr  2020  20:00:00  GMT>\n\n// 设置pragma\n<meta http-equiv=\"pragma\" content=\"no-cach\">\n\n// 设置set-cookie\n<meta http-equiv=\"Set-Cookie\" Content=\"cookievalue=xxx; expires=Wednesday,21-Oct-98 16:14:21 GMT; path= \" />\n\n// 设置window-target\n// 可选值有： \n// _blank： 在新窗口中打开被链接的文档\n// _self： 默认。在相同的框架中打开被链接的文档\n// _top： 在整个窗口中打开被链接的文档\n// _parent： 在父框架集中打开被链接文档\n// framname： 在指定框架中打开被链接的文档\n<meta http-equiv=\"widow-target\" content=\"_top\" />\n\n// 设置X-UA-Compatible\n< meta http-equiv = \"X-UA-Compatible\" content = \"IE=EmulateIE7\" />\n`} />\n\n                    <h3>3. name</h3>\n                    <div className=\"quote\">\n                        name是描述网页的，对应于content（网页内容），以便于搜索引擎机器人查找、分类（目前几乎所有的搜索引擎都使用网上机器人自动查找meta值来给网页分类）。<br /><br />\n                        name的value值（name=）指定所提供信息的类型。有些值是已经定义好的。例如description(说明)、keyword(关键字)、refresh(刷新)等。还可以指定其他任意值，如：creationdate(创建日期) 、document ID(文档编号)和level(等级)等。name的content指定实际内容。如：如果指定level(等级)为value(值)，则Content可能是beginner(初级)、intermediate(中级)、advanced(高级)。<br /><br />\n\n                        ● Keywords (关键字): 为搜索引擎提供的关键字列表, 各关键词间用英文逗号“,”隔开。META的通常用处是指定搜索引擎用来提高搜索质量的关键词。当数个META元素提供文档语言从属信息时，搜索引擎会使用lang特性来过滤并通过用户的语言优先参照来显示搜索结果。<br />\n                        ● Description (简介): Description用来告诉搜索引擎你的网站主要内容。<br />\n                        ● Author (作者): 标注网页的作者或制作组, Content可以是：你或你的制作组的名字,或Email<br />\n                        ● Copyright (版权): 标注版权<br />\n                        ● viewport(移动端的窗口): viewport指的是设备的屏幕上用来显示网页的区域。viewport标记，用于指定用户是否可以缩放Web页面，并对相关的选项进行设定。width 和height 指令分别指定视区的逻辑宽度和高度。它们的值可以是以像素为单位的数字，也可以是一个特殊的标记符号。如device-width即表示，视区宽度应为设备的屏幕宽度。类似的，device-height即表示设备的屏幕高度。initial-scale用于设置Web页面的初始缩放比例。默认的初始缩放比例值因智能手机浏览器的不同而有所差异，通常情况下，设备会在浏览器中呈现出整个Web页面。设为1.0则显示未经缩放的Web页面。maximum-scale和minimum-scale用于设置用户对于Web页面缩放比例的限制。值的范围为0.25~10.0之间。 user-scalable指定用户是否可以缩放视区，即缩放Web页面的视图。值为yes时允许用户进行缩放，值为no时不允许缩放。\n                        <br />\n                        ● format-detection: 在iPhone 手机上默认值是（电话号码显示为拨号的超链接），可将telephone=no，则手机号码不被显示为拨号链接\n                    </div>\n                    <Code code={`\n// 设置Keywords\n<meta name=kyewords lang=en content=关键字,关键字,关键字>\n\n// 摄者Description\nmeta name=description content=你网页的简述>\n\n// 设置Author\n<meta name=author content=xxx,123456789@qq.com>\n\n// 设置Copyright\n<meta name=copyright content=本页版权归个人所有。All Rights Reserved>\n\n// 设置viewport\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover\">\n\n// 设置format-detection\n<meta name=\"format-detection\" content=\"telephone=no\" />\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../../comp/Code';\nimport {Table} from 'antd';\n\n\nexport default class Media extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const columns_prop = [\n            {\n                title: '属性名',\n                dataIndex: 'propName',\n                key: 'propName',\n            },\n            {\n                title: '数据类型',\n                dataIndex: 'type',\n                key: 'type',\n            },\n            {\n                title: '说明',\n                dataIndex: 'desc',\n                key: 'desc',\n            },\n        ];\n\n        const dataSource_prop = [\n            {\n                key: '1',\n                propName: 'autoplay',\n                type: 'boolean',\n                desc: '是否自动播放（ios不可自动播放，在chrome中只有静音的时候可以正常自动播放）',\n            },\n            {\n                key: '2',\n                propName: 'buffered',\n                type: 'obj',\n                desc: '表示已经下载的缓冲的时间范围对象',\n            },{\n                key: '3',\n                propName: 'bufferedBytes',\n                type: '',\n                desc: '表示已经下载的缓冲的字节范围的对象',\n            },{\n                key: '4',\n                propName: 'bufferingRate',\n                type: 'int',\n                desc: '下载过程中每秒钟平均接收到的位数',\n            },{\n                key: '5',\n                propName: 'bufferingThrottled',\n                type: 'boolean',\n                desc: '表示浏览器是否对缓冲进行了节流',\n            },{\n                key: '6',\n                propName: 'controls',\n                type: 'boolean',\n                desc: '获取或设置controls属性，用于显示或隐藏浏览器内置控件',\n            },{\n                key: '7',\n                propName: 'currentLoop',\n                type: 'int',\n                desc: '媒体文件已经循环的次数',\n            },{\n                key: '8',\n                propName: 'currentSrc',\n                type: 'string',\n                desc: '当前播放的媒体文件的url',\n            },{\n                key: '9',\n                propName: 'currentTime',\n                type: 'float',\n                desc: '已经播放的秒数',\n            },{\n                key: '10',\n                propName: 'defaultPlaybackRate',\n                type: 'float',\n                desc: '取得或者设置默认播放速度，默认值为1.0s',\n            },{\n                key: '11',\n                propName: 'duration',\n                type: 'float',\n                desc: '媒体的总播放时间s',\n            },{\n                key: '12',\n                propName: 'ended',\n                type: 'bool',\n                desc: '表示媒体是否播放完成',\n            },{\n                key: '13',\n                propName: 'loop',\n                type: 'float',\n                desc: '表示媒体播放到结尾时是否自动重新播放',\n            },{\n                key: '14',\n                propName: 'muted',\n                type: 'bool',\n                desc: '设置或者获取是否为静音',\n            },{\n                key: '15',\n                propName: 'networkState',\n                type: 'int',\n                desc: '表示当前媒体的网络连接状态，0为空，1为正在加载，2为正在加载元数据，3表示已经加载了第一帧，4表示加载完成',\n            },{\n                key: '16',\n                propName: 'paused',\n                type: 'bool',\n                desc: '表示是否暂停',\n            },{\n                key: '17',\n                propName: 'palybackRate',\n                type: 'float',\n                desc: '获取或者设置当前的播放速度',\n            },{\n                key: '18',\n                propName: 'readyState',\n                type: 'int',\n                desc: '表示媒体是否已经就绪，0为不可用，1为可以显示当前帧，2为可播放，3为可以从头到尾播放',\n            },{\n                key: '19',\n                propName: 'seekable',\n                type: '时间范围',\n                desc: '可以搜索的时间范围',\n            },{\n                key: '20',\n                propName: 'seeking',\n                type: 'bool',\n                desc: '表示媒体是否正移动到媒体文件中的新位置',\n            },{\n                key: '21',\n                propName: 'src',\n                type: 'string',\n                desc: '媒体文件的来源',\n            },{\n                key: '22',\n                propName: 'start',\n                type: 'float',\n                desc: '获取或者设置媒体文件的开始播放的位置，s',\n            },{\n                key: '23',\n                propName: 'totalBytes',\n                type: 'int',\n                desc: '当前资源所需的总字节数',\n            },{\n                key: '24',\n                propName: 'videoHeight',\n                type: 'int',\n                desc: '返回视频的高度，只适合video',\n            },{\n                key: '25',\n                propName: 'videoWidth',\n                type: 'int',\n                desc: '返回视频的宽度，只适合video',\n            },\n            {\n                key: '26',\n                propName: 'volume',\n                type: 'float',\n                desc: '获取或者设置当前音量，值为0.0到1.0',\n            },\n        ];\n\n        const columns_event = [\n            {\n                title: '事件名',\n                dataIndex: 'eventName',\n                key: 'eventName',\n            },\n            {\n                title: '触发时机',\n                dataIndex: 'eventCall',\n                key: 'eventCall',\n            },\n        ]\n\n        const dataSource_event = [\n            {\n                eventName: 'abort',\n                eventCall: '下载中断',\n            },{\n                eventName: 'canplay',\n                eventCall: '可以播放时，readyState值为2',\n            },{\n                eventName: 'canplaythrough',\n                eventCall: '播放可继续，而且应该不会中断，readyState为3',\n            },{\n                eventName: 'canshowcurrentframe',\n                eventCall: '当前帧已经下载完成，readyState为1',\n            },{\n                eventName: 'dataunavailable',\n                eventCall: '因为没有数据而不能播放，readyState值为0',\n            },{\n                eventName: 'durationchange',\n                eventCall: 'duration属性的值改变',\n            },{\n                eventName: 'emptied',\n                eventCall: '网络连接关闭',\n            },{\n                eventName: 'empty',\n                eventCall: '发生错误阻止了媒体下载',\n            },{\n                eventName: 'ended',\n                eventCall: '媒体已播放到末尾，播放停止',\n            },{\n                eventName: 'error',\n                eventCall: '下载期间发生网络错误',\n            },{\n                eventName: 'load',\n                eventCall: '所有媒体加载完成',\n            },{\n                eventName: 'loadeddata',\n                eventCall: '媒体的第一帧已经加载完成',\n            },{\n                eventName: 'loadedmetadata',\n                eventCall: '媒体的元数据已经加载完成',\n            },{\n                eventName: 'loadstart',\n                eventCall: '下载已开始',\n            },{\n                eventName: 'pause',\n                eventCall: '播放已暂停',\n            },{\n                eventName: 'play',\n                eventCall: '播放',\n            },{\n                eventName: 'playing',\n                eventCall: '媒体已经开始播放',\n            },{\n                eventName: 'progress',\n                eventCall: '正在下载',\n            },{\n                eventName: 'ratechange',\n                eventCall: '媒体的播放速度改变',\n            },{\n                eventName: 'seeked',\n                eventCall: '搜索结束',\n            },{\n                eventName: 'seeking',\n                eventCall: '正移动到新位置',\n            },{\n                eventName: 'stalled',\n                eventCall: '浏览器尝试下载，但未接受到数据',\n            },{\n                eventName: 'timeupdate',\n                eventCall: 'currentTime被以不合理或意外的方式更新',\n            },{\n                eventName: 'volumechange',\n                eventCall: 'volume属性值或者muted属性值改变',\n            },{\n                eventName: 'waiting',\n                eventCall: '播放暂停，等待下载更多数据',\n            }\n        ];\n       \n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">video & audio</span></p>\n                <h3>1. 属性</h3>\n                <Table dataSource={dataSource_prop} columns={columns_prop} pagination={false} />\n                <br />\n                <h3>2. 事件</h3>\n                <Table dataSource={dataSource_event} columns={columns_event} pagination={false} />\n                audio元素还有一个原生的js构造函数Audio，可以在任何时候播放音频。\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../../comp/Code';\n\nexport default class Api extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">h5中新增的api</span></p>\n                <div className=\"article-desc\">\n                    <h3>1. localStorage & seessionStorage</h3>\n                    <div className=\"quote\">\n                        window.localStorage.getItem(key);<br />\n                        window.localStorage.setItem(key, value);<br />\n                        window.localStorage.removeItem(key);<br />\n                        window.localStorage.clear();<br /><br />\n\n                        window.sessionStorage.getItem(key);<br />\n                        window.sessionStorage.setItem(key, value);<br />\n                        window.sessionStorage.removeItem(key);<br />\n                        window.sessionStorage.clear();\n                    </div>\n                    <Code code={`\nconst storage = {\n    localStorage: {\n        set(key, value) {\n           window.localStorage.setItem(key, value); \n        },\n        get(key) {\n            window.localStorage.getItem(key);\n        },\n        clear() {\n            window.localStorage.clear();\n        },\n        remove(key) {\n            window.localStorage.removeItem(key);\n        }    \n    },\n    sessionStorage: {\n        set(key, value) {\n            window.sessionStorage.setItem(key, value);\n        },\n        get(key) {\n            window.sessionStorage.getItem(key);\n        },\n        clear() {\n            window.sessionStorage.clear();\n        },\n        remove(key) {\n            window.sessionStorage.removeItem(key);\n        }\n    }, \n}`} />\n                    <h3>2. geolocation</h3>\n                    <div className=\"quote\">\n                        1. getCurrentPosition() : 调用该方法就会触发请求用户共享地理位置信息的对话框。此方法接受三个参数：成功的回调函数，可选的失败的回调函数，可选的选项对象。<br /><br />\n                        2. 跟踪用户位置使用watchPosition()方法，此方法的参数和getCurrentPosition的参数一模一样。调用watchPosition方法后会返回一个数值标识符，用户跟踪监控的操作，基于这个标识符可以通过clearWatch方法取消跟踪操作。\n                    </div>\n                    <Code code={`\nnavigator.geolocation.getCurrentPosition(function(position) {\n    const \n        {\n            coords: \n                {\n                    latitude, //(十进制维度)\n                    longitude, //（十进制经度）\n                    accuracy,  //（经纬度坐标的经度，单位米）\n                    altitude,   //（海拔高度，单位米）\n                    altitudeAccuracy, //（海拔高度的经度，单位米）\n                    heading, //（指南针的方向，0度表示正北）\n                    speed, //（速度，每秒移动多少米）\n                },\n            timestamp,\n        } = position;\n    console.log(latitude, longitude);\n}, function(err) {\n    const {code, message} = err;\n    console.log(code, message);\n}, {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 25000\n});\n\nconst watchId = navigator.geolocation.watchPosition(function(position) {\n    const {latitude, longitude} = position.coords;\n    console.log(latitude, longitude);\n}, function(err) {\n    const {code, message} = err;\n    console.log(code, message);\n}, {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 25000\n});\n\nclearWatch(watchId);\n\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\nimport {Table} from 'antd';\nimport borderImageSliceIcon from './../../../../img/border-image-slice.jpg';\n\nexport default class CSS3Page extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const columns = [\n            {\n              title: '值及个数',\n              dataIndex: 'value',\n              key: 'value',\n            },\n            {\n              title: '说明',\n              dataIndex: 'desc',\n              key: 'desc',\n            },\n        ];\n        const dataSource = [\n            {\n              key: '1',\n              value: '1个，例如border-raduis: 12px;',\n              desc: '设置四个角的圆角半径都为12px',\n            },\n            {\n                key: '2',\n                value: '2个，例如border-raduis: 12px 10px;',\n                desc: '设置左上角和右下角为12px，右上角和左下角10px',\n            },\n            {\n                key: '3',\n                value: '3个，例如border-raduis: 12px 10px 8px;',\n                desc: '设置左上角为12px，右上角和左下角为10px, 右下角8px',\n            },\n            {\n                key: '4',\n                value: '4个，例如border-raduis: 12px 10px 8px 6px;',\n                desc: '设置左上角为12px， 右上角为10，右下角为8，左下角为6px',\n            },\n          ];\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">css3新特性</span></p>\n                <div className=\"article-desc\">\n                    参考文档： https://juejin.im/post/6844904033870675981#heading-14<br /><br />\n                    <span className=\"textShadow\">1. 背景</span><br />\n                    <div className=\"quote\">\n                        background-origin: border-box | padding-box | content-box<br />\n                        background-clip: border-box | padding-box | content-box | text | (inherit | initial | unset)<br />\n                        background-size: contain | cover | value <br />\n                    </div>\n                    background-origin: 背景图片对齐方式，border-box：以border的左上角对齐，padding-box：以padding的左上角对齐，content-box：以content左上角对齐。默认是padding-box。<br /><br />\n                    background-clip: (<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip\" target=\"_blank\">官网</a>)背景图片（颜色）的延伸范围。border-box: 延伸到边框外沿；padding-box：背景延伸至内边距(padding)外沿,不会绘制到边框处；content-box：背景被裁剪至内容区(content box)外沿；text：背景被裁剪成文字的前景色。<br /><br />\n                    background-size：设置背景图片大小。contain：缩放背景图片以完全装入背景区，可能背景区部分空白；cover：缩放背景图片以完全覆盖背景区，可能背景图片部分看不见。<br /><br />\n                    \n                    <span className=\"textShadow\">2. 边框</span><br />\n                    <div className=\"quote\">\n                        border-radius: value， 设置边框为圆角，value为圆角边框的半径<br />\n                        border-image:  none | image; 指定边框图片的地址(<a href=\"https://aotu.io/notes/2016/11/02/border-image/index.html\" target=\"_blank\">参考文档</a>, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image\" target=\"_blank\">MDN</a>)\n                    </div>\n\n                    <span className=\"mark\">border-radius属性：</span><br /><br />\n\n                    <Table dataSource={dataSource} columns={columns} pagination={false} /><br />\n\n                    每个圆角的半径其实是由水平半径和垂直半径组成: border-radius: 20px;表示每个角的水平和垂直半径都为20px。而border-radius: 20px/30px;表示每个角的水平半径为20px，垂直半径为30px。<br /><br />\n                    border-radius是一个合成属性：\n                    <div className=\"quote\">\n                        border-radius: 20px;表示：<br />\n                        border-top-left-radius: 20px;<br />\n                        border-top-right-radius: 20px;<br />\n                        border-bottom-left-radius: 20px;<br />\n                        border-bottom-left-radius: 20px;<br /><br />\n\n                        border-radius: 20px/30px;表示：<br />\n                        border-top-left-radius: 20px 30px;<br />\n                        border-top-right-radius: 20px 30px;<br />\n                        border-bottom-left-radius: 20px 30px;<br />\n                        border-bottom-left-radius: 20px 30px;<br />\n                    </div>\n\n                    <span className=\"mark\">border-image属性：</span><br /><br />\n                    CSS属性允许在元素的边框上绘制图像。这使得绘制复杂的外观组件更加简单，也不用在某些情况下使用九宫格了。使用 border-image 时，其将会替换掉 border-style 属性所设置的边框样式。虽然规范要求使用 border-image 时边框样式必须存在，但一些浏览器可能没有实现这一点。<br /><br />\n                    border-image是一个复合属性，由以下属性合成：\n\n                    <div className=\"quote\">\n                        border-image-source: none | url | linear-gradient  表示：用于声明元素的边框图片（border-image）的资源 <br />\n                        border-image-slice: 数值 | 百分比  表示：属性会将图片分割为9个区域：四个角，四个边（edges）以及中心区域。四条切片线，从它们各自的侧面设置给定距离，控制区域的大小。<br />\n                        border-image-width: 数值 | 百分比  <br />\n                        border-image-outset: length | number  表示：属性定义边框图像可超出边框盒的大小<br />\n                        border-image-repeat: stretch | repeat | round | space  表示：定义图片如何填充边框。或为单个值，设置所有的边框；或为两个值，分别设置水平与垂直的边框。<br />\n                    </div>\n\n                    border-image-slice：<br />\n                    <img className=\"middle-img\" src={borderImageSliceIcon} alt=\"\" /><br />\n                    区域 1-4 为角区域（corner region）。 每一个都用一次来形成最终边界图像的角点。<br /><br />\n                    区域 5-8 边区域（edge region）。在最终的边框图像中重复，缩放或修改它们以匹配元素的尺寸。<br /><br />\n                    区域 9 为中心区域（ middle region）。它在默认情况下会被丢弃，但如果设置了关键字fill，则会将其用作背景图像。<br /><br />\n\n                    用法：<br />\n                    <div className=\"code-desc\">\n                        /* 所有的边 */<br />\n                        border-image-slice: 30%; <br /><br />\n\n                        /* 垂直方向 | 水平方向 */<br />\n                        border-image-slice: 10% 30%;<br /><br />\n\n                        /* 顶部 | 水平方向 | 底部 */<br />\n                        border-image-slice: 30 30% 45;<br /><br />\n\n                        /* 上 右 下 左 */<br />\n                        border-image-slice: 7 12 14 5; <br /><br />\n\n                        /* 使用fill（fill可以放在任意位置） */<br />\n                        border-image-slice: 10% fill 7 12;<br />\n                    </div>\n\n                    border-image-outset:<br />\n                    用法：<br />\n                    <div className=\"code-desc\">\n                        /* border-image-outset: sides */<br />\n                        border-image-outset: 30%;<br /><br />\n\n                        /* border-image-outset:垂直 水平 */<br />\n                        border-image-outset: 10% 30%;<br /><br />\n\n                        /* border-image-outset: 顶 水平 底 */<br />\n                        border-image-outset: 30px 30% 45px;<br /><br />\n\n                        /* border-image-outset:顶 右 底 左  */<br />\n                        border-image-outset: 7px 12px 14px 5px;<br /><br />\n\n                        border-image-repeat: inherit;\n                    </div>\n\n\n                    <span className=\"textShadow\">3. 阴影</span><br />\n                    <div className=\"quote\">\n                        盒子阴影(box-shadow) | 文本阴影(text-shadow)\n                    </div>\n                    盒子阴影： box-shadow<br/>\n                    <div className=\"code-desc\">\n                        /* x偏移量 | y偏移量 | 阴影颜色 */<br/>\n                        box-shadow: 60px -16px teal;<br/><br/>\n\n                        /* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影颜色 */<br/>\n                        box-shadow: 10px 5px 5px black;<br/><br/>\n\n                        /* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */<br/>\n                        box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);<br/><br/>\n\n                        /* 插页(阴影向内) | x偏移量 | y偏移量 | 阴影颜色 */<br/>\n                        box-shadow: inset 5em 1em gold;<br/><br/>\n\n                        /* 任意数量的阴影，以逗号分隔 */<br/>\n                        box-shadow: 3px 3px red, -1em 0 0.4em olive;<br/><br/>\n\n                        /* 全局关键字 */<br/>\n                        box-shadow: inherit;<br/>\n                        box-shadow: initial;<br/>\n                        box-shadow: unset;<br/>\n                    </div>\n\n                    文本阴影： text-shadow<br/>\n                    <div className=\"code-desc\">\n                        /* offset-x | offset-y | blur-radius | color */<br/>\n                        text-shadow: 1px 1px 2px black; <br/><br/>\n\n                        /* color | offset-x | offset-y | blur-radius */<br/>\n                        text-shadow: #fc0 1px 0 10px; <br/><br/>\n\n                        /* offset-x | offset-y | color */<br/>\n                        text-shadow: 5px 5px #558abb;<br/><br/>\n\n                        /* color | offset-x | offset-y */<br/>\n                        text-shadow: white 2px 5px;<br/><br/>\n\n                        /* offset-x | offset-y<br/>\n                        /* Use defaults for color and blur-radius */<br/>\n                        text-shadow: 5px 10px;<br/><br/>\n\n                        /* Global values */<br/>\n                        text-shadow: inherit;<br/>\n                        text-shadow: initial;<br/>\n                        text-shadow: unset;<br/>\n                    </div>\n\n\n                    <span className=\"textShadow\">4. 选择器</span><br />\n                    <div className=\"quote\">\n                        属性选择器：<br/><br/>\n                        [attr]：选择包含attr属性的标签<br/>\n                        [attr=value]：选择attr属性值为value的标签<br/>\n                        [attr^=value]：选择attr属性值以value开头的标签<br/>\n                        [attr*=value]：选择attr属性值包含value的标签<br/>                       [attr$=value]：选择attr属性值以value结尾的标签<br/><br/>\n\n                        结构伪类选择器：<br/><br/>\n\n                        E:first-child, 选择器用于选取属于其父元素的首个子元素的指定选择器<br/>\n                        E:last-child, 选择器匹配属于其父元素的最后一个子元素的每个元素。<br/>\n                        E:nth-child(n), 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型<br/>\n                        E:nth-last-child(n), 选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<br/>\n                        E:first-of-type, 选择器匹配属于其父元素的特定类型的首个子元素的每个元素<br/>\n                        E:last-of-type, 选择器匹配属于其父元素的特定类型的最后一个子元素的每个元素<br/>\n                        E:nth-of-type(n), 选择器匹配同类型中的第n个同级兄弟元素<br/>\n                        E:nth-last-of-type(n), 选择器匹配属于父元素的特定类型的第 N 个子元素的每个元素，从最后一个子元素开始计数。<br/>\n                    </div>\n\n                    使用例子：<br />\n                    <Code code={`\n// [attr]\n[title]{ color: red; }\n\n// [attr=value]\n[title=demo] { color: red; }\n\n// [attr^=value]\ndiv[class^=\"test\"]{ color: red; }\n\n// [attr*=value]\ndiv[class*=\"test\"]{ color: red; }\n\n// [attr$=value]\ndiv[class$=\"test\"]{ color: red; }\n\n// E:first-child\nul li:first-child{ background-color:red; }\n\n// E:last-child\nul li:last-child{ background-color:red; }\n\n// E:nth-child(n)\nul li:nth-child(3){ background-color:red; }\n\n// E:first-of-type\np:first-of-type { background:#ff0000;}\n\n// E:last-of-type\np:last-of-type { background:#ff0000;}\n\n// E:nth-of-type(n)\np:nth-of-type(2) { background:#ff0000; }\n\n// E:nth-last-of-type(n)\np:nth-last-of-type(2) { background:#ff0000; }\n`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\n\n\nexport default class Margin extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">margin</span></p>\n                \n                <p className=\"item-title\"><span className=\"textShadow\">一、margin简介</span></p>\n                <div className=\"article-desc\">\n                    参考文档： https://blog.csdn.net/qiwoo_weekly/article/details/104285617<br />\n                    margin: 盒模型中盒子的外边距，有四个值：margin-top, margin-bottom, margin-left, margin-right;<br />\n                    margin的值： 可以为正值，负值，百分比<br />\n                    <span className=\"mark\">margin值为百分比：此时margin的值是基于包含块的宽度来计算的。</span><br />\n                </div>\n                    \n                <p className=\"item-title\"><span className=\"textShadow\">二、margin重叠</span></p>\n                <div className=\"article-desc\">\n                    所谓外边距重叠：即在垂直方向上，两个外边距相遇的时候，会重叠成一个外边距，重叠后的外边距的值等于两者中较大的那个值。<br /><br />\n                    外边距重叠有以下几种情况：<br />\n                    <span className=\"text-placeholder\" />1. 当两个元素垂直排列的时候，上面元素的下边距和下面元素的上边距会发生重叠；<br />\n                    <span className=\"text-placeholder\" />2. 对于嵌套的父子元素（例如只有一个子元素），如果父元素没有设置边框和内边距，那么他们的上下外边距都会发生重叠；<br />\n                    <span className=\"text-placeholder\" />3. 同一个元素的外边距也会发生重叠，如果存在一个空元素，该元素只有上下外边距，此时自身的上下外边距接触，发生重叠；<br />\n                    <span className=\"text-placeholder\" />4. 重叠后的外边距又接触其他元素的外边距，还会继续重叠。<br /><br />\n\n                    为什么会有外边距重叠？<br />\n                    外边距重叠是为了更好的排版而出现的。<br /><br />\n\n                    什么样的元素会发生外边距重叠？<br />\n                    只发生在常规文档流中块级盒子的垂直方向上。行内盒子，浮动盒子，绝对定位的盒子不会发生外边距重叠。<br /><br />\n\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\nimport '../layout/common.scss';\n\nexport default class Margin extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">BFC</span></p>\n                \n                <p className=\"item-title\">一、BFC简介</p>\n                <div className=\"quote\">\n                    参考文档： https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context<br /><br/>\n                    https://blog.csdn.net/sinat_36422236/article/details/88763187<br /><br />\n                   1. 定义<br />\n                   BFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。<br /><br />\n\n                   2. Box<br />\n                   Box 是 CSS 布局的对象和基本单位, 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context。<br /><br />\n\n                   3. Formatting Context<br />\n                   Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用.\n                </div>\n\n                <p className=\"item-title\">二、BFC的布局规则</p>\n                <div className=\"quote\">\n                    1. 内部的Box会在垂直方向，一个接一个放置；<br /><br />\n                    2. Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box之间的margin会发生重叠；<br /><br />\n                    3. 每个盒子的margin box的左边，与包含块border box的左边相接触，即使存在浮动也是如此；<br /><br />\n                    4. BFC的区域不会与float box重叠；  <br /><br />\n                    5. BFC就是页面上的一个隔离的独立容器，容器里的子元素不会影响外面的元素，反之亦是如此；  <br /><br />\n                    6. 计算BFC的高度时，浮动也参与计算。  <br /><br />\n\n                </div>\n                    \n                <p className=\"item-title\">三、生成BFC</p>\n                <div className=\"quote\">\n                    1. float的值不是none；<br /><br />\n                    2. position的值不是static或者relative（绝对定位元素 (元素具有 position 为 absolute 或 fixed)）；<br /><br />\n                    3. display的值是inline-block，inline-flex，table-cell，flex等；<br /><br />\n                    4. overflow的值不是visible<br /><br />\n                    \n                </div>\n\n                <p className=\"item-title\">四、BFC用途</p>\n                <div className=\"quote\">\n                    1. 利用BFC防止margin重叠；<br /><br />\n                    //2. 利用BFC做自适应两栏布局；<br /><br />\n                    3. 利用BFC清除浮动；<br /><br />\n\n                    使用实例：<br /><br />\n                    <p>1. 利用BFC防止margin重叠：左边是没有利用BFC，margin会重叠；右边使用了BFC</p>\n                    <div className=\"layout-bfc\">\n                        <div className=\"demo-list left\">\n                            <div className=\"item top\"></div>\n                            <div className=\"item bottom\"></div>\n                        </div>\n\n                        <div className=\"demo-list right\">\n                            <div className=\"item-wrap\">\n                                <div className=\"item top\"></div>\n                            </div>\n                            <div className=\"item bottom\"></div>\n                        </div>\n                    </div>\n                    <br />\n                    <p>3. 利用BFC清除浮动；: 上边不利用BFC（导致父元素高度塌陷），右边利用BFC</p>\n                    <div className=\"layout-bfc-float\">\n                        <div className=\"float-list left\">\n                            <div className=\"item\"></div>\n                        </div>\n                    </div>\n                    <br /><br />\n                    <div className=\"layout-bfc-float\">\n                        <div className=\"float-list right\">\n                            <div className=\"item left-col\"></div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\n\n\nexport default class ClearFloat extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">清浮动</span></p>\n                \n                <p className=\"item-title\">一、浮动</p>\n                <div className=\"quote\">\n                    <span className=\"mark\">float被设计出来的目的是为了实现文字环绕图片的效果。</span><br /><br />\n                    浮动的定义为浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框脱离文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。<br /><br />\n\n                    <span className=\"mark\">浮动的特点：</span><br />\n                    1. 浮动的元素会脱离正常的文档流；<br />\n                    2. 浮动的元素会向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止；<br />\n                    3. 一个浮动的内联元素（比如span img标签）不需要设置display：block就可以设置宽度;<br />\n                    4. 块级元素设置为浮动后，宽度将不再独占一行，而是收紧为内部元素的宽度。<br /><br />\n\n                    <span className=\"mark\">浮动的缺点：</span><br />\n                    1. 父容器高度塌陷<br />\n                </div>\n\n\n                <p className=\"item-title\">二、清浮动</p>\n                <div className=\"quote\">\n                    1. 给父元素给指定的高度值（扩展性不好）<br /><br />\n                    2. 添加一个空的块级元素设置clear: both;来清浮动：<br />\n                        缺点： 增加了无意义的冗余的标签<br />\n                        必须是一个块级元素，设置样式clear: both;<br /><br />\n                    3. 父元素使用伪元素:after来清浮动<br /><br />\n                    4. 给父元素使用overflow: hidden;来清浮动<br />\n                        原理： 让父元素触发BFC，由于BFC的高度包含浮动元素的高度，所以父元素高度不会塌陷。<br /><br />\n                    5. br标签：设置br标签的clear属性为all即可。<br />\n                </div>\n                <Code code={`\n//给父元素指定高度\n.parent{\n    width: 100px;\n    height: 100px;\n}\n.son{\n    width: 100%;\n    float: left;\n}\n\n//父元素添加一个空的块级标签\n.parent{\n    width: 100px;\n}\n.son{\n    width: 100%;\n    float: left;\n}\n.clearBox{\n    clear: both;\n}\n\n<div class=\"parent\">\n    <div class=\"son\"></div>\n    <div class=\"clearBox\"></div>\n</div>\n\n//父元素设置伪元素\n.parent{\n    width: 100px;\n}\n.parent::after{\n    content: '';\n    display: block;\n    clear: both;\n    height: 0;\n    line-height: 0;\n    visibility:hidden;//允许浏览器渲染它，但是不显示出来\n}\n\n//父元素使用overflow: hidden;\n.parent{\n    width: 100px;\n    overflow: hidden;\n}\n\n//br标签设置clear属性\n<div class=\"parent\">\n    <div class=\"son\"></div>\n    <br clear=\"all\" />\n</div>`} />\n                <p className=\"item-title\">三、清浮动总结</p>\n                <div className=\"quote\">\n                    清浮动一般可以分为两类，一类是使用clear属性，另一类是触发BFC<br /><br />\n\n                    1. clear属性：<br />\n                    clear 属性规定元素盒子的边不能和浮动元素相邻。该属性只能影响使用清除的元素本身，不能影响其他元素。\n                    换而言之，如果已经存在浮动元素的话，那么该元素就不会像原本元素一样受其影响了。 第一种方式里我们的填补元素(我自己的称呼)，就是起这种作用。<br /><br />\n\n                    2. BFC(block formatting contexts)块级格式化上下文<br />\n                    BFC是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\n                    由于BFC的高度包含浮动元素的高度，所以父元素高度不会塌陷。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\n\n\nexport default class SelectorNum extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">选择器及优先级</span></p>\n                <div className=\"article-desc\">\n                    MDN优先级计算规则： https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity<br />\n                    https://juejin.im/post/6844903709772611592<br /><br />\n\n                    1. 优先级<br />\n                    优先级就是分配给指定的CSS声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。<br /><br />\n                    而当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，CSS 中最后的那个声明将会被应用到元素上。<br /><br />\n                    当同一个元素有多个声明的时候，优先级才会有意义。因为每一个直接作用于元素的 CSS 规则总是会接管/覆盖（take over）该元素从祖先元素继承而来的规则。<br /><br />\n\n                    CSS选择器的优先级关系是:\n                    <div className=\"quote\">\n                    内联 > ID选择器 > 类选择器 > 标签选择器。\n                    </div>\n\n                    《CSS REFACTORING》中计算优先级的算法：<br /><br />\n                        优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：<br /><br />\n                        <span className=\"text-placeholder\" />如果存在内联样式，那么 A = 1, 否则 A = 0;<br /><br />\n                        <span className=\"text-placeholder\" />B 的值等于 ID选择器 出现的次数;<br /><br />\n                        <span className=\"text-placeholder\" />C 的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数;<br /><br />\n                        <span className=\"text-placeholder\" />D 的值等于 标签选择器 和 伪元素 出现的总次数 。<br /><br />\n\n                    实例：#nav-global > ul > li > a.nav-link <br />\n                    <div className=\"quote\">\n                        没有内联样式，A = 0<br />\n                        id选择器出现1次，B = 1 <br />\n                        类选择器出现1次，属性选择器0次，伪类0次，C = 1 + 0 + 0 <br />\n                        标签选择器出现3次，伪元素0次，D = 3 + 0 <br />\n                        (A, B, C, D) === (0, 1, 1, 3)\n                    </div>\n\n                    <span className=\"mark\">规则： 比较规则是: 从左往右依次进行比较 ，较大者胜出，如果相等，则继续往右移动一位进行比较 。如果4位全部相等，则后面的会覆盖前面的。</span><br /><br />\n                    例外： !important，有了!important优先级会最高，如果是行内加!important则是无敌。\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">一、有哪些选择器</span></p>\n                <div className=\"article-desc\">\n                    <div className=\"quote\">\n                        1. id选择器<br />\n                        2. class选择器<br />\n                        3. 属性选择器<br />\n                        4. 通配符选择器*<br />\n                        5. 伪类选择器<br />\n                        6. 伪元素选择器<br />\n                        7. 后代选择器<br />\n                        8. 子类选择器<br />\n                        9. 兄弟选择器<br />\n                    </div>\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、单个选择器权重</span></p>\n                <div className=\"article-desc\">\n                    <div className=\"quote\">\n                        1. 第一优先级：!important会覆盖页面内任何位置的元素样式<br />\n                        2. 内联样式，如style=\"color: green\"，权值为1000<br />\n                        3. ID选择器，如#app，权值为0100<br />\n                        4. 类、伪类、属性选择器，如.foo, :first-child, div[class=\"foo\"]，权值为0010<br />\n                        5. 标签、伪元素选择器，如div::first-line，权值为0001<br />\n                        6. 通配符、子类选择器、兄弟选择器，如*, >, +，权值为0000<br />\n                        7. 继承的样式没有权值<br />\n                    </div>\n\n                    <div className=\"quote\">\n                        !important > 内联样式 > ID > 类、伪类、属性 > 标签、伪元素 > 通配符、子类、兄弟选择器\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\n\n\nexport default class Import extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">@import</span></p>\n                \n                <p className=\"item-title\">1. link标签与@import的区别</p>\n                <div className=\"quote\">\n                    1. @import是 CSS 提供的语法规则，只有导入样式表的作用<br />\n                    2. link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等<br />\n                    3. 加载页面时，link引入的CSS被同时加载，@import引入的CSS将在页面加载完毕后加载<br />\n                    4. link标签作为HTML元素，不存在兼容性问题，而@import是CSS2.1才有的语法，故老版本浏览器（IE5之前）不能识别<br />\n                    5. 可以通过JS操作DOM，来插入link标签改变样式；由于DOM方法是基于文档的，无法使用@import方式插入样式<br />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../../comp/Code';\nimport FlexImage from './../../../../img/flex-img.jpg';\nimport './layout.scss';\n\nexport default class FlexPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">flex布局</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、flex简介</span></p>\n                <div className=\"article-desc\">\n                    参考文档： http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html<br /><br />\n                    Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。<br />\n                    任何一个容器都可以指定为 Flex 布局。<br />\n                    注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。<br />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、基本概念</span></p>\n                <div className=\"article-desc\">\n                    1. 容器： 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。<br />\n                    2. 项目： 它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。<br />\n                    3. 轴： 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br />\n                    4. 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。<br />\n                    <img className=\"big-img\" alt=\"\" src={FlexImage} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、容器的属性</span></p>\n                <div className=\"article-desc\">\n                    容器的属性：<br />\n                    <span className=\"text-placeholder\" />1. flex-direction<br/>\n                    <span className=\"text-placeholder\" />2. flex-wrap<br/>\n                    <span className=\"text-placeholder\" />3. flex-flow<br/>\n                    <span className=\"text-placeholder\" />4. justify-content<br/>\n                    <span className=\"text-placeholder\" />5. align-items<br/>\n                    <span className=\"text-placeholder\" />6. align-content<br/><br/>\n\n                    每个属性的含义：<br/>\n                    1. flex-direction：<br/>\n                    属性决定主轴的方向（即项目的排列方向）。<br/><br/>\n                    <Code code={`\n.box {\n    flex-direction: row | row-reverse | column | column-reverse;\n}`} /><br/>\n                    flex-direction有四个可能值：<br/>\n                    <span className=\"text-placeholder\" />1. row（默认值）：主轴为水平方向，起点在左端。<br/>\n                    <span className=\"text-placeholder\" />2. row-reverse：主轴为水平方向，起点在右端。<br/>\n                    <span className=\"text-placeholder\" />3. column：主轴为垂直方向，起点在上沿。<br/>\n                    <span className=\"text-placeholder\" />4. column-reverse：主轴为垂直方向，起点在下沿。<br/>\n\n                    实例：<br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-direction: row;</span>\n                        <div className=\"flex-layout flex-layout-1\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-direction: row-reverse;</span>\n                        <div className=\"flex-layout flex-layout-2\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-direction: column;</span>\n                        <div className=\"flex-layout flex-layout-3\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-direction: column-reverse;</span>\n                        <div className=\"flex-layout flex-layout-4\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/><br/>\n                    2. flex-wrap:<br/>\n                    默认情况下，项目都排在一条线（又称\"轴线\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。<br/><br/>\n                    <Code code={`\n.box{\n    flex-wrap: nowrap | wrap | wrap-reverse;\n}`} />\n                    flex-wrap有四个可能值：<br/>\n                    <span className=\"text-placeholder\" />1. nowrap（默认）：不换行。<br/>\n                    <span className=\"text-placeholder\" />2. wrap：换行，第一行在上方。<br/>\n                    <span className=\"text-placeholder\" />3. wrap-reverse：换行，第一行在下方。<br/>\n\n                    实例：<br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-wrap: nowrap;</span>\n                        <div className=\"flex-layout flex-layout-wrap-1\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-wrap: wrap;</span>\n                        <div className=\"flex-layout flex-layout-wrap-2\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">flex-wrap: wrap-reverse;</span>\n                        <div className=\"flex-layout flex-layout-wrap-3\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/><br/>\n                    3. flex-flow:<br/>\n                    flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。<br/><br/>\n                    <Code code={`\n.box {\n    flex-flow: <flex-direction> || <flex-wrap>;\n}`} />\n<br/><br/>\n                    4. justify-content:<br/>\n                    justify-content属性定义了项目在主轴上的对齐方式。<br/><br/>\n                    <Code code={`\n.box {\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n}`} />\n                    justify-content有5个可能值：<br/>\n                    <span className=\"text-placeholder\" />1. flex-start（默认值）：左对齐<br/>\n                    <span className=\"text-placeholder\" />2. flex-end：右对齐<br/>\n                    <span className=\"text-placeholder\" />3. center： 居中<br/>\n                    <span className=\"text-placeholder\" />4. space-between：两端对齐，项目之间的间隔都相等。<br/>\n                    <span className=\"text-placeholder\" />5. space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<br/>\n                    实例：<br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: flex-start;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-1\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: flex-end;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-2\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: center;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-3\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: space-between;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-4\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">justify-content: space-around;</span>\n                        <div className=\"flex-layout flex-layout-justify-content-5\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/><br/>\n                    5. align-items:<br/>\n                    align-items属性定义项目在交叉轴上如何对齐。<br/><br/>\n                    <Code code={`\n.box {\n    align-items: flex-start | flex-end | center | baseline | stretch;\n}`} />\n                    align-items有5个可能值：<br/>\n                    <span className=\"text-placeholder\" />1. flex-start：交叉轴的起点对齐。<br/>\n                    <span className=\"text-placeholder\" />2. flex-end：交叉轴的终点对齐。<br/>\n                    <span className=\"text-placeholder\" />3. center：交叉轴的中点对齐。<br/>\n                    <span className=\"text-placeholder\" />4. baseline: 项目的第一行文字的基线对齐。<br/>\n                    <span className=\"text-placeholder\" />5. stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<br/>\n                    实例：<br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: flex-start;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-1\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: flex-end;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-2\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: center;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-3\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: baseline;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-4\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n\n                    <br/>\n                    <div className=\"flex-wrap\">\n                        <span className=\"mark\">align-items: stretch;</span>\n                        <div className=\"flex-layout flex-layout-algin-items-5\">\n                            <div className=\"flex-item\">1</div>\n                            <div className=\"flex-item\">2</div>\n                            <div className=\"flex-item\">3</div>\n                        </div>\n                    </div>\n                </div>\n                <p className=\"item-title\"><span className=\"textShadow\">四、项目的属性</span></p>\n                <div className=\"article-desc\">\n                    以下6个属性设置在项目上:<br/>\n                    <span className=\"text-placeholder\" />1. order<br />\n                    <span className=\"text-placeholder\" />2. flex-grow<br />\n                    <span className=\"text-placeholder\" />3. flex-shrink<br />\n                    <span className=\"text-placeholder\" />4. flex-basis<br />\n                    <span className=\"text-placeholder\" />5. flex<br />\n                    <span className=\"text-placeholder\" />6. align-self<br /><br />\n\n                    各属性的含义及用法：<br/>\n                    <span className=\"mark1\">1. order: 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</span><br /><br />\n                    <span className=\"mark1\">2. flex-grow: 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span><br /><br />\n                    <span className=\"mark1\">3. flex-shrink: 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</span><br /><br />\n                    <span className=\"mark1\">4. flex-basis: 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</span><br /><br />\n                    <span className=\"mark1\">5. flex: flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<span className=\"mark\">两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</span></span><br /><br />\n                    <span className=\"mark1\">6. align-self: 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</span><br /><br />\n                    <Code code={`\n.item {\n    order: 1;\n}\n.item {\n    flex-grow: 0;\n}\n.item {\n    flex-shrink: 1;\n}\n.item {\n    flex-basis: auto;\n}\n.item {\n    flex: auto; // 1 1 auto\n    flex: none; // 0 0 auto\n    flex: 1;    // 1 1 0%\n    flex: 10;   // 10 1 0%\n}\n.item {\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\nimport './common.scss';\n\nexport default class Col2Page extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">两列自适应布局</span>\n                </p>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">常见的两列布局方案</span>\n                </p>\n                <div className=\"article-desc\">\n                    1. flex布局<br />\n                    2. float布局<br />\n                    3. position: absolute布局<br />\n                    4. table布局<br />\n                    5. grid布局<br />\n                </div>\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">一、flex布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-flex\">\n                        <div className=\"left\">左，定宽100px</div>\n                        <div className=\"right\">右，自适应</div>\n                    </div>\n                    <br />\n                    <Code code={`\n//html\n<div className=\"layout-flex\">\n    <div className=\"left\">左，定宽100px</div>\n    <div className=\"right\">右，自适应</div>\n</div>\n\n//css\n.layout-flex{\n    display: flex;\n    height: 100px;\n    .left{\n        width: 100px;\n        border: 1px solid red;\n    }\n    .right{\n        flex: 1;\n        border: 1px solid green;\n    }\n}\n`} />\n\n                <span className=\"mark\">flex布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少<br/>\n                2. 缺点：兼容性较差，只能兼容到ie9及以上<br />\n                </div>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二、float布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-float\">\n                        <div className=\"left\">左，定宽100px</div>\n                        <div className=\"right\">右，自适应</div>\n                    </div>\n                    <br />\n                    <Code code={`\n//html\n<div className=\"layout-float\">\n    <div className=\"left\">左，定宽100px</div>\n    <div className=\"right\">右，自适应</div>\n</div>\n\n//css\n.layout-float{\n    width: 100%;\n    .left{\n        float: left;\n        width: 100px;\n        border: 1px solid red;\n    }\n    .right{\n        margin-left: 100px;\n        border: 1px solid green;\n    }\n}\n`} />\n                <span className=\"mark\">float布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少,兼容性好<br/>\n                2. 缺点：会造成父元素高度塌陷（要对父元素进行清浮动处理）, 脱离文档流<br />\n                </div>\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">三、position: absolute布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-position\">\n                        <div className=\"left\">左，定宽100px</div>\n                        <div className=\"right\">右，自适应</div>\n                    </div>\n                    <br />\n                    <Code code={`\n//html\n<div className=\"layout-position\">\n    <div className=\"left\">左，定宽100px</div>\n    <div className=\"right\">右，自适应</div>\n</div>\n\n//css\n.layout-position{\n    width: 100%;\n    height: 100px;\n    position: relative;\n    .left{\n        width: 100px;\n        height: 100%;\n        position: absolute;\n        left: 0;\n        top: 0;\n    }\n    .right{\n        margin-left: 100px;\n        height: 100%;\n    }\n}\n`} />\n                <span className=\"mark\">position: absolute布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少,兼容性好<br/>\n                2. 缺点：会造成父元素高度塌陷（要对父元素进行清浮动处理）, 脱离文档流<br />\n                </div>\n\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">四、table布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-table\">\n                        <div className=\"table-row\">\n                            <div className=\"left\">左，定宽100px</div>\n                            <div className=\"right\">右，自适应</div>\n                        </div>\n                    </div>\n                    <br />\n\n                    <Code code={`\n//html\n<div className=\"layout-table\">\n    <div className=\"table-row\">\n        <div className=\"left\">左，定宽100px</div>\n        <div className=\"right\">右，自适应</div>\n    </div>\n</div>\n\n//css\n.layout-table{\n    width: 100%;\n    height: 100px;\n    display: table;\n    .table-row{\n        display: table-row;\n    }\n    .left{\n        width: 100px;\n        height: 100%;\n        display: table-cell;\n    }\n    .right{\n        display: table-cell;\n    }\n}\n`} />\n                <span className=\"mark\">position: absolute布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少,兼容性好<br/>\n                2. 缺点：<br />\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">五、grid布局</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"layout-gird\">\n                        <div className=\"left\">左，定宽100px</div>\n                        <div className=\"right\">右，自适应</div>\n                    </div>\n                    <br />\n                    <Code code={`\n//html\n<div className=\"layout-gird\">\n    <div className=\"left\">左，定宽100px</div>\n    <div className=\"right\">右，自适应</div>\n</div>\n\n//css\n.layout-gird{\n    display: grid;\n    grid-template-columns: 100px auto;\n    grid-template-rows: 100px;\n}\n`} />\n                <span className=\"mark\">position: absolute布局的优缺点：</span><br/>\n                1. 优点：简单易上手，代码少<br/>\n                2. 缺点：有兼容性问题<br />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\n\nexport default class Col3Page extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                3列布局\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\n\nexport default class GridLayout extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                Grid 网格布局\n                http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\nimport './layout.scss';\n\nexport default class SanjiaoPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">实现三角形</span>\n                </p>\n                <div className=\"article-desc\">\n                    <div className=\"sanjiao-wrap\">\n                        <div className=\"sanjiao-1 sanjiao-item\"></div>\n                        <div className=\"sanjiao-2 sanjiao-item\"></div>\n                        <div className=\"sanjiao-3 sanjiao-item\"></div>\n                        <div className=\"sanjiao-4 sanjiao-item\"></div>\n                    </div>\n                    <Code code={`\n//html\n<div className=\"sanjiao-1 sanjiao-item\"></div>\n//css\n.sanjiao-item{\n    width: 0;\n    height: 0;\n    border-top: 40px solid red;\n    \n    &.sanjiao-1{\n        border-left: 0px solid transparent;\n        border-right: 40px solid transparent;\n        border-bottom: 40px solid transparent;\n    }\n    &.sanjiao-2{\n        border-left: 40px solid transparent;\n        border-right: 0px solid transparent;\n        border-bottom: 40px solid transparent;\n    }\n    &.sanjiao-3{\n        border-left: 40px solid transparent;\n        border-right: 40px solid transparent;\n        border-bottom: 0px solid transparent;\n    }\n    &.sanjiao-4{\n        border-top: 0px solid transparent;\n        border-left: 40px solid transparent;\n        border-right: 40px solid transparent;\n        border-bottom: 40px solid red;\n    }\n}\n`} />\n                </div>\n            </div>\n            \n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../../comp/Code';\nimport BoxModelIcon1 from './../../../../img/boxModel1.jpg';\nimport BoxModelIcon2 from './../../../../img/boxModel2.jpg';\n\nexport default class BoxModel extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">盒模型</span></p>\n                <div className=\"quote\">\n                    参考文档： <a href=\"https://blog.csdn.net/qiwoo_weekly/article/details/104285617\" target=\"_blank\">https://blog.csdn.net/qiwoo_weekly/article/details/104285617</a><br />\n                    盒子模型（Box Modle）可以用来对元素进行布局，包括内边距，边框，外边距，和实际内容这几个部分。<br />\n                    盒子模型分为两种 第一种是W3c标准的盒子模型（标准盒模型） 、第二种IE标准的盒子模型（怪异盒模型）<br />\n                </div>\n\n                <p className=\"item-title\">一、两者的区别</p>\n                <div className=\"quote\">\n                    <span className=\"mark\">1. 标准盒模型</span><br />\n                    标准盒模型中width指的是内容区域content的宽度；height指的是内容区域content的高度。<br /><br />\n                    标准盒模型下盒子的大小  = content + border + padding + margin<br /><br />\n                    <img className=\"middle-img\" alt=\"\" src={BoxModelIcon1} /><br />\n\n                    <span className=\"mark\">2. 怪异盒模型</span><br />\n                    怪异盒模型中的width指的是内容、边框、内边距总的宽度（content + border + padding）;<br />\n                    height指的是内容、边框、内边距总的高度<br /><br />\n                    怪异盒模型下盒子的大小=width（content + border + padding） + margin<br />\n                    <img className=\"middle-img\" alt=\"\" src={BoxModelIcon2} />\n                </div>\n\n                <p className=\"item-title\">二、选择盒模型</p>\n                <div className=\"quote\">\n                    如果是定义了完整的doctype的标准文档类型，无论是哪种模型情况，最终都会触发标准模式。<br /><br />\n                    我们可以通过属性box-sizing来设置盒子模型的解析模式:<br /><br />\n                    可以为box-sizing赋三个值：<br />\n\n                        <span className=\"text-placeholder\" />content-box： 默认值，border和padding不算到width范围内，可以理解为是W3c的标准模型(default)<br />\n\n                        <span className=\"text-placeholder\" />border-box：border和padding划归到width范围内，可以理解为是IE的怪异盒模型<br />\n\n                        <span className=\"text-placeholder\" />padding-box：将padding算入width范围<br />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\n\nexport default class Unit extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">CSS中的单位</span></p>\n                <div className=\"article-desc\">\n                    响应式布局参看文档： https://juejin.im/post/6844903935568789517<br />\n                    https://juejin.im/post/6844903796280131591\n\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">一、基本概念</span></p>\n                <div className=\"article-desc\">\n                    1. 像素<br />\n                    <span className=\"text-placeholder\"/>基本原色素及其灰度的基本编码。像素是指由图像的小方格组成的，这些小方块都有一个明确的位置和被分配的色彩数值，小方格颜色和位置就决定该图像所呈现出来的样子。<br /><br />\n\n                    2. 物理像素<br />\n                    <span className=\"text-placeholder\"/>它是显示器（电脑、手机屏幕）最小的物理显示单位，物理像素指的是显示器上最小的点。物理像素的大小取决于屏幕。是一个无法改变的属性。单位为pt。\n                    <br /><br />\n                    <span className=\"mark\">设备像素 = 物理像素</span><br /><br />\n\n                    3. 设备独立像素<br />\n                    <span className=\"text-placeholder\"/>设备独立像素（又称设备无关像素 Device Independent Pixels 、密度独立性 Density Independent或设备独立像素，简称DIP或DP）是一种物理测量单位，基于计算机控制的坐标系统和抽象像素（虚拟像素），由底层系统的程序使用，转换为物理像素的应用。<br /><br />\n                    设备独立像素 = CSS 像素 = 逻辑像素<br /><br />\n\n                    4. 设备像素比<br />\n                    <span className=\"text-placeholder\"/>DPR（Device Pixel Ratio） 设备像素比，这个与我们通常说的视网膜屏（多倍屏，Retina屏）有关。<br /><br />\n                    <span className=\"mark\">设备像素比描述的是未缩放状态下，物理像素和设备独立像素的初始比例关系。</span><br /><br />\n                    计算公式：DPR = 物理像素 / 设备独立像素<br /><br />\n                    \n\n                    5. Retina屏幕<br />\n                    <span className=\"text-placeholder\"/>视网膜（Retina）屏幕是苹果公司\"发明\"的一个营销术语。 苹果公司将 dpr 大于 1 的屏幕称为视网膜屏幕。在视网膜屏幕中，以 dpr = 2 为例，把 4(2x2) 个像素当 1 个像素使用，这样让屏幕看起来更精致，但是元素的大小本身却不会改变。<br /><br />\n                    \n                    举例：iPhone6/7/8为例<br />\n                    打开 Chrome 开发者工具可以看到，iPhone6/7/8为375 * 667，表示的是设备独立像素（DIP），也可以理解为 CSS 像素，也称为逻辑像素<br /><br />\n                    iPhone7的物理像素为： 1334 * 750 <br /><br />\n                    iPhone7的设备像素比： DPR = 750 / 375 = 2 或者是 1334 / 667 = 2\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、单位</span></p>\n                <div className=\"article-desc\">\n                    1. px<br />\n                        默认情况下像素px是相对于屏幕分辨率而言，比如说我们的屏幕分辨率是1440 X 900，说的就是像素1440px X 900px；<br /><br />\n\n                    2. em<br />\n                    em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。<br /><br />\n                    \n                    em的特点：<br />\n                    \n                    a. em的值并不是固定的；<br />\n                    b. em会继承父级元素的字体大小；<br />\n                    c. 任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。<br /><br />\n\n                    3. rem<br />\n                    rem 是CSS3的一个相对单位（root em，根em）<br />\n                    使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素<br />\n                    只要html的font-size大小不变，1rem所代表的font-size大小就不会变，rem只取决于html的font-size<br /><br />\n\n                    rem解决了哪些问题？<br /><br />\n                    移动设备的宽度是各种各样的，每个设备的dpr也不同，换句话说就是不同设备每一行的物理像素数不同，能显示的css的px数也不同。<br />\n                    rem的大小是相对于html的font-size的，如果html的font-size根据不同设备的宽度做动态计算，问题就会得到解决。<br /><br />\n\n                    页面都是根据UI设计稿来做的，我们假设UI设计稿的宽度是750px，唯一不变就是就屏幕宽度，html的font-size（rem）只取决于设备宽度<br /><br />\n\n                    <div className=\"code-desc\">\n                    document.documentElement.style.fontSize = 100 * ( document.documentElement.clientWidth / 750) + 'px'\n                    </div>\n\n                    html的font-size：document.documentElement.style.fontSize<br />\n                    设备的宽度：document.documentElement.clientWidth<br />\n                    750：UI设计稿的宽度<br />\n                    为了方便计算我们将font-size x 100<br /><br />\n\n                    我们可以利用上述原理，通过js动态计算根元素的font-size，这样不管设备的宽度怎么变化，都可以兼容所有设备。<br />\n                    <Code code={`\nvar desginWidth = 750;\nvar docEl = document.documentElement;\nvar resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize';\n\nvar recalc = function() {\n    var clientWidth = docEl.clientWidth;\n    if (!clientWidth) return;\n    docEl.style.fontSize = 100 * (clientWidth / desginWidth) + 'px'\n}\n\nwindow.addEventListener(resizeEvt, recalc, false)\nwindow.addEventListener('pageshow', recalc, false)\ndocument.addEventListener('DOMContentLoaded', recalc, false)\n`} />\n\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\nimport './common.scss';\n\nexport default class Layout16to9 extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">宽度100%，长宽比为16:9</span></p>\n                <div className=\"article-desc\">\n                    做响应式网页，如何让一个div的高和宽保持比例放大或是缩小？<br />\n                    即给定可变宽度的元素，它将确保其高度以响应的方式保持成比例(即，其宽度与高度的比率保持恒定)。<br/><br/>\n                    \n                    参考文档： <a href=\"https://blog.csdn.net/qiwoo_weekly/article/details/104489511\" target=\"_blank\">https://blog.csdn.net/qiwoo_weekly/article/details/104489511</a><br/>\n                    实例：实现2 ： 1<br/>\n                    以下利用的原理是：padding-bottom，<span className=\"mark\">垂直方向上的内外边距使用百分比做单位时，是基于包含块的宽度来计算的。</span><br /><br />\n                    <span className=\"mark\">利用padding-bottom和定位实现</span><br/>\n                    <div className=\"layout-16to9\">\n                        <div className=\"demo\"></div>\n                    </div><br/>\n                    <Code code={`\n// html\n<div className=\"layout-16to9\">\n    <div className=\"demo\"></div>\n</div>\n\n// css\n.layout-16to9{\n    position: relative;\n    background-color: #ccc;\n    width: 10%;\n    padding-bottom: 20%;\n    .demo{\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n    }\n}`} />\n                </div>\n                <div className=\"article-desc\">\n                    1. 如果元素的尺寸已知的话，计算好宽高写上去就行了。<br/><br/>\n\n                    2. 如果元素尺寸未知，最简单的方法是用 JavaScript 实现，如果用 CSS 的话又要分为以下几种：<br/><br/>\n\n                    a. 如果是可替换元素 img 或 video，可以将width/height其一设定尺寸，另一个设为auto，则可替换元素会根据其固有尺寸进行变化。<br/><br/>\n                    b. 如果是普通的元素，我们可以通过padding-top/padding-bottom的方式来模拟固定宽高比，不过这种方式不灵活，只能够高度随着宽度变。CSS 工作组现在正在引入一种新的方案aspect-ratio，可以很方便地指定宽高比，不过暂时还没有浏览器实现。相信不久之后就会有浏览器逐渐实现了。<br/>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../../../comp/Code';\n\nexport default class Progress extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">Css 实现进度条</span></p>\n                \n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from '../comp/LeftSider';\n\n\nimport H5Note from './html/h5/index';\nimport Canvas from './html/h5/canvas';\nimport Meta from './html/h5/meta';\nimport Media from './html/h5/media';\nimport H5APINote from './html/api/index';\n\n\nimport CSS3Note from './css/css3/index';\nimport Margin from './css/css3/margin';\nimport BFC from './css/css3/bfc';\nimport ClearFloat from './css/css3/clearFloat';\nimport Selector from './css/css3/selector';\nimport Import from './css/css3/import';\n\nimport FlexNote from './css/layout/flex';\nimport Layout2Cols from './css/layout/2cols';\nimport Layout3Cols from './css/layout/3cols';\nimport LayoutGrid from './css/layout/grid';\nimport LayoutSanjiao from './css/layout/sanjiao';\nimport BoxModel from './css/css3/boxModel';\nimport UnitNote from './css/layout/unit';\nimport Layout16to9 from './css/layout/16to9';\nimport Progress from './css/layout/progress';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'HTML',\n        prop: 'h5',\n        children: [\n            {\n              label: 'h5',\n              prop: 'h5-span',\n              comp: function() {\n                return <H5Note />;\n              },\n            },\n            {\n                label: 'h5---API',\n                prop: 'h5-api',\n                comp: function() {\n                  return <H5APINote />;\n                },\n            },\n            {\n                label: 'canvas',\n                prop: 'h5-canvas',\n                comp: function() {\n                  return <Canvas />;\n                },\n            },\n            {\n                label: 'meta',\n                prop: 'h5-meta',\n                comp: function() {\n                  return <Meta />;\n                },\n            },\n            {\n                label: '媒体',\n                prop: 'h5-media',\n                comp: function() {\n                  return <Media />;\n                },\n            },\n        ]\n    },\n    {\n      label: 'CSS',\n      prop: 'css',\n      children: [\n        {\n          label: 'css3新特性',\n          prop: 'css3-new',\n          comp: function() {\n              return <CSS3Note />;\n          },\n        },\n        {\n            label: '盒模型',\n            prop: 'css3-boxModel',\n            comp: function() {\n                return <BoxModel />;\n            },\n        },\n        {\n            label: 'margin',\n            prop: 'css3-margin',\n            comp: function() {\n                return <Margin />;\n            },\n        },\n        {\n            label: 'BFC',\n            prop: 'css3-bfc',\n            comp: function() {\n                return <BFC />;\n            },\n        },\n        {\n            label: '清浮动',\n            prop: 'css3-clearFloat',\n            comp: function() {\n                return <ClearFloat />;\n            },\n        },\n        {\n          label: 'flex布局',\n          prop: 'layout-flex',\n          comp: function() {\n              return <FlexNote />;\n          },\n      },\n      {\n        label: '两栏布局',\n        prop: 'layout-2-col',\n        comp: function() {\n            return <Layout2Cols />;\n        },\n      },\n      {\n          label: '三栏布局',\n          prop: 'layout-3-col',\n          comp: function() {\n              return <Layout3Cols />;\n          },\n        },\n        {\n            label: 'grid网格布局',\n            prop: 'layout-grid',\n            comp: function() {\n                return <LayoutGrid />;\n            },\n        },\n        {\n            label: '三角形',\n            prop: 'layout-sanjiao',\n            comp: function() {\n                return <LayoutSanjiao />;\n            },\n        },\n        {\n            label: '16 : 9',\n            prop: 'layout-16to9',\n            comp: function() {\n                return <Layout16to9 />;\n            },\n        },\n        {\n            label: 'css单位',\n            prop: 'layout-unit',\n            comp: function() {\n                return <UnitNote />;\n            },\n        },\n        {\n            label: '选择器及优先级',\n            prop: 'css-selector',\n            comp: function() {\n                return <Selector />;\n            },\n        },\n        {\n            label: 'css实现进度条',\n            prop: 'css-progress',\n            comp: function() {\n                return <Progress />;\n            },\n        },{\n            label: '@import',\n            prop: 'css-@import',\n            comp: function() {\n                return <Import />;\n            },\n        },\n      ]\n  },\n];\n\nexport default function H5Index () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WorkPrinciple extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {            \n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">浏览器工作原理</span></p>\n                <div className=\"quote\">\n                    参考文档： https://juejin.im/post/6875249496859770894<br />\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\nimport {Table} from 'antd';\nimport htmlImage from '../../../img/html.jpg';\n\nexport default class BrowserLoad extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const columns_prop = [\n            {\n                title: '状态码',\n                dataIndex: 'statusNum',\n                key: 'statusNum',\n            },\n            {\n                title: '说明',\n                dataIndex: 'desc',\n                key: 'desc',\n            },\n        ];\n\n        const dataSource_prop = [\n            {\n                key: '1',\n                statusNum: '1XX',\n                desc: '信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求',\n            },\n            {\n                key: '2',\n                statusNum: '100',\n                desc: 'Continue',\n            },{\n                key: '3',\n                statusNum: '101',\n                desc: ' Switching Protocols',\n            },{\n                key: '4',\n                statusNum: '2xx',\n                desc: '成功状态码，表示服务器已成功接收到请求并进行处理'\n            },{\n                key: '5',\n                statusNum: '200',\n                desc: 'OK 表示客户端请求成功'\n            },{\n                key: '6',\n                statusNum: '204',\n                desc: 'No Content 成功，但不返回任何实体的主体部分'\n            },{\n                key: '7',\n                statusNum: '206',\n                desc: 'Partial Content 成功执行了一个范围（Range）请求'\n            },{\n                key: '8',\n                statusNum: '3xx',\n                desc: '重定向状态码，表示服务器要求客户端重定向。'\n            },{\n                key: '9',\n                statusNum: '301',\n                desc: 'Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL'\n            },{\n                key: '10',\n                statusNum: '302',\n                desc: 'Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源'\n            },{\n                key: '11',\n                statusNum: '303',\n                desc: 'See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源'\n            },{\n                key: '12',\n                statusNum: '304',\n                desc: 'Not Modified 服务器内容没有更新，可以直接读取浏览器缓存'\n            },{\n                key: '13',\n                statusNum: '307',\n                desc: 'Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现'\n            },{\n                key: '14',\n                statusNum: '4xx',\n                desc: '客户端错误状态码，表示客户端的请求有非法内容。'\n            },{\n                key: '15',\n                statusNum: '400',\n                desc: 'Bad Request 表示客户端请求有语法错误，不能被服务器所理解'\n            },{\n                key: '16',\n                statusNum: '401',\n                desc: 'Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用'\n            },{\n                key: '17',\n                statusNum: '403',\n                desc: 'Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因'\n            },{\n                key: '18',\n                statusNum: '404',\n                desc: 'Not Found 请求的资源不存在，例如，输入了错误的URL'\n            },{\n                key: '19',\n                statusNum: '5xx',\n                desc: '服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。'\n            },{\n                key: '20',\n                statusNum: '500',\n                desc: 'Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求'\n            },{\n                key: '21',\n                statusNum: '503',\n                desc: 'Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常'\n            }\n        ];\n\n        const columns_response_header = [\n            {\n                title: 'key',\n                dataIndex: 'keys',\n                key: 'keys',\n            },\n            {\n                title: 'value',\n                dataIndex: 'value',\n                key: 'value',\n            },\n        ];\n\n        const dataSource_response_header = [\n            {\n                key: '1',\n                keys: 'Allow',\n                value: '服务器支持哪些请求方法，eg： get， post等'\n            },{\n                key: '2',\n                keys: 'Content-Encoding',\n                value: '文章的编码方法，只有在解码之后才可以得到Content-type头指定的内容类型。利用gzip压缩文档能够显著的减少HTML文档的下载时间。'\n            },{\n                key: '3',\n                keys: 'Content-length',\n                value: '表示内容的长度，只有当浏览器使用持久HTTP连接时才要这个数据。'\n            },{\n                key: '4',\n                keys: 'Content-type',\n                value: '表示后面的文档属于什么MIME类型，servlet默认为text/plain，但是通常要显式的指定为text/html.'\n            },{\n                key: '5',\n                keys: 'Date',\n                value: '当前的GMT时间'\n            },{\n                key: '6',\n                keys: 'Expires',\n                value: '过期时间'\n            },{\n                key: '7',\n                keys: 'Last-Modified',\n                value: '文档最后的修改时间，客户端可以通过If-Modified-Since请求头提供一个日期。'\n            },{\n                key: '8',\n                keys: 'Location',\n                value: '表示客户端应该去哪里提取文档，该方法同时设置的状态码为302'\n            },{\n                key: '9',\n                keys: 'Refresh',\n                value: '表示浏览器应该在多长时间后刷新文档，以秒记。也可以通过设置meta标签实现同样的功能。'\n            },{\n                key: '10',\n                keys: 'Refresh',\n                value: '表示浏览器应该在多长时间后刷新文档，以秒记。也可以通过设置meta标签实现同样的功能。'\n            },{\n                key: '11',\n                keys: 'server',\n                value: '服务器名字，servlet一般不设置这个值，而是由web服务器自己设置。'\n            },{\n                key: '12',\n                keys: 'Set-cookie',\n                value: '设置和页面关联的Cookie'\n            },{\n                key: '13',\n                keys: 'www-Authenticate',\n                value: '客户端应该在authenticate头中提供什么类型的授权信息。'\n            },\n        ]\n\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">从地址栏输入url到页面加载完成都发生了什么</span></p>\n                <div className=\"quote\">\n                    参考链接： https://juejin.im/entry/59c1e43e6fb9a00a53275fcc<br />\n                    参考链接： https://juejin.im/post/5cb44c365188257ab74c639c<br />\n                    参考链接： https://juejin.im/post/5cb44c365188257ab74c639c<br />\n                    参考链接：https://juejin.im/post/6844903503677095949<br />\n                    参考链接：https://juejin.im/post/6844904020935606285\n                </div>\n                <h3>1. 在浏览器地址栏输入url后回车经历的过程</h3>\n                <div className=\"quote\">\n                    1. 查找ip即域名解析（DNS）<br />\n                    2. 客户端根据ip地址和服务器建立连接<br />\n                    3. 客户端和服务端进行通信<br />\n                    4. 客户端和服务器断开连接<br />\n                    5. 浏览器开始解析渲染页面<br />\n                </div>\n                <h3>2. 名词解释</h3>\n                <div className=\"quote\">\n                    1. ip地址: 指互联网协议地址。是 IP 协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。 <br />\n                    2. 域名： 是由一串用点分隔的名字组成的 Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。由于纯数字的 IP 地址难以被记忆，所以使用有代表意义的字符（域名）来代替纯数字的 IP 地址，但最终仍需要通过域名来查找其对应的 IP 地址才能够找到相应主机的位置。<br />\n                    3. DNS: 域名系统，是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。<br />\n                    4. URL: 统一资源定位符，也被称为网页地址（网址）。指的是因特网上各种资源的地址。\n                </div>\n                <h3>3. IP查找</h3>\n                <div className=\"quote\">\n                    输入url后回车，这是浏览器通过域名进行查找ip地址（也称为DNS解析），具体过程如下：<br />\n                    1. 浏览器搜索自己的DNS缓存，查找成功返回ip，失败则进行下一步；<br />\n                    2. 搜索系统中的DNS缓存，查找成功返回ip，失败则进行下一步；<br />\n                    3. 查找系统中的hosts文件，查找成功返回ip，失败则进行下一步；<br />\n                    4. 系统发送一个请求到路由器上，路由器查找缓存，查找成功返回ip，失败则进行下一步；<br />\n                    5. 系统将域名发送至本地域名服务器（LDNS），查找成功返回ip，失败则LDNS会向根域名服务器（Root Name Server）发起请求获得域的顶级域名服务器地址，然后依次获得各级域名服务器地址， 最后获取域名对应的ip地址；<br />\n                    6. LDNS将域名地址返回给操作系统并缓存起来；<br />\n                    7. 系统将ip地址返回给浏览器并缓存起来；<br />\n                    8. 浏览器获得ip地址，发起建立连接的请求。\n                </div>\n\n                <h3>4. 建立连接--3次握手</h3>\n                <div className=\"quote\">\n                    浏览器获得ip地址后，就会对目标服务器发起建立TCP连接的请求，建立主要有三个步骤(称为3次握手)：<br />\n                    1. 浏览器向服务器发起要建立连接的请求；<br />\n                    2. 服务器向浏览器发送同意建立的响应；<br />\n                    3. 浏览器向服务器发送收到确认响应的请求，客户端和服务器建立连接。\n                </div>\n                <h3>5. 开始通信</h3>\n                <div className=\"quote\">\n                    上一步浏览器和服务器已经建立了连接，这时候便会进行通信，客户端向服务器请求网络资源步骤如下: <br />\n                    1. 浏览器向服务器发起一个 HTTP 请求；<br />\n\n                    http请求报文由3部分组成：请求行，请求头，请求正文<br />\n                    请求行格式： eg： GET home.html HTTP/1.1<br />\n                    常用的方法有: GET, POST, PUT, DELETE, OPTIONS, HEAD。<br />\n\n                    请求报头：常见的请求报头有：Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等<br />\n                    请求正文：当使用POST, PUT等方法时，通常需要客户端向服务器传递数据，请求的数据格式一般为json。这时就需要设置Content-Type: application/json。<br />\n                </div>\n                <h3>6. 服务器返回一个 HTTP 响应</h3>\n                <div className=\"quote\">\n                    HTTP响应报文也是由三部分组成: 状态码, 响应头和响应报文。<br />\n                    状态码： eg： HTTP/1.1 200 OK <br />\n                    协议版本：是用http1.0还是其他版本<br />\n                    状态描述：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok<br /><br />\n                    状态代码： <br />\n\n                    <Table \n                        dataSource={dataSource_prop} \n                        columns={columns_prop} \n                        pagination={false} \n                    />\n\n                    <br />响应头：由关键字/值对组成，每行一对，关键字和值用英文冒号\":\"分隔，典型的响应头有：<br />\n                    \n                    <Table \n                        dataSource={dataSource_response_header} \n                        columns={columns_response_header} \n                        pagination={false} \n                    />\n                </div>\n                <h3>7. html解析</h3>\n                <div className=\"quote\">\n                    webkit的渲染过程为：解析html以构建dom树 ==》 构建render树 ==》 布局render树 ==》 绘制render树<br /><br />\n                    <img className=\"big-img\" alt=\"\" src={htmlImage} /><br />\n                    浏览器在解析html文件时，会自上而下加载，并在加载过程中进行解析渲染，在解析过程中，如果遇到请求外部资源时，如图片，外链css，请求是异步的，并不会影响html文档进行加载。<br /><br />\n\n                    解析过程中会先解析html文件构建DOM树，然后解析css构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其渲染在屏幕上，这里会涉及到回流和重绘。<br /><br />\n\n                    DOM节点中的各个元素都是以盒模型形式存在，这些都要浏览器去计算它的大小和位置，这个过程为回流，当盒模型的大小和位置，颜色，字体等属性确定好了浏览器便开始绘制内容，这个过程为重绘。<br /><br />\n                    页面在首次加载的时候必然会经历回流和重绘，这两个过程会十分消耗性能，尤其在移动端，所以应该尽量减少回流和重绘。<br /><br />\n\n                    当文档加载过程中遇到js文件的时候，html文档会挂起渲染（js引擎线程和GUI渲染线程互斥），不仅要等js文件加载完成，还要等js文件解析执行完毕，才可以恢复html渲染线程。因为js有可能会修改dom，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。<br /><br />\n                    js的解析是由浏览器的js引擎完成的，js是单线程运行的，也就是说同一时间只能执行一件事，所有的任务都要进行排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务很耗时，所以需要一种机制可以先执行后面的任务，这就是同步任务和异步任务。<br /><br />\n                    js的执行机制就可以看做是一个主线程加上一个任务队列，同步任务就是放在主线程来执行，异步任务是放在任务队列中。所有的同步任务在主线程上执行，线程一个执行栈，异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫事件循环（Event Loop）。\n                </div>\n\n                <h3>8. 断开连接---TCP四次挥手</h3>\n                <div className=\"quote\">\n                    客户端与服务器的相互通信完成后，便会断开连接，断开连接主要有四个步骤，一般称为客户端与服务器端的四次挥手：<br />\n                    1. 浏览器向服务器发送向断开连接的请求；<br />\n                    2. 服务器向浏览器发送收到请求的响应；<br />\n                    3. 服务器向浏览器发送断开连接的请求；<br />\n                    4. 浏览器断开连接并向服务器发送一个反馈请求，服务器收到后断开连接。<br /><br />\n\n                    为什么需要4次？<br />\n                    主要是因为当客户端向服务器发送断开连接时，服务器的数据不一定处理完毕了，所以服务器是先告诉客户端已经收到了它想断开连接的请求，然后等服务器数据处理完毕时，\n                    便通知客户端请求断开连接，客户端收到后便断开连接并通知服务器，服务器收到后才断开连接。\n\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\nimport {Table} from 'antd';\nimport cache1 from '../../../img/cache-1.jpg';\nimport cache2 from '../../../img/cache-2.jpg';\nimport cache3 from '../../../img/cache-3.jpg';\n\nexport default class BrowserCache extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const columns = [\n            {\n                title: '缓存位置',\n                dataIndex: 'position',\n                key: 'position',\n            },\n            {\n                title: '说明',\n                dataIndex: 'desc',\n                key: 'desc',\n            },\n        ];\n\n        const dataSource = [\n            {\n                key: '1',\n                position: 'Service Worker',\n                desc: 'Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。',\n            },\n            {\n                key: '2',\n                position: 'Memory Cache',\n                desc: '内存中的缓存,主要包含的是当前中页面中已经抓取到的资源,例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。',\n            },\n            {\n                key: '3',\n                position: 'Disk Cache',\n                desc: '存储在硬盘中的缓存, 读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上.',\n            },\n            {\n                key: '4',\n                position: 'Push Cache',\n                desc: 'Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。',\n            },\n        ];\n        const columns_cache_control = [\n            {\n                title: 'cache-control指令',\n                dataIndex: 'cachekey',\n                key: 'cachekey',\n            },\n            {\n                title: '说明',\n                dataIndex: 'desc',\n                key: 'desc',\n            },\n        ];\n\n        const dataSource_cache_control = [\n            {\n                key: '1',\n                cachekey: 'public',\n                desc: '表示响应可以被客户端和代理服务器缓存',\n            },\n            {\n                key: '2',\n                cachekey: 'private',\n                desc: '表示响应只可以被客户端缓存',\n            },{\n                key: '3',\n                cachekey: 'max-age=300',\n                desc: '缓存300秒后过期，需要重新请求',\n            },{\n                key: '4',\n                cachekey: 's-maxage=300',\n                desc: '覆盖max-age，作用一样，只在代理服务器中生效',\n            },{\n                key: '5',\n                cachekey: 'no-store',\n                desc: '不缓存任何响应',\n            },{\n                key: '6',\n                cachekey: 'no-cache',\n                desc: '资源被缓存，但是立即失效，下次会发起请求验证资源是否过期',\n            },{\n                key: '7',\n                cachekey: 'max-stale=30',\n                desc: '30秒内即使过期，也使用缓存',\n            },{\n                key: '8',\n                cachekey: 'min-fresh=30',\n                desc: '希望在30秒内获取最新的响应',\n            },\n        ];\n                        \n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">浏览器缓存</span></p>\n                <div className=\"quote\">\n                    参考文档： https://juejin.im/post/5c417993f265da61285a6075<br />\n                    参考文档： https://www.jianshu.com/p/54cc04190252<br />\n\n                    缓存的优点：缓存是性能优化中简单高效的一种优化方式，一个优秀的缓存策略可以缩短网页请求时间，减少延迟，由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。\n                </div>\n\n                <h3>1. 缓存的位置</h3>\n                <div className=\"quote\">\n                    1. service worker<br />\n                    2. memory cache<br />\n                    3. disk cache<br />\n                    4. push cache<br />\n\n                    <Table \n                        dataSource={dataSource} \n                        columns={columns} \n                        pagination={false} \n                    />\n                </div>\n\n                <h3>2. 缓存过程</h3>\n                <div className=\"quote\">\n                    浏览器第一次向服务器发起请求后拿到请求结果，将结果和缓存标识存入浏览器缓存中，浏览器对于缓存的处理是根据第一次请求资源时返回的响应头来确定的。<br />\n                    <img className=\"middle-img\" alt=\"\" src={cache1} style={{height: '100%'}}/>\n                </div>\n\n                <h3>3. 强缓存</h3>\n                <div className=\"quote\">\n                    强缓存不会向服务器发送请求，直接从缓存中读取资源，请求返回200的状态码，size显示为from disk cache或from memory cache。<br />\n                    强缓存可以通过设置HTTP Header实现： Expires 和 Cache-Control。<br /><br />\n\n                    1. Expires： 缓存过期时间，用来指定资源的到期时间，是服务器的具体时间点。<br />\n                    expires是http/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。<br /><br />\n\n                    2. Cache-Control：是http/1.1的重要规则，主要用于控制网页缓存。<br />\n\n                    <Table \n                        dataSource={dataSource_cache_control} \n                        columns={columns_cache_control} \n                        pagination={false} \n                    /><br />\n\n                    3. Expires 和 Cache-Control对比<br />\n                    expires是http/1.0的产物，cache-control是http/1.1的产物，两者同时存在的话，cache-control优先级高于expires。<br />\n                    强缓存是否缓存得的依据是是否超过某个时间，而不关心服务器文件是否更新，这可能就会导致加载文件不是最新的内容。\n                </div>\n\n                <h3>4. 协商缓存</h3>\n                <div className=\"quote\">\n                    当强缓存失效后，浏览器携带缓存标示向服务器发起请求，有服务器根据缓存标示决定是否要使用缓存的过程。<br />\n                    1. 协商缓存生效：返回304和Not Modified<br />\n                    2. 协商缓存失效： 返回200和请求资源<br />\n                    <img className=\"middle-img\" alt=\"\" src={cache2} style={{height: '100%'}}/>\n                    <img className=\"middle-img\" alt=\"\" src={cache3} style={{height: '100%'}}/>\n                    <br /><br />\n\n                    协商缓存可以通过设置两种HTTP Header实现：Last-Modified 和 ETag<br /><br />\n                    1. Last-Modified和 If-Modified-Since<br />\n                    浏览器在第一次访问资源时，服务器返回资源的同时，在response header中添加last-modified的header，值是这个而资源在服务器上最后的修改时间。<br />\n                    浏览器下一次请求资源时，浏览器检测到右last-modified这个header，于是添加If-Modified-Since这个header，值就是Last-Modified的值。服务器拿到这个值会和最后修改时间做对比，如果没有变化就返回304和空的响应体，直接从缓存读取，如果If-Modified-Since的值小于服务器中这个资源的最后修改时间，说明文件有更新，返回新的资源和200。<br /><br />\n\n                    Last-Modified的缺点：如果本地打开缓存文件，即使没有对文件做修改，但是还是会造成Last-Modified被修改，服务器不能命中缓存导致发送相同的资源。另外因为Last-Modified只能以秒为单位，如果在小于1s内修改文件，那么服务端还是会命中缓存。<br /><br />\n\n                    2. ETag 和 If-None-Match<br />\n                    ETag是服务器响应请求时候，返回当前资源文件的一个唯一标识（由服务器生成），只要资源有变化，ETag就会重新生成，浏览器在下一次加载资源时向服务器发送请求时会带上上一次的ETag的值放到request header里的If-None-Match里，服务器只需要对比客户端传来的If-None-Match 和服务器中的ETag是否一致，如果匹配不上说明文件有更新，返回新的资源和200，否则返回304和空响应体。<br /><br />\n\n\n                    3. ETag 和 Last-Modified对比：<br />\n                    在精度上：ETag高于Last-Modified<br />\n                    在性能上：Last-Modified高于ETag<br />\n                    在优先级上：ETag高于Last-Modified\n                </div>\n\n                <h3>5. 缓存机制</h3>\n                <div className=\"quote\">\n                    强缓存优先于协商缓存，如果强缓存生效直接使用缓存，如果强缓存失效则进行协商缓存，协商缓存由服务器决定是否使用缓存，如果协商缓存失效，说明请求的缓存失效，返回200，重新返回资源和缓存标示，再存入到浏览器缓存中，生效则返回304.<br />\n                </div>\n\n                <h3>6. 使用缓存机制的场景</h3>\n                <div className=\"quote\">\n                    1. 频繁变动的资源：Cache-Control: no-cache; 是浏览器每次都请求服务器，配合ETag或者Last-Modified来验证数据是否有效。可以减少响应数据大小。<br />\n                    2. 不常变化的资源：Cache-Control: max-age=31536000; 这样相同的请求都会命中强缓存。\n                </div>\n\n                <h3>7. 用户行为对缓存的影响</h3>\n                <div className=\"quote\">\n                    1. 打开网页：地址栏输入url，查找disk cache中是否有匹配，有则使用，没有则发送请求。<br />\n                    2. 普通刷新（f5）：因为进程没有结束，因此memory cache是可用的，会被优先使用，其次是disk cache。<br />\n                    3. 强制刷新（ctrl+f5）：浏览器不使用缓存\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\nimport NeiHe from '../../../img/neihe.jpg';\n\nexport default class BrowserNote extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">浏览器进程、渲染、运行机制解密</span></p>\n                \n                <p className=\"item-title\">一、线程和进程</p>\n                <div className=\"quote\">\n                    参考文档： <a href=\"https://segmentfault.com/a/1190000012925872\" target=\"_blank\">https://segmentfault.com/a/1190000012925872</a><br/><br/>\n                    1、进程：进程是CPU分配的最小单位，是能拥有资源和独立运行的最小单位， 不同的进程之间可以通讯，但是代价较大。<br/>\n                    2、线程：是CPU调度的最小单位, 线程是建立在进程的基础上的一次程序运行单位，一个进程可以有多个线程；单线程和多线程是指一个进程里的单和多；<br/>\n                    <br />\n                    举例说明：<br />\n                    进程是一个工厂，线程是工厂的工人，工厂之间独立，一个工厂可以有一个或者多个工人，每个工人协作完成任务，工人之间共享空间。<br />\n                </div>\n\n                <p className=\"item-title\">二、浏览器是多进程的</p>\n                <div className=\"quote\">\n                    1. 浏览器是多进程的<br />\n                    2. 浏览器之所以能够运行，是因为系统给他的进程分配了资源（CPU，内存）<br />\n                    3. 简单点理解，每打开一个Tab页，相当于创建了一个独立的浏览器进程。<br /><br />\n\n                    <span className=\"mark\">浏览器包含哪些进程？</span><br />\n                    1. browser进程：浏览器的主进程（负责协调，主控），只有一个，作用有：<br />\n                        <span className=\"text-placeholder\" />负责浏览器界面显示，与用户交互，如前进后退等；<br />\n                        <span className=\"text-placeholder\" />负责各个页面的管理，创建和销毁其他进程；<br />\n                        <span className=\"text-placeholder\" />将Renderer进程得到的内存中的Bitmap，绘制到用户界面上；<br />\n                        <span className=\"text-placeholder\" />网络资源的下载，管理等<br /><br />\n                    2. 第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件的时候才会创建<br /><br />\n                    3. GPU进程：最多一个，用于3D绘制等<br /><br />\n                    4. 浏览器渲染进程（Renderer进程，内部是多线程的）：默认每个Tab页一个进程，互不影响, 作用有：<br />\n                        <span className=\"text-placeholder\" />页面渲染，脚本执行，事件处理<br /><br />\n\n                    <span className=\"mark\">浏览器多进程的优点</span><br />\n                    1. 防止单个tab崩溃影响整个浏览器<br />\n                    2. 避免第三方插件crash影响整个浏览器<br />\n                    3. 多进程能充分利用多核优势<br />\n                    4. 方便使用沙盒模型隔离插件等进程，提高浏览器稳定性<br />\n                </div>\n\n                <p className=\"item-title\">三、浏览器内核--渲染进程</p>\n                <div className=\"quote\">\n                    页面的渲染，js的执行，事件的循环都在这个进程中执行。<br />\n                    <span className=\"mark\">浏览器的渲染是多线程的。</span><br /><br />\n                    主要的线程有：<br />\n                    1. GUI渲染线程：<br />\n                    <span className=\"text-placeholder\" />负责渲染浏览器界面, 解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等；<br /><br />\n                    <span className=\"text-placeholder\" />当界面需要重绘（repaint）或由于某种操作引发回流时（reflow），该线程就会执行；<br /><br />\n                    <span className=\"text-placeholder\" />GUI线程和JS引擎线程是互斥的，当JS线程执行的时候GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即执行。<br /><br />\n\n                    2. JS引擎线程：<br />\n                    <span className=\"text-placeholder\" />也称为JS内核，负责处理js脚本程序；<br /><br />\n                    <span className=\"text-placeholder\" />JS引擎线程负责解析js脚本，运行代码；<br /><br />\n                    <span className=\"text-placeholder\" />JS引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个tab页中无论何时都只有一个JS线程在运行js程序；<br /><br />\n                    <span className=\"text-placeholder\" />JS引擎线程和GUI线程是互斥的，如果js执行的时间过长的话，就会造成页面的渲染不连贯，导致页面加载阻塞。<br /><br />\n\n\n                    3. 事件触发线程：<br />\n                    <span className=\"text-placeholder\" />归属于浏览器而不是JS引擎，用来控制时间循环；<br /><br />\n                    <span className=\"text-placeholder\" />当JS引擎执行代码块如setTimeout（也可来自浏览器内核的其他线程，如鼠标点击，ajax异步请求）时，会将对应的任务添加到事件线程中；<br /><br />\n                    <span className=\"text-placeholder\" />当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理；<br /><br />\n                    <span className=\"text-placeholder\" />由于JS是单线程的，所以这些待处理队列中的事件都要排队等待JS引擎的处理（当JS引擎空闲的时候才会去处理）。<br /><br />\n\n                    4. 定时器触发线程：<br />\n                    <span className=\"text-placeholder\" />setInterval和setTimeout所在的线程；<br /><br />\n                    <span className=\"text-placeholder\" />浏览器中定时器计数不是由JS引擎计数的，因为JS引擎是单线程的，如果处于阻塞情况下那计时就会不准；<br /><br />\n                    <span className=\"text-placeholder\" />所以计时器是有单独的线程来处理的，计时完成后，添加到事件队列，等待JS引擎空闲的时候来执行；<br /><br />\n                    <span className=\"text-placeholder\" />W3C在HTML标准中规定setTimeout时间间隔最小为4ms。<br /><br />\n\n                    5. 异步http请求线程：<br />\n                    <span className=\"text-placeholder\" />在XMLHttpRequest连接后是通过浏览器新开的一个线程请求；<br /><br />\n                    <span className=\"text-placeholder\" />在检测到状态改变时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入到事件队列中，等待JS引擎来执行。<br /><br />\n\n                    <img style={{width: '150px'}} alt=\"\" src={NeiHe}/>\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class HTTP extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">HTTP</span></p>\n                <div className=\"article-desc\">\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Https extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">https握手过程</span></p>\n                <div className=\"quote\">\n                    1、客户端使用https的url访问web服务器,要求与服务器建立ssl连接<br />\n                    2、web服务器收到客户端请求后, 会将网站的证书(包含公钥)传送一份给客户端<br />\n                    3、客户端收到网站证书后会检查证书的颁发机构以及过期时间, 如果没有问题就随机产生一个秘钥<br />\n                    4、客户端利用公钥将会话秘钥加密, 并传送给服务端, 服务端利用自己的私钥解密出会话秘钥<br />\n                    5、之后服务器与客户端使用秘钥加密传输<br />\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class TCP extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">TCP</span></p>\n                <div className=\"article-desc\">\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class FeSafe extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">前端安全</span></p>\n                <div className=\"quote\">\n                   前端安全主要分为两类：<br />\n                   1. CSRF攻击<br />\n                   2. XSS攻击\n                </div>\n\n                <p className=\"item-title\">1. CSRF攻击</p>\n                <div className=\"quote\">\n                    CSRF攻击的防范方法：<br />\n                    1、验证码<br />\n                    2、Referer Check<br />\n                    3、添加token验证\n                </div>\n\n                <p className=\"item-title\">2. XSS攻击</p>\n                <div className=\"quote\">\n                    XSS攻击的防范方法：<br />\n                    1、HttpOnly 防止劫取 Cookie<br />\n                    2、输入检查-不要相信用户的所有输入<br />\n                    3、输出检查-存的时候转义或者编码\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\nimport WorkPrinciple from './base/workPrinciple';\nimport BrowserLoad from './base/browserload';\nimport BrowserCache from './base/cache';\nimport BrowserNote from './base/browser';\n\n\nimport HTTPNote from './network/http';\nimport HTTPsNote from './network/https';\nimport TcpNote from './network/tcp';\n\nimport FeSafe from './safe/feSafe';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: '浏览器基础',\n        prop: 'browser-base',\n        children: [\n            {\n                label: '浏览器工作原理',\n                prop: 'browser-WorkPrinciple',\n                comp: () => <WorkPrinciple />\n            },\n            {\n              label: '在地址栏输入url到页面加载的过程',\n              prop: 'browser-load',\n              comp: function() {\n                  return <BrowserLoad />;\n            },\n            },{\n                label: '浏览器缓存',\n                prop: 'browser-cache',\n                comp: function() {\n                    return <BrowserCache />;\n                },\n            },{\n                label: '浏览器进程、渲染、运行机制',\n                prop: 'browser-render',\n                comp: function() {\n                    return <BrowserNote />;\n                },\n            },\n        ]\n    },{\n        label: '网络相关知识',\n        prop: 'network-base',\n        children: [\n            {\n              label: 'http',\n              prop: 'network-http',\n              comp: function() {\n                  return <HTTPNote />;\n              },\n            },{\n                label: 'https',\n                prop: 'network-https',\n                comp: function() {\n                    return <HTTPsNote />;\n                },\n            },\n            {\n                label: 'tcp',\n                prop: 'network-tcp',\n                comp: function() {\n                    return <TcpNote />;\n                },\n            },\n        ]\n    },\n    {\n        label: '安全',\n        prop: 'fe-safe',\n        children: [\n            {\n              label: '前端安全',\n              prop: 'fe-safe-note',\n              comp: function() {\n                  return <FeSafe />;\n              },\n            }\n        ]\n    },\n\n];\n\n\nexport default function BrowserIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","// https://juejin.im/post/5c82176b6fb9a049e064221b\n\nimport React, { Component } from 'react';\nimport Code from '../comp/Code';\nimport bubblesortIcon from '../../img/bubblesort';\n\nexport default class BubbleSort extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className='article-title'><span className=\"textShadow\">冒泡排序bubblesort</span></p>\n                <p className=\"item-title\">1. 思路</p>\n                <div className=\"quote\">\n                    参考：<a href=\"https://www.juejin.im/post/6844903496932655112\" target=\"_blank\">冒泡排序</a><br />\n                    第一次循环，开始比较当前元素与下一个元素的大小，如果比下一个元素小或者相等，则不需要交换两个元素的值；若比下一个元素大的话，则交换两个元素的值。然后，遍历整个数组，第一次遍历完之后，相同操作遍历第二遍。\n                </div>\n                <img src={bubblesortIcon} alt='' />\n\n                <p className=\"item-title\">2. 代码实现</p>\n                <Code code={`\nfunction bubbleSort(arr) {\n    var isSwap = false;\n    for (let i = 0; i < arr.length -1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                isSwap = true;\n                var temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n        if (!isSwap) {\n            return; //如果arr已经是一个排好序的数组，所以就不必进行循环\n        }\n    }\n}`} />\n                <p className=\"item-title\">3. 性能</p>\n                <div className=\"quote\">\n                    时间复杂度：平均时间复杂度是O(n^2),在最佳状态时，时间复杂度会缩小到O(n);<br />\n                    空间复杂度：由于辅助空间为常数，所以空间复杂度是O(1);\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../comp/Code';\n\nexport default class mianshi extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className='article-title'><span className=\"textShadow\">常见算法题</span></p>\n                <p className=\"item-title\">1. </p>\n                <div className=\"quote\">\n                    合并有序数组元素，合并后保持有序，时间复杂度要求O(n) \n                    例如：给定的两个数组为[1, 5]和[2, 5, 6, 8]，函数返回[1, 2, 5, 5, 6, 8]。\n                </div>\n            </div>\n        )\n    }\n}","// https://juejin.im/post/5c662e496fb9a049b82afb71\n\n\nimport React, { Component } from 'react';\nimport Code from '../comp/Code';\n\nexport default class QuickSort extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className='article-title'><span className=\"textShadow\">快速排序quickSort</span></p>\n                <p className=\"item-title\">1. 思路</p>\n                <div className=\"quote\">\n                    参考：<a href=\"https://www.juejin.im/post/6844903496932655112\" target=\"_blank\">快速排序</a><br />\n                    首先，我们需要找到一个基数，然后将比基数小的值放在基数的左边，将比基数大的值放在基数的右边，之后进行递归那两组已经归类好的数组。\n                </div>\n\n                <p className=\"item-title\">2. 代码实现</p>\n                <Code code={`\nfunction quickSort(arr) {\n    var temp = arr[0];\n    var left = [];\n    var right = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > temp) {\n            right.push(arr[i]);\n        } else {\n            left.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat([temp], quickSort(right));\n}`} />\n                <p className=\"item-title\">3. 性能</p>\n                <div className=\"quote\">\n                    时间复杂度：平均时间复杂度O(nlogn)，只有在特殊情况下会是O(n^2)，不过这种情况非常少<br />\n                    空间复杂度：辅助空间是logn，所以空间复杂度为O(logn)\n                </div>\n            </div>\n        )\n    }\n}","\n\nimport React, { Component } from 'react';\nimport Code from '../comp/Code';\n\nexport default class SelectionSort extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className='article-title'><span className=\"textShadow\">选择排序selectionSort</span></p>\n                <p className=\"item-title\">1. 思路</p>\n                <div className=\"quote\">\n                    参考：<a href=\"https://www.juejin.im/post/6844903496932655112\" target=\"_blank\">选择排序</a><br />\n                    第一遍，从数组中选出最小的，与第一个元素进行交换；第二遍，从第二个元素开始，找出最小的，与第二个元素进行交换；依次循环，完成排序\n                </div>\n\n                <p className=\"item-title\">2. 代码实现</p>\n                <Code code={`\nfunction selectionSort(arr) {\n    let minIndex;\n    for (let i = 0; i < arr.length - 1; i++) {\n        minIndex = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[minIndex] > arr[j]) {\n                minIndex = j;\n            }\n        }\n        var temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n}`} />\n                <p className=\"item-title\">3. 性能</p>\n                <div className=\"quote\">\n                    时间复杂度：平均时间复杂度是O(n^2)，这是一个不稳定的算法，因为每次交换之后，它都改变了后续数组的顺序。<br />\n                    空间复杂度：辅助空间是常数，空间复杂度为O(1);\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from './../comp/Code';\nimport './../comp/common/style.css';\n\n\nexport default class TreeSort extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\">\n                    <span className=\"textShadow\">二叉树排序</span>\n                </p>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">概念</span>\n                </p>\n\n                <div className=\"article-desc\">\n                    树：是一种非线性的数据结构，以分层的方式存储数据。树是由一组以边连接的节点组成。\n                    <br />\n                    二叉树：是一种特殊的树，子节点不超过两个。\n                    <br />\n                    二叉查找树：是一种特殊的二叉树，相对较小的值保存在左节点中，较大的值保存在右节点中。\n                </div>\n\n                <div className=\"article-desc\">\n                    二叉树的特点：在二叉树上查找，添加，删除元素非常快速\n                    <div className=\"line\"></div>\n                    <p className=\"mark\">思考点：为什么在二叉树上查找，添加，删除元素非常快速？</p>\n                </div>\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">节点对象类</span>\n                </p>\n\n                <Code \n                    code={`\n/**\n * Node对象保存数据和其他节点的链接（left和right）\n * @param {*} data 数据\n * @param {*} left 左子节点\n * @param {*} right 右子节点\n */\nfunction Node(data, left, right) {\n    this.data = data;\n    this.left = left;\n    this.right = right;\n    this.show = show;\n    // this.count = 0;\n} \n\nfunction show() {\n    return this.data;\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">二叉树类</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 实现二叉查找树类\n */\nfunction BST() {\n    this.root = null;\n    this.insert = insert;\n    this.inOrder = inOrder;\n    this.preOrder = preOrder;\n    this.postOrder = postOrder;\n    this.getMin = getMin;\n    this.getMax = getMax;\n    this.find = find;\n    this.remove = remove;\n    this.nodeCount = 0;\n    this.update = update;\n//  this.getNodeCount = getNodeCount; //节点个数\n}\n                    `}\n                />\n\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">插入节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 插入节点方法\n * 算法：\n *     1. 设根节点为当前节点\n *     2. 如果待插入的节点的值小于当前节点，则设新的节点为原节点的左节点，反之为右节点\n *     3. 如果当前节点的左节点为null，就将新的节点插入该位置，循环退出，反之，继续下一次\n *     4. 设新的当前节点为原节点的右节点\n *     5. 如果当前节点的右节点为null，就将新的节点插入该位置，循环退出，反之，继续下一次\n * @param {*} data \n */\nfunction insert(data) {\n    const node = new Node(data, null, null);\n    this.nodeCount += 1;\n    if (this.root == null) {\n        this.root = node;\n    } else {\n        let current = this.root;\n        let parent;\n        const bool = true;\n        while(bool) {\n            parent = current;\n            if (data < current.data) {\n                current = current.left;\n                if (current == null) {\n                    parent.left = node;\n                    break;\n                }\n            } else {\n                current = current.right;\n                if (current == null) {\n                    parent.right = node;\n                    break;\n                }\n            }\n        }\n    }\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">遍历 ==> 中序遍历</span>\n                </p>\n                <Code \n                    code={`\n/**\n * BST遍历之☞中序遍历\n * 中序遍历流程： 左子树 => 根节点 => 右子树\n */\nfunction inOrder(node) {\n    if (node !== null) {\n        inOrder(node.left);\n        window.console.log(node.show());\n        inOrder(node.right);\n    }\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">遍历 ==> 先序遍历（前序)</span>\n                </p>\n                <Code \n                    code={`\n/**\n * BST遍历之☞先序遍历（前序）\n * 中序遍历流程： 根节点 => 左子树 => 右子树\n */\nfunction preOrder(node) {\n    if (node !== null) {\n        window.console.log(node.show());\n        preOrder(node.left);\n        preOrder(node.right);\n    }\n}\n                    `}\n                />\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">遍历 ==> 后序遍历</span>\n                </p>\n                <Code \n                    code={`\n/**\n * BST遍历之☞后序遍历\n * 中序遍历流程： 左子树 => 右子树 => 根节点\n */\n\nfunction postOrder(node) {\n    if (node !== null) {\n        postOrder(node.left);\n        postOrder(node.right);\n        window.console.log(node.show());\n    }\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">获取最小的节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 获取最小的节点\n * 由于较小值在BST的左子树上，所以只需要遍历左子树即可\n */\nfunction getMin() {\n    let current = this.root;\n    while(current.left != null) {\n        current = current.left;\n    }\n    return current;\n}\n                    `}\n                />\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">获取最大的节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 获取最大的节点\n * 由于较大值在BST的右子树上，所以只需要遍历右子树即可\n */\n\nfunction getMax() {\n    let current = this.root;\n    while(current.right != null) {\n        current = current.right;\n    }\n    return current;\n}\n                `}/>\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">在BST中查找给定值的节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 在BST中查找给定值的节点\n * @param {*} data \n */\nfunction find(data) {\n    let current = this.root;\n    while(current != null) {\n        if (current.data == data) {\n            return current;\n        } else if (data < current.data) {\n            current = current.left;\n        } else {\n            current = current.right;\n        }\n    }\n    return null;\n}\n                `}/>\n\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">在BST中删除指定节点</span>\n                </p>\n                <Code \n                    code={`\n/**\n * 在BST中删除指定节点\n * 算法： \n *     1. 判断当前节点是否包含待删除的数据，如果包含，则删除；如果不包含，则比较大小\n *     2. 如果待删除数据小于当前节点上的数据，则移至当前节点的左子节点继续比较；\n *     3. 如果待删除数据大于当前节点上的数据，则移至当前节点的右子节点继续比较；\n *     4. 如果待删除数据是叶子节点，只需将从父节点指向null\n * @param {*} data \n */\n\nfunction remove(data) {\n    removeNode(this.root, data);\n}\n\nfunction removeNode(node, data) {\n    if (node == null) {\n        return null;\n    }\n    if (data == node.data) {\n        //没有子节点的节点\n        if (node.left == null && node.right == null) {\n            return null;\n        }\n        // 没有左子节点的节点\n        if (node.left == null) {\n            return node.right;\n        }\n        // 没有右子节点的节点\n        if (node.right == null) {\n            return node.left;\n        }\n        const getSmallest = function(node) {\n            if (node.left == null && node.right == null) {\n                return node;\n            }\n            if (node.left != null) {\n                return node.left;\n            }\n            if (node.right != null) {\n                return getSmallest(node.right);\n            }\n        }\n        // 有两个子节点的节点\n        const tempNode = getSmallest(node.right);\n        node.data = tempNode.data;\n        node.right = removeNode(node.right, tempNode.data);\n        return node;\n    } else if (data < node.data) {\n        node.left = removeNode(node.left, data);\n        return node;\n    } else {\n        node.right = removeNode(node.right, data);\n        return node;\n    }\n}\n                `}/>\n\n\n                <p className=\"item-title\">      \n                    <span className=\"textShadow\">在BST中更新指定节点</span>\n                </p>\n                <Code \n                    code={`\nfunction update(data) {\n    const node = this.find(data);\n    node.count++;\n    return node;\n}\n                    `}/>\n\n\n                <div className=\"line\" />\n                <p className=\"item-title\">\n                    <span className=\"textShadow\">完整代码</span>\n                </p>\n                <Code \n                    code={`\n /**\n * 概念\n *      树：是一种非线性的数据结构，以分层的方式存储数据。树是由一组以边连接的节点组成。\n *      二叉树：是一种特殊的树，子节点不超过两个。\n *      二叉查找树：是一种特殊的二叉树，相对较小的值保存在左节点中，较大的值保存在右节点中。\n * 特点： 在二叉树上查找，添加，删除元素非常快速\n */\n\n\n/**\n * Node对象保存数据和其他节点的链接（left和right）\n * @param {*} data 数据\n * @param {*} left 左子节点\n * @param {*} right 右子节点\n */\n function Node(data, left, right) {\n     this.data = data;\n     this.left = left;\n     this.right = right;\n     this.show = show;\n     this.count = 0;\n } \n\n function show() {\n     return this.data;\n }\n\n/**\n * 实现二叉查找树类\n */\n function BST() {\n     this.root = null;\n     this.insert = insert;\n     this.inOrder = inOrder;\n     this.preOrder = preOrder;\n     this.postOrder = postOrder;\n     this.getMin = getMin;\n     this.getMax = getMax;\n     this.find = find;\n     this.remove = remove;\n     this.nodeCount = 0;\n     this.update = update;\n    //  this.getNodeCount = getNodeCount; //节点个数\n }\n\n /**\n  * 插入节点方法\n  * 算法：\n  *     1. 设根节点为当前节点\n  *     2. 如果待插入的节点的值小于当前节点，则设新的节点为原节点的左节点，反之为右节点\n  *     3. 如果当前节点的左节点为null，就将新的节点插入该位置，循环退出，反之，继续下一次\n  *     4. 设新的当前节点为原节点的右节点\n  *     5. 如果当前节点的右节点为null，就将新的节点插入该位置，循环退出，反之，继续下一次\n  * @param {*} data \n  */\n function insert(data) {\n     const node = new Node(data, null, null);\n     this.nodeCount += 1;\n     if (this.root == null) {\n         this.root = node;\n     } else {\n        let current = this.root;\n        let parent;\n        const bool = true;\n        while(bool) {\n            parent = current;\n            if (data < current.data) {\n                current = current.left;\n                if (current == null) {\n                    parent.left = node;\n                    break;\n                }\n            } else {\n                current = current.right;\n                if (current == null) {\n                    parent.right = node;\n                    break;\n                }\n            }\n        }\n     }\n }\n/**\n * BST遍历之☞中序遍历\n * 中序遍历流程： 左子树 => 根节点 => 右子树\n */\n function inOrder(node) {\n    if (node !== null) {\n        inOrder(node.left);\n        window.console.log(node.show());\n        inOrder(node.right);\n    }\n }\n\n /**\n * BST遍历之☞先序遍历（前序）\n * 中序遍历流程： 根节点 => 左子树 => 右子树\n */\nfunction preOrder(node) {\n    if (node !== null) {\n        window.console.log(node.show());\n        preOrder(node.left);\n        preOrder(node.right);\n    }\n }\n\n /**\n * BST遍历之☞后序遍历\n * 中序遍历流程： 左子树 => 右子树 => 根节点\n */\nfunction postOrder(node) {\n    if (node !== null) {\n        postOrder(node.left);\n        postOrder(node.right);\n        window.console.log(node.show());\n    }\n }\n\n/**\n * 获取最小的节点\n * 由于较小值在BST的左子树上，所以只需要遍历左子树即可\n */\n function getMin() {\n    let current = this.root;\n    while(current.left != null) {\n        current = current.left;\n    }\n    return current;\n }\n\n /**\n * 获取最大的节点\n * 由于较大值在BST的右子树上，所以只需要遍历右子树即可\n */\n\n function getMax() {\n     let current = this.root;\n     while(current.right != null) {\n         current = current.right;\n     }\n     return current;\n }\n\n /**\n  * 在BST中查找给定值的节点\n  * @param {*} data \n  */\n function find(data) {\n    let current = this.root;\n    while(current != null) {\n        if (current.data == data) {\n            return current;\n        } else if (data < current.data) {\n            current = current.left;\n        } else {\n            current = current.right;\n        }\n    }\n    return null;\n }\n\n /**\n  * 在BST中删除指定节点\n  * 算法： \n  *     1. 判断当前节点是否包含待删除的数据，如果包含，则删除；如果不包含，则比较大小\n  *     2. 如果待删除数据小于当前节点上的数据，则移至当前节点的左子节点继续比较；\n  *     3. 如果待删除数据大于当前节点上的数据，则移至当前节点的右子节点继续比较；\n  *     4. 如果待删除数据是叶子节点，只需将从父节点指向null\n  * @param {*} data \n  */\nfunction remove(data) {\n    removeNode(this.root, data);\n}\n\nfunction removeNode(node, data) {\n    if (node == null) {\n        return null;\n    }\n    if (data == node.data) {\n        //没有子节点的节点\n        if (node.left == null && node.right == null) {\n            return null;\n        }\n        // 没有左子节点的节点\n        if (node.left == null) {\n            return node.right;\n        }\n        // 没有右子节点的节点\n        if (node.right == null) {\n            return node.left;\n        }\n        const getSmallest = function(node) {\n            if (node.left == null && node.right == null) {\n                return node;\n            }\n            if (node.left != null) {\n                return node.left;\n            }\n            if (node.right != null) {\n                return getSmallest(node.right);\n            }\n        }\n        // 有两个子节点的节点\n        const tempNode = getSmallest(node.right);\n        node.data = tempNode.data;\n        node.right = removeNode(node.right, tempNode.data);\n        return node;\n    } else if (data < node.data) {\n        node.left = removeNode(node.left, data);\n        return node;\n    } else {\n        node.right = removeNode(node.right, data);\n        return node;\n    }\n}\n\n// //获取BST中所有节点（包括根节点）个数\n// function getNodeCount() {\n//     this.count = 0;\n//     if (this.root !== null) {\n//         inOrder(node.left);\n//         console.log(node.show());\n//         inOrder(node.right);\n//     }\n// }\n\nfunction update(data) {\n    const node = this.find(data);\n    node.count++;\n    return node;\n}\n\nexport default BST;\n                    `}\n                />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\nimport BubbleSort from './bubbleSort';\nimport Mianshi from './mianshi';\nimport QuickSort from './quickSort';\nimport SelectionSort from './selectionSort';\n\n\nimport TreeSort from './tree';\n// import H5APINote from './api/index';\n\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: '算法',\n        prop: 'algorithm',\n        children: [\n            {\n              label: '冒泡排序',\n              prop: 'algorithm-bubble-sort',\n              comp: function() {\n                return <BubbleSort />;\n              },\n            },\n            {\n                label: '快排',\n                prop: 'algorithm-quick',\n                comp: function() {\n                  return <QuickSort />;\n                },\n            },\n            {\n              label: '选择排序',\n              prop: 'algorithm-selection',\n              comp: function() {\n                return <SelectionSort />;\n              },\n            },\n            {\n                label: '二叉树',\n                prop: 'algorithm-tree',\n                comp: function() {\n                  return <TreeSort />;\n                },\n            },\n            {\n              label: '常见算法题',\n              prop: 'algorithm-note',\n              comp: function() {\n                return <Mianshi />;\n              },\n          },\n        ]\n    },\n];\n\nexport default function H5Index () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WXNavbar extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">微信小程序---自定义导航栏</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n// wxml\n<view class=\"nav-bar {{modType=='normal'? 'normal': modType}} {{showBlank ? 'bg-color':''}}\" style='height:{{navigationBarHeight}};{{headerStyle}}'>\n    <view style=\"{{'height: ' + statusBarHeight}}\"></view>\n\n    <view class=\"nav-group flex flex-align-center flex-pack-around\"  style=\"{{'top: ' + statusBarHeight}};{{btnHomeStyle}}\">\n        <view wx:if=\"{{showBack && !showHome}}\" class=\"nav-btn\">\n            <view class=\"icon icon-arrow-l flex flex-align-center flex-pack-center\"></view>\n        </view>\n        <view wx:if=\"{{showHome}}\" class=\"nav-btn\" >\n            <image class=\"showHome\" src=\"{{src}}\" />\n        </view>\n    </view>\n\n    <view class=\"nav-title flex flex-align-center flex-pack-center\" style=\"{{'top: ' + statusBarHeight}};{{btnHomeStyle}}\">\n        {{pageName}}\n    </view>\n</view>\n<view class=\"nav-bar-placeholder\" style='height:{{navigationBarHeight}};'></view>\n\n// js\n\nimport { getStatusBarHeight } from 'util/wx/sysinfo'\nconst statusBarHeight = getStatusBarHeight()\nComponent({\n    options: {\n        addGlobalClass: true,\n    },\n    /**\n     * 组件的属性列表\n     * pageName 指定页面标题\n     * modType normal | '' normal为带头部的样式，传空字符串为没有头部的样式\n     * goList true | false true表示跳转到列表页\n     * customStyle:\n     * backUrl: 返回的url\n     */\n    properties: {\n        pageName: String,\n        modType: String,\n        goList: {\n            type: Boolean,\n            value: false\n        },\n        showHome: {\n            type: Boolean,\n            value: false\n        },\n        headerStyle: String,\n        btnHomeStyle: String,\n        backUrl: {\n            type: String,\n            value: ''\n        }\n    },\n    /**\n     * 组件的初始数据\n     * showBack showBack\n     * statusBarHeight  界面状态栏高度，用于适配不同设备状态栏\n     * navigationBarHeight  navbar的设计高度，UI定义高度，可以手动修改\n     */\n    data: {\n        showBlank: true,\n        showBack: true,\n        showHome: false,\n        statusBarHeight: statusBarHeight + 'px',\n        navigationBarHeight: (statusBarHeight + 50) + 'px'\n    },\n    pageLifetimes: {\n        show() {\n            this.setData({\n                showBack: this.data.goList ? true : (getCurrentPages().length > 1)\n            })\n        },\n\n    },\n    lifetimes: {\n        ready: function () {\n            this._observer = wx.createIntersectionObserver(this)\n            this._observer\n                .relativeToViewport()\n                .observe('.nav-bar-placeholder', (res) => {\n                    if (res.intersectionRatio > 0) {\n                        // 移出，背景出现\n                        this.setData({\n                            showBlank: false\n                        })\n                    } else {\n                        // 进入，背景变透明\n                        this.setData({\n                            showBlank: true\n                        })\n                    }\n                })\n        },\n        detached: function () {\n            if (this._observer) this._observer.disconnect()\n        }\n    },\n    /**\n     * 组件的方法列表\n     */\n    methods: {\n        //回退\n        historyBack: function () {\n            if (this.data.goList) {\n                wx.reLaunch({\n                    url: '/pages/home/index'\n                })\n            } else {\n                wx.navigateBack()\n            }\n        },\n        goHome: function (e) {\n            this.triggerEvent(\"homeEventHandler\", e);\n            if (this.data.backUrl && this.data.backUrl != '') {\n                wx.reLaunch({\n                    url: this.data.backUrl\n                })\n            } else {\n                wx.switchTab({\n                    url: '/pages/home/index'\n                })\n            }\n        }\n    }\n})\n\n`} />\n\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Taro extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">Taro</span></p>\n                <div className=\"article-desc\">\n                    taro开发小程序过程中的一些坑：<br />\n                    1. 要跳转的路由中不能有中划线<br /><br />\n                    2. 一个文件中只能有一个class<br /><br />\n                    3. 在微信小程序中this代表组件实例，在taro中this.$scope代表组件实例<br /><br />\n                    <Code code={`\ncomponentDidMount() {\n    const query = Taro.createSelectorQuery().in(this.$scope);\n    query.select('#list-card').boundingClientRect((res) => {\n    console.log('res: ', res);\n    }).exec()\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\nimport WXNavbar from './wx/navbar';\nimport TaroBug from './taro/bug';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: '微信小程序',\n        prop: 'wx-miniApp',\n        children: [\n            {\n              label: '自定义导航栏',\n              prop: 'wx-navbar',\n              comp: function() {\n                  return <WXNavbar />;\n              },\n            },\n        ]\n    },\n    {\n        label: 'taro小程序',\n        prop: 'taro-miniApp',\n        children: [\n            {\n              label: 'taro开发过程中的坑',\n              prop: 'taro-bug',\n              comp: function() {\n                  return <TaroBug />;\n              },\n            },\n        ]\n    },\n];\n\n\nexport default function JsIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React, { Component } from 'react';\n\nexport default class HtmlWebpackPlugin extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                参考文档：https://www.jianshu.com/p/08a60756ffda\n                <br />\n                https://www.cnblogs.com/woodk/p/8288957.html\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class Concept extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">webpack基础</span></p>\n                <div className=\"quote\">\n                    webpack原理<br /><br />\n                    webpack的运行是一个串行的过程，从启动到结束会执行以下的流程：<br />\n                    1. 初始化参数：从配置文件和shell语句中读取与合并参数，得到最终的参数。<br />\n                    2. 开始编译：用第一步得到的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译。<br />\n                    3. 确定入口：根据entry找出所有文件<br />\n                    4. 编译模块：从入口文件开始出发，调用所有配置的Loader对模块进行编译，再找到模块依赖的模块，再递归本步骤，直到所有入口文件都经过本步骤的处理<br />\n                    5. 完成编译：在第四步后，得到了每个模块被编译的内容和他们直接的依赖关系。<br />\n                    6. 输出资源：根据入口和模块之间的依赖关系组装成一个个包含多个模块的chunk，再把每个chunk转换成一个单独的文件加入到输出内容后，这一步是可以修改输出内容的最后机会。<br />\n                    7. 输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入系统。<br />\n                </div>\n\n                <div className=\"quote\">\n                    webpack优化<br /><br />\n                    1. 缩小文件搜索范围<br />\n                        a、优化loader配置： loader对文件的转换操作很耗时，需要让尽可能少的文件被loader处理。<br />\n                        在使用loader时可以通过test，include，exclude三个配置项来命中loader要应用规则的文件。<br />\n                        <Code code={`\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: ['babel-loader?cacheDirectory'],\n                include: path.resolve(__dirname, 'src'),\n            }\n        ]\n    }\n}`} />  \n                        b、优化resolve.modules配置：resolve.modules用于配置webpack去哪些目录寻找第三方模块。默认值为node_modules。\n                        如果知道安装的模块在项目的根目录下的./node_modules时候，没有必要按照默认的方式一层层找：\n                        <Code code={`\nmodule.exports = {\n    resolve: {\n        modules: [path.resolve(__dirname, 'node_modules')]\n    }\n}`} />\n                        c、优化resolve.alias的配置：resolve.alias配置通过别名来把原导入路径映射成一个新的导入路径，可以减少耗时的递归解析操作。\n                </div>\n\n                <div className=\"quote\">\n                    1. Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。<br />\n                    2. Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。<br />\n                    3. Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。<br />\n                    4. Loader：模块转换器，用于把模块原内容按照需求转换成新内容。<br />\n                    5. Plugin：扩展插件，在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件的发生，在特定时机做对应的事情。<br />\n                    6. Output：打包后文件输出的位置。\n                </div>\n\n                <p className=\"item-title\">一、 webpack</p>\n                <div className=\"quote\">\n                   webpack是一个现代js应用程序的静态模块打包器（module bundler）。当webpack处理应用程序时，它会递归的构建一个依赖图， 其中包含\n                   应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。\n                </div>\n\n                <p className=\"item-title\">二、 入口（entry）</p>\n                <div className=\"quote\">\n                    入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。<br /><br />\n                    配置：<br/>\n                    可以通过在 webpack 配置中配置 entry 属性，来指定一个入口起点（或多个入口起点）。默认值为 ./src。<br /><br/>\n                    简单实例：<br/>\n                    <Code code={`\n//webpack.confing.js\nmodule.exports = {\n    entry: './scr/index.js',\n}`} />\n                </div>\n\n                <p className=\"item-title\">三、 出口（output）</p>\n                <div className=\"quote\">\n                    出口属性告诉webpack在哪里输出它所创建的bundles，以及如何命名这些文件，默认值为./dist<br/><br/>\n                    简单实例：<br/>\n                    <Code code={`\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'my-fitst-webpack-demo.js',\n    }\n}`} />\n                </div>\n\n                <p className=\"item-title\">四、 loader</p>\n                <div className=\"quote\">\n                    loader让webpack能够处理js以外的文件（webpack只能理解js），loader可以将所有类型的文件转换为webpack能够处理的有效模块，\n                    然后利用webpack的打包能力，对它们进行处理。<br/><br/>\n                    在webpack中配置loader的两个目标：<br/>\n                    1. test属性： 用于标示出，应该被对应的loader进行转换的文件；<br/>\n                    2. use属性： 表示进行转换时，应该用哪个loader。<br/><br/>\n\n                    简单实例：<br/>\n                    <Code code={`\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'my-first-webpack-demo.js',\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.test$/,\n                use: 'raw-loader',\n            }\n        ]\n    }\n}\n`}/>\n                </div>\n\n\n                <p className=\"item-title\">五、 插件（plugin）</p>\n                <div className=\"quote\">\n                    插件的范围包括：从打包优化，压缩，一直到重新定义环境中的变量。<br/><br/>\n                    使用一个插件，首先需要require它，把它添加到plugins数组中。多数插件可以通过option来自定义。\n                    也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。<br/><br/>\n\n                    简单实例：<br/>\n                    <Code code={`\n// webpack.config.js\n\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装\nconst path = require('path');\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'my-first-webpack-demo.js',\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.text$/,\n                use: 'raw-loader',\n            }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/public/index.html',\n        })\n    ]\n}`} />\n                </div>\n\n                <p className=\"item-title\">六、 模式</p>\n                <div className=\"quote\">\n                    通过选择 development 或 production 之中的一个，来设置 mode 参数，可以启用相应模式下的 webpack 内置的优。<br/><br/>\n                    简单实例：<br/>\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    mode: 'production',\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackEntry extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">entry配置</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、 单个入口---简单配置</span></p>\n                <div className=\"article-desc\">\n                    entry 的写法有三种 分别是:字符串/数组/对象; 其中 字符串 和数组是 对象的一种简写形式.<br /><br />\n                    用法： entye: string | Array(string)<br /><br />\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    entry: './src/index.js', // 是下面的简写\n    entry: {\n        main: './src/index.js'\n    }\n}`} />       \n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、 对象语法</span></p>\n                <div className=\"article-desc\">\n                    用法： entry: [entryChunkName: string]: string | Array(string)<br /><br />\n                    <Code code={`\n//webpack.confing.js\nmodule.exports = {\n    entry: {\n        main: './src/index.js',\n        home: './src/pages/home/index.js',\n    }\n}`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、 多页面应用程序</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    entry: {\n        page1: './src/pages/index.js',\n        page2: './src/pages/home.js',\n        page3: './src/pages/my.js',\n    }\n}`} />\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、 entry---数组</span></p>\n                <div className=\"article-desc\">\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    entry: ['./src/index.js', './src/pages/home.js'],\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackOutput extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">output配置</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、用法</span></p>\n                <div className=\"article-desc\">\n                    配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。<br /><br />\n                    在 webpack 中配置 output 属性的最低要求是，将它的值设置为一个对象，包括以下两点：<br />\n                    1、filename 用于输出文件的文件名。<br />\n                    2、目标输出目录 path 的绝对路径。<br /><br />\n\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'demo.js',\n    }\n}`} />       \n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、 多个入口起点的output</span></p>\n                <div className=\"article-desc\">\n                    如果配置创建了多个单独的 \"chunk\"，则应该使用占位符来确保每个文件具有唯一的名称。<br /><br />\n                    <Code code={`\n//webpack.confing.js\nmodule.exports = {\n    entry: {\n        main: './src/index.js',\n        home: './src/pages/home/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: __dirname + '/dist',\n    }\n\n}`} />\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackMode extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">mode</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、用法</span></p>\n                <div className=\"article-desc\">\n                    提供 mode 配置选项，告知 webpack 使用相应模式的内置优化。<br /><br />\n                    <Code code={`\n// webpack.config.js\nmodule.exports = {\n    mode: 'production'\n}`} />       \n                或者从 CLI 参数中传递： webpack --mode=production<br /><br />\n\n                mode的可选值： <br />\n                <span className=\"text-placeholder\" />1. development: 会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。<br /><br />\n                <span className=\"text-placeholder\" />2. production: 会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.\n\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackLoader extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">loader</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、loader</span></p>\n                <div className=\"article-desc\">\n                    loader 用于对模块的源代码进行转换。loader 可以使你在 import 或\"加载\"模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许直接在 JavaScript 模块中 import CSS文件！ <br /><br />\n                    示例：<br />\n                    <Code code={`\nnpm install --save-dev css-loader\nnpm install --save-dev ts-loader\n\n// webpack.config.js\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: 'css-loader',\n            },\n            {\n                test: /\\.ts$/,\n                use: 'ts-loader',\n            }\n        ]\n    }\n}`} />       \n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、使用loader</span></p>\n                <div className=\"article-desc\">\n                    在应用程序中有三种使用loader的方式：<br /><br />\n                    1. 配置（推荐）：在webpack.config.js文件中指定loader；<br />\n                    2. 内联：在每个import语句中显式的指定loader；<br />\n                    3. CLI：在shell命令中指定loader；<br /><br />\n\n                    <span className=\"mark\">1. 配置</span><br />\n                    module.rules 允许你在 webpack 配置中指定多个 loader。 这是展示 loader 的一种简明方式，并且有助于使代码变得简洁。同时让你对各个 loader 有个全局概览：\n                    <Code code={`\n module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          { loader: 'style-loader' },\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          }\n        ]\n      }\n    ]\n  }`} />\n                    <span className=\"mark\">2. 内联</span><br />\n                    可以在 import 语句或任何等效于 \"import\" 的方式中指定 loader。使用 ! 将资源中的 loader 分开。分开的每个部分都相对于当前目录解析。\n                    <div className=\"code-desc\">\n                        import Styles from 'style-loader!css-loader?modules!./styles.css';\n                    </div>\n                    通过前置所有规则及使用 !，可以对应覆盖到配置中的任意 loader。<br /><br />\n\n\n                    <span className=\"mark\">3. CLI</span><br />\n                    也可以通过 CLI 使用 loader：\n                    <div className=\"code-desc\">\n                        webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader';\n                    </div>\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">三、loader特性</span></p>\n                <div className=\"article-desc\">\n                    1. loader支持链式传递，一组链式的 loader 将按照相反的顺序执行。loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。<br/><br/>\n                    2. loader可以是同步的，也可以是异步的；<br/><br/>\n                    3. loader运行在node.js环境中，能够执行任何可能的操作；<br/><br/>\n                    4. loader接受查询参数，用于对loader传递配置；<br/><br/>\n                    5. loader也可以通过options对象进行配置；<br/><br/>\n                    6. 除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。<br/><br/>\n                    7. 插件可以为loader带来更多的特性；<br/><br/>\n                    8. loader能够产生额外的任意文件；<br/><br/>\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">四、解析loader</span></p>\n                <div className=\"article-desc\">\n                    loader 遵循标准的模块解析。多数情况下，loader 将从模块路径（通常将模块路径认为是 npm install, node_modules）解析。\n                    loader 模块需要导出为一个函数，并且使用 Node.js 兼容的 JavaScript 编写。通常使用 npm 进行管理，但是也可以将自定义 loader 作为应用程序中的文件。按照约定，loader 通常被命名为 xxx-loader（例如 json-loader）。\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Code from '../../comp/Code';\n\nexport default class WebpackPlugins extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <p className=\"article-title\"><span className=\"textShadow\">plugins</span></p>\n                <p className=\"item-title\"><span className=\"textShadow\">一、plugins</span></p>\n                <div className=\"article-desc\">\n                    插件目的在于解决 loader 无法实现的其他事。<br /><br />\n                    webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，\n                    并且 compiler 对象可在整个编译生命周期访问。<br /><br />\n                    \n                    <Code code={`\nconst pluginName = 'ConsoleLogOnBuildWebpackPlugin';\n\nclass ConsoleLogOnBuildWebpackPlugin {\n    apply(compiler) {\n        compiler.hooks.run.tap(pluginName, compilation => {\n            console.log(\"webpack 构建过程开始！\");\n        });\n    }\n}`} />       compiler hook 的 tap 方法的第一个参数，应该是驼峰式命名的插件名称。建议为此使用一个常量，以便它可以在所有 hook 中复用。\n                </div>\n\n                <p className=\"item-title\"><span className=\"textShadow\">二、用法</span></p>\n                <div className=\"article-desc\">\n                    由于插件可以携带参数/选项，你必须在 webpack 配置中，向 plugins 属性传入 new 实例。<br /><br />\n                    <Code code={`\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); //通过 npm 安装\n\nconst config = {\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin(),\n    new HtmlWebpackPlugin({template: './src/index.html'})\n  ]\n};\n\nmodule.exports = config;`} />\n                \n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from './../comp/LeftSider';\n\n\nimport HtmlWebpackPlugin from './plugin/html-webpack-plugin';\nimport Concept from './base/concept';\nimport WebpackEntry from './base/entry';\nimport WebpackOutput from './base/output';\nimport WebpackMode from './base/mode';\nimport WebpackLoader from './base/loader';\nimport WebpackPlugins from './base/plugins';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'webpack基础',\n        prop: 'webpack-base',\n        children: [\n            {\n              label: '基本概念',\n              prop: 'webpack-concept',\n              comp: function() {\n                return <Concept />;\n              },\n            },\n            {\n              label: '入口',\n              prop: 'webpack-entry',\n              comp: function() {\n                return <WebpackEntry />;\n              },\n            },\n            {\n              label: '出口',\n              prop: 'webpack-output',\n              comp: function() {\n                return <WebpackOutput />;\n              },\n            },\n            {\n              label: 'mode',\n              prop: 'webpack-mode',\n              comp: function() {\n                return <WebpackMode />;\n              },\n            },\n            {\n              label: 'loader',\n              prop: 'webpack-loader',\n              comp: function() {\n                return <WebpackLoader />;\n              },\n            },\n            {\n              label: 'plugins',\n              prop: 'webpack-plugins',\n              comp: function() {\n                return <WebpackPlugins />;\n              },\n            },\n        ]\n    },\n    {\n        label: '插件',\n        prop: 'plugin',\n        children: [\n            {\n              label: 'html-webpack-plugin',\n              prop: 'html-webpack-plugin',\n              comp: function() {\n                return <HtmlWebpackPlugin />;\n              },\n            },\n        ]\n    },\n];\n\nexport default function WebpackIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","\nimport React, { Component } from 'react';\nimport Code from './../../comp/Code';\n\n\nexport default class Currying extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"article-desc\">\n                <p className=\"article-title\"><span className=\"textShadow\">CSS 性能优化</span></p>\n                <h3>1. css 动画性能优化</h3>\n                <div className=\"quote\">\n                    参考文档： <a href=\"http://www.cainiaoxueyuan.com/zhizuo/8484.html\" target=\"_blank\">链接1</a><br />\n                    参考文档： <a href=\"http://sy-tang.github.io/2014/05/14/CSS%20animations%20and%20transitions%20performance-%20looking%20inside%20the%20browser/\" target=\"_blank\">链接2</a><br />\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LeftSider from '../comp/LeftSider';\n\n\nimport PrefCss from './h5/css';\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'H5性能优化',\n        prop: 'h5-perf',\n        children: [\n            {\n              label: 'html',\n              prop: 'h5-perf-html',\n              comp: function() {\n                  return null;\n              },\n            },\n            {\n                label: 'css',\n                prop: 'h5-perf-css',\n                comp: function() {\n                    return <PrefCss />;\n                },\n            },\n            {\n                label: 'js',\n                prop: 'h5-perf-js',\n                comp: function() {\n                    return null;\n                },\n            },\n            {\n                label: 'image',\n                prop: 'h5-perf-image',\n                comp: function() {\n                    return null;\n                },\n            },\n            {\n                label: 'react',\n                prop: 'h5-perf-react',\n                comp: function() {\n                    return null;\n                },\n            },{\n                label: 'webpack',\n                prop: 'h5-perf-webpack',\n                comp: function() {\n                    return null;\n                },\n            },\n            {\n                label: '白屏时间',\n                prop: 'h5-perf-whiteScreen',\n                comp: function() {\n                    return null;\n                },\n            },\n            {\n                label: '首屏时间',\n                prop: 'h5-perf-firstScreen',\n                comp: function() {\n                    return null;\n                },\n            },\n        ]\n    },\n    {\n        label: '小程序性能优化',\n        prop: 'miniApp-perf',\n        children: [\n            {\n              label: '白屏时间',\n              prop: 'miniApp-perf-whiteScreen',\n              comp: function() {\n                  return null;\n              },\n            },\n            {\n                label: '首屏时间',\n                prop: 'miniApp-perf-firstScreen',\n                comp: function() {\n                    return null;\n                },\n            },{\n                label: 'js',\n                prop: 'miniApp-perf-js',\n                comp: function() {\n                    return null;\n                },\n            },\n        ]\n    },\n];\n\n\nexport default function JsIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import React from 'react';\nimport LeftSider from '../comp/LeftSider';\n\n// 侧边栏\nconst SliderMenuList = [\n    {\n        label: 'node基础',\n        prop: 'node-base',\n        children: [\n            {\n              label: '基础概念',\n              prop: 'node-base-note',\n              comp: function() {\n                  return null;\n              },\n            },\n        ]\n    },\n];\n\n\nexport default function JsIndex () {\n    return (\n        <LeftSider SliderMenuList={SliderMenuList} />\n    )\n}\n","import ReactNote from './pages/react';\nimport JSNote from './pages/js';\nimport HTMLNote from './pages/html&css';\n// import CSSNote from './pages/css';\nimport BrowserNote from './pages/browser';\nimport AlgorithmNote from './pages/algorithm';\nimport MiniAppNote from './pages/miniApp';\nimport WebpackNote from './pages/webpack';\nimport PerfNote from './pages/perf';\nimport NodeNote from './pages/node';\n\nconst routeList = [\n    {path: '/', component: ReactNote},\n    {path: '/react', component: ReactNote},\n    {path: '/js', component: JSNote},\n    {path: '/html-css', component: HTMLNote},\n    // {path: '/css', component: CSSNote},\n    {path: '/browser-network', component: BrowserNote},\n    {path: '/algorithm', component: AlgorithmNote},\n    {path: '/miniApp', component: MiniAppNote},\n    {path: '/webpack', component: WebpackNote},\n    {path: '/perf', component: PerfNote},\n    {path: '/node', component: NodeNote},\n];\n\n\n//头部菜单栏\nconst MenuLinkDatas = [\n    {\n        label: 'React',\n        prop: 'react',\n        path: 'react',\n        id: 'react',\n    },\n    {\n        label: 'JavaScript',\n        prop: 'js',\n        path: 'js',\n        id: 'js',\n    },\n    {\n        label: 'HTML&CSS',\n        prop: 'html-css',\n        path: 'html-css',\n        id: 'html-css',\n    },\n    // {\n    //     label: 'CSS',\n    //     prop: 'css',\n    //     path: 'css',\n    //     id: 'css',\n    // },\n    {\n        label: 'webpack',\n        prop: 'webpack',\n        path: 'webpack',\n        id: 'webpack',\n    },\n    {\n        label: 'node',\n        prop: 'node',\n        path: 'node',\n        id: 'node',\n    },\n    {\n        label: '性能优化',\n        prop: 'perf',\n        path: 'perf',\n        id: 'perf',\n    },\n    // {\n    //     label: '移动端',\n    //     prop: 'mobile',\n    //     path: 'mobile',\n    //     id: 'mobile',\n    // },\n    {\n        label: '小程序',\n        prop: 'miniApp',\n        path: 'miniApp',\n        id: 'miniApp',\n    },\n    {\n        label: '浏览器&网络',\n        prop: 'browser-network',\n        path: 'browser-network',\n        id: 'browser-network',\n    },\n    {\n        label: '算法',\n        prop: 'algorithm',\n        path: 'algorithm',\n        id: 'algorithm',\n    }\n];\n\n\n\nexport {\n    routeList,\n    MenuLinkDatas,\n}","import React from 'react';\nimport './index.scss';\nimport { Menu, Dropdown } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nconst settingMenu = [\n    {\n        label: '更换主题',\n        prop: 'theme',\n    },\n];\n\nexport default class Theme extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    handleMenuClick = (data) => {\n        const { changeTheme } = this.props;\n        if (data.key === 'theme') {\n            changeTheme();\n        }\n    }\n\n    render() {\n        return (\n            <div className={`theme-component ${this.props.theme}`}>\n                <Dropdown overlay={\n                    <Menu onClick={this.handleMenuClick}>\n                        {\n                            settingMenu.map(item => <Menu.Item key={item.prop}>{item.label}</Menu.Item>)\n                        }\n                  </Menu>\n                }>\n                    <span>\n                        更多 <DownOutlined />\n                    </span>\n                </Dropdown>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Drawer, Tabs } from 'antd';\nimport './index.scss';\n\nconst { TabPane } = Tabs;\n\nconst TabsData = [\n    {\n        type: 'css',\n        text: 'css',\n        notes: [\n            {\n                id: 'css-gradient',\n                text: 'css生成渐变背景工具',\n                link: 'https://www.colorzilla.com/gradient-editor/',\n            },\n            {\n                id: 'css-process',\n                text: 'css实现进度条',\n                link: 'https://juejin.im/post/6844903758074216462',\n            },\n            {\n                id: 'css-layout',\n                text: 'css各种布局',\n                link: 'https://chokcoco.github.io/CSS-Inspiration/#/./layout/flex-waterfalls-flow',\n            },\n        ]\n    },\n    {\n        type: 'js',\n        text: 'js',\n        notes: [\n            {\n                id: 'js-promise',\n                text: '45道promise面试题',\n                link: 'https://mp.weixin.qq.com/s?__biz=MzU5NDM5MDg1Mw==&mid=2247484225&idx=1&sn=b1d26191a41b9a3961f6798d1218fd79&chksm=fe00b96bc977307d2eab27dbd25bf6d27194d7fcdd9d9515822639b0206ad6ca1f946a0de7a9&token=1408690735&lang=zh_CN#rd',\n            },\n            {\n                id: 'js-ast',\n                text: 'AST查看器',\n                link: 'https://astexplorer.net/',\n            },\n            {\n                id: 'js-promise-self',\n                text: '自己实现promise',\n                link: 'https://juejin.im/post/6856213486633304078',\n            },\n            {\n                id: 'js-this',\n                text: 'this试题',\n                link: 'https://mp.weixin.qq.com/s/1iw1MBfitockO5U0ZJIeXQ',\n            },\n            {\n                id: 'js-js30', \n                text: 'javascript30',\n                link: 'https://github.com/wesbos/JavaScript30/blob/master/01%20-%20JavaScript%20Drum%20Kit/index-FINISHED.html',\n            },\n            {\n                id: 'js-vdom', \n                text: '虚拟DOM性能',\n                link: 'https://www.zhihu.com/question/31809713/answer/53544875',\n            },\n            {\n                id: 'js-browser', \n                text: '浏览器进程&线程',\n                link: 'https://segmentfault.com/a/1190000012925872',\n            },\n            {\n                id: 'js-custom',\n                text: '自己实现js方法',\n                link: 'https://juejin.im/post/6870319532955828231',\n            },\n            {\n                id: 'js-babel',\n                text: 'babel在线转换',\n                link: 'https://www.babeljs.cn/repl'\n            },{\n                id: 'js-sf',\n                text: 'fe-算法',\n                link: 'http://obkoro1.com/web_accumulate/algorithm/induction/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0.html',\n            }\n        ]\n    },\n    {\n        type: 'react',\n        text: 'react',\n        notes: []\n    }\n];\n\nexport default function DrawerComp(props) {\n    const { onClose, visible } = props;\n    return (\n        <Drawer \n            title=\"笔记 & 记录\"\n            placement=\"right\"\n            closable={false}\n            onClose={onClose}\n            visible={visible}\n            width='50%'\n        >\n            <Tabs defaultActiveKey=\"1\" tabPosition='left' style={{ height: 220 }}>\n                {TabsData.map(item => (\n                    <TabPane tab={`${item.text}`} key={item.type}>\n                        {\n                            item.notes.map((one, index) => <p key={one.id}>{index + 1}.  {one.text}<a href={one.link} target=\"_blank\"> =={'>'} 链接</a></p>)\n                        }\n                    </TabPane>\n                ))}\n            </Tabs>\n        </Drawer>\n    )\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport reducer from './reducer/index';\nimport thunk from 'redux-thunk'\nimport logger from 'redux-logger'\nimport { Layout } from 'antd';\n\nimport { HashRouter } from 'react-router-dom';\nimport Route from './component/route/router';\nimport MenuLink from './component/route/link';\n\nimport { MenuLinkDatas, routeList } from './config';\nimport logo from './img/logo.jpg';\nimport './styles/root.css';\nimport './styles/iconfont.css';\nimport './pages/comp/common/style.css';\n\nimport Theme from './component/Theme/index';\nimport { ThemeContext, themesObj } from './context/theme';\nimport DrawerComp from './component/Drawer';\n\nconst { Header } = Layout;\n\nconst middleware = [thunk];\nif(process.env.NODE_ENV !== 'production'){\n    middleware.push(logger)\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(...middleware)));\n\n\nclass APP extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            theme: themesObj.dark,\n            openDrawer: false,\n        }\n    }\n\n    toggleTheme = () => {\n        const { theme } = this.state;\n        this.setState({\n            theme: theme.key === 'dark' ? themesObj.light : themesObj.dark,\n        });\n    }\n\n    render() {\n        const { foreground, background, key:theme } = this.state.theme;\n        const style = {\n            color: foreground,\n            background: background,\n        }\n        return (\n            <ThemeContext.Provider value={theme}>\n                <Layout>\n                    <HashRouter>\n                        <Header className=\"header\" style={style}>\n                            <div className=\"logo-wrap\">\n                                <img className=\"logo\" src={logo} alt=\"\" />\n                            </div>\n                            <MenuLink menuList={MenuLinkDatas} />\n                            <Theme changeTheme={this.toggleTheme} style={style} theme={theme}/>\n                        </Header>\n                        <Route routeList={routeList} />\n                    </HashRouter>\n                    <div className=\"noteBook\" onClick={() => {this.setState({ openDrawer: true })}}><span className=\"iconfont icon-edit\" /></div>\n                    <DrawerComp visible={this.state.openDrawer} onClose={() => {this.setState({ openDrawer: false })} }/>\n                </Layout>\n            </ThemeContext.Provider>\n        )\n    }\n}\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <APP />\n    </Provider>,\n    document.getElementById('root'),\n    () => {\n        window.UI && window.UI.loading && window.UI.loading.hide && window.UI.loading.hide();\n    }\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}